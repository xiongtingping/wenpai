var e=Object.defineProperty,r=(r,t,s)=>((r,t,s)=>t in r?e(r,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):r[t]=s)(r,"symbol"!=typeof t?t+"":t,s);import{k as t,D as s,s as a}from"./pages-home-BoZVsFKO.js";import{A as i}from"./index-BXkH25xn.js";const o=new class{constructor(){r(this,"guard",null),r(this,"authingClient",null),r(this,"config"),r(this,"apiBaseUrl"),this.config=t(),this.apiBaseUrl="https://www.wenpai.xyz/api",this.initAuthing()}initAuthing(){try{this.guard=new s(this.config),this.authingClient=new i({appId:this.config.appId,appHost:this.config.host}),a.secureLog("Authing客户端初始化成功")}catch(e){a.secureLog("Authing客户端初始化失败",{error:e instanceof Error?e.message:"未知错误"},"error")}}async login(e,r){if(!this.authingClient)throw new Error("Authing客户端未初始化");try{let t;switch(e){case"password":t=await this.authingClient.loginByEmail(r.email,r.password);break;case"code":t=await this.authingClient.loginByPhoneCode(r.phone,r.code);break;case"social":throw new Error("社交登录暂不支持");default:throw new Error("不支持的登录方式")}const s=this.convertAuthingUser(t);return await this.syncUserToBackend(s),a.secureLog("用户登录成功",{userId:s.id,method:e}),s}catch(t){throw a.secureLog("用户登录失败",{method:e,error:t instanceof Error?t.message:"未知错误"},"error"),t}}async register(e,r){if(!this.authingClient)throw new Error("Authing客户端未初始化");try{let t;"email"===e?t=await this.authingClient.registerByEmailCode(r.email,r.code,r.nickname):"phone"===e&&(t=await this.authingClient.registerByPhoneCode(r.phone,r.code,r.nickname));const s=this.convertAuthingUser(t);return await this.createUserInBackend(s,r.inviterId),a.secureLog("用户注册成功",{userId:s.id,method:e}),s}catch(t){throw a.secureLog("用户注册失败",{method:e,error:t instanceof Error?t.message:"未知错误"},"error"),t}}async getCurrentUser(){if(!this.guard)return null;try{const e=await this.guard.trackSession();if(e){const r=this.convertAuthingUser(e);return a.secureLog("获取当前用户成功",{userId:r.id}),r}return null}catch(e){return a.secureLog("获取当前用户失败",{error:e instanceof Error?e.message:"未知错误"},"error"),null}}async updateUserInfo(e){if(!this.authingClient)throw new Error("Authing客户端未初始化");try{if(!(await this.getCurrentUser()))throw new Error("用户未登录");const r=await this.authingClient.updateProfile({nickname:e.nickname,photo:e.avatar}),t=this.convertAuthingUser(r);return await this.updateUserProfile(t.id,e),a.secureLog("用户信息更新成功",{userId:t.id,updates:e}),t}catch(r){throw a.secureLog("用户信息更新失败",{updates:e,error:r instanceof Error?r.message:"未知错误"},"error"),r}}async checkLoginStatus(){if(!this.guard)return!1;try{const e=await this.guard.checkLoginStatus(),r=Boolean(e);return a.secureLog("检查登录状态",{isLoggedIn:r}),r}catch(e){return a.secureLog("检查登录状态失败",{error:e instanceof Error?e.message:"未知错误"},"error"),!1}}async getUserRoles(){if(!this.authingClient)return[];try{const e=await this.getCurrentUser();if(!e)return[];const r=[];return a.secureLog("获取用户角色成功",{userId:e.id,roles:r}),r.map(e=>e.code)}catch(e){return a.secureLog("获取用户角色失败",{error:e instanceof Error?e.message:"未知错误"},"error"),[]}}async assignRole(e){if(!this.authingClient)throw new Error("Authing客户端未初始化");try{const r=await this.getCurrentUser();if(!r)throw new Error("用户未登录");a.secureLog("角色分配成功",{userId:r.id,roleCode:e})}catch(r){throw a.secureLog("角色分配失败",{roleCode:e,error:r instanceof Error?r.message:"未知错误"},"error"),r}}async logout(){if(this.guard)try{await this.guard.logout(),a.secureLog("用户登出成功")}catch(e){throw a.secureLog("用户登出失败",{error:e instanceof Error?e.message:"未知错误"},"error"),e}}async refreshToken(){if(!this.authingClient)throw new Error("Authing客户端未初始化");try{await this.authingClient.refreshToken(),a.secureLog("Token刷新成功")}catch(e){throw a.secureLog("Token刷新失败",{error:e instanceof Error?e.message:"未知错误"},"error"),e}}async getUserProfile(e){try{const r=await fetch(`${this.apiBaseUrl}/user/profile/${e}`,{headers:await this.getAuthHeaders()});if(!r.ok)throw new Error("获取用户资料失败");const t=await r.json();return a.secureLog("获取用户资料成功",{userId:e,profile:t}),t}catch(r){throw a.secureLog("获取用户资料失败",{userId:e,error:r instanceof Error?r.message:"未知错误"},"error"),r}}async updateUserProfile(e,r){try{if(!(await fetch(`${this.apiBaseUrl}/user/profile/${e}`,{method:"PUT",headers:await this.getAuthHeaders(),body:JSON.stringify(r)})).ok)throw new Error("更新用户资料失败");a.secureLog("用户资料更新成功",{userId:e,updates:r})}catch(t){throw a.secureLog("用户资料更新失败",{userId:e,updates:r,error:t instanceof Error?t.message:"未知错误"},"error"),t}}async generateInviteLink(e){try{const r=await fetch(`${this.apiBaseUrl}/invite/link/${e}`,{headers:await this.getAuthHeaders()});if(!r.ok)throw new Error("生成邀请链接失败");const{inviteLink:t}=await r.json();return a.secureLog("生成邀请链接成功",{userId:e,inviteLink:t}),t}catch(r){throw a.secureLog("生成邀请链接失败",{userId:e,error:r instanceof Error?r.message:"未知错误"},"error"),r}}async bindInviteRelation(e,r){try{if(!(await fetch(`${this.apiBaseUrl}/invite/bind`,{method:"POST",headers:await this.getAuthHeaders(),body:JSON.stringify({inviterId:e,inviteeId:r,timestamp:(new Date).toISOString()})})).ok)throw new Error("绑定邀请关系失败");a.secureLog("邀请关系绑定成功",{inviterId:e,inviteeId:r})}catch(t){throw a.secureLog("邀请关系绑定失败",{inviterId:e,inviteeId:r,error:t instanceof Error?t.message:"未知错误"},"error"),t}}async processInviteReward(e,r){try{if(!(await fetch(`${this.apiBaseUrl}/invite/reward`,{method:"POST",headers:await this.getAuthHeaders(),body:JSON.stringify({inviterId:e,inviteeId:r,timestamp:(new Date).toISOString()})})).ok)throw new Error("处理邀请奖励失败");a.secureLog("邀请奖励处理成功",{inviterId:e,inviteeId:r})}catch(t){throw a.secureLog("邀请奖励处理失败",{inviterId:e,inviteeId:r,error:t instanceof Error?t.message:"未知错误"},"error"),t}}async getInviteRelations(e){try{const r=await fetch(`${this.apiBaseUrl}/invite/relations/${e}`,{headers:await this.getAuthHeaders()});if(!r.ok)throw new Error("获取邀请关系失败");const t=await r.json();return a.secureLog("获取邀请关系成功",{userId:e,relations:t}),t}catch(r){throw a.secureLog("获取邀请关系失败",{userId:e,error:r instanceof Error?r.message:"未知错误"},"error"),r}}async getUserUsage(e){try{const r=await fetch(`${this.apiBaseUrl}/user/usage/${e}`,{headers:await this.getAuthHeaders()});if(!r.ok)throw new Error("获取用户使用情况失败");const t=await r.json();return a.secureLog("获取用户使用情况成功",{userId:e,usage:t}),t}catch(r){throw a.secureLog("获取用户使用情况失败",{userId:e,error:r instanceof Error?r.message:"未知错误"},"error"),r}}async distributeMonthlyUsage(e,r){try{if(!(await fetch(`${this.apiBaseUrl}/usage/distribute`,{method:"POST",headers:await this.getAuthHeaders(),body:JSON.stringify({userId:e,userTier:r,distributionType:"monthly",timestamp:(new Date).toISOString()})})).ok)throw new Error("发放使用次数失败");a.secureLog("每月使用次数发放成功",{userId:e,userTier:r})}catch(t){throw a.secureLog("每月使用次数发放失败",{userId:e,userTier:r,error:t instanceof Error?t.message:"未知错误"},"error"),t}}async consumeUsage(e,r,t){try{if(!(await fetch(`${this.apiBaseUrl}/usage/consume`,{method:"POST",headers:await this.getAuthHeaders(),body:JSON.stringify({userId:e,feature:r,amount:t,timestamp:(new Date).toISOString()})})).ok)throw new Error("消费使用次数失败");a.secureLog("使用次数消费成功",{userId:e,feature:r,amount:t})}catch(s){throw a.secureLog("使用次数消费失败",{userId:e,feature:r,amount:t,error:s instanceof Error?s.message:"未知错误"},"error"),s}}async getUserBalance(e){try{const r=await fetch(`${this.apiBaseUrl}/user/balance/${e}`,{headers:await this.getAuthHeaders()});if(!r.ok)throw new Error("获取用户余额失败");const t=await r.json();return a.secureLog("获取用户余额成功",{userId:e,balance:t}),t}catch(r){throw a.secureLog("获取用户余额失败",{userId:e,error:r instanceof Error?r.message:"未知错误"},"error"),r}}async updateUserBalance(e,r){try{if(!(await fetch(`${this.apiBaseUrl}/user/balance/${e}`,{method:"PUT",headers:await this.getAuthHeaders(),body:JSON.stringify(r)})).ok)throw new Error("更新用户余额失败");a.secureLog("用户余额更新成功",{userId:e,updates:r})}catch(t){throw a.secureLog("用户余额更新失败",{userId:e,updates:r,error:t instanceof Error?t.message:"未知错误"},"error"),t}}async recordUserAction(e,r,t){try{if(!(await fetch(`${this.apiBaseUrl}/user/action`,{method:"POST",headers:await this.getAuthHeaders(),body:JSON.stringify({userId:e,action:r,data:t,timestamp:(new Date).toISOString()})})).ok)throw new Error("记录用户行为失败");a.secureLog("用户行为记录成功",{userId:e,action:r,data:t})}catch(s){throw a.secureLog("用户行为记录失败",{userId:e,action:r,data:t,error:s instanceof Error?s.message:"未知错误"},"error"),s}}async getUserActions(e,r){try{const t=new URLSearchParams;r&&Object.entries(r).forEach(([e,r])=>{t.append(e,String(r))});const s=await fetch(`${this.apiBaseUrl}/user/actions/${e}?${t}`,{headers:await this.getAuthHeaders()});if(!s.ok)throw new Error("获取用户行为记录失败");const i=await s.json();return a.secureLog("获取用户行为记录成功",{userId:e,actions:i}),i}catch(t){throw a.secureLog("获取用户行为记录失败",{userId:e,error:t instanceof Error?t.message:"未知错误"},"error"),t}}async getUserSubscription(e){try{const r=await fetch(`${this.apiBaseUrl}/user/subscription/${e}`,{headers:await this.getAuthHeaders()});if(!r.ok)throw new Error("获取用户订阅信息失败");const t=await r.json();return a.secureLog("获取用户订阅信息成功",{userId:e,subscription:t}),t}catch(r){throw a.secureLog("获取用户订阅信息失败",{userId:e,error:r instanceof Error?r.message:"未知错误"},"error"),r}}async upgradeSubscription(e,r){try{if(!(await fetch(`${this.apiBaseUrl}/user/subscription/upgrade`,{method:"POST",headers:await this.getAuthHeaders(),body:JSON.stringify({userId:e,planId:r,timestamp:(new Date).toISOString()})})).ok)throw new Error("升级订阅失败");a.secureLog("订阅升级成功",{userId:e,planId:r})}catch(t){throw a.secureLog("订阅升级失败",{userId:e,planId:r,error:t instanceof Error?t.message:"未知错误"},"error"),t}}async createPaymentOrder(e,r,t){try{const s=await fetch(`${this.apiBaseUrl}/payment/order`,{method:"POST",headers:await this.getAuthHeaders(),body:JSON.stringify({userId:e,planId:r,amount:t,timestamp:(new Date).toISOString()})});if(!s.ok)throw new Error("创建支付订单失败");const i=await s.json();return a.secureLog("支付订单创建成功",{userId:e,planId:r,amount:t,orderId:i.id}),i}catch(s){throw a.secureLog("支付订单创建失败",{userId:e,planId:r,amount:t,error:s instanceof Error?s.message:"未知错误"},"error"),s}}async verifyPayment(e,r){try{const t=await fetch(`${this.apiBaseUrl}/payment/verify`,{method:"POST",headers:await this.getAuthHeaders(),body:JSON.stringify({orderId:e,paymentData:r,timestamp:(new Date).toISOString()})});if(!t.ok)throw new Error("验证支付失败");const{verified:s}=await t.json();return a.secureLog("支付验证完成",{orderId:e,verified:s}),s}catch(t){throw a.secureLog("支付验证失败",{orderId:e,error:t instanceof Error?t.message:"未知错误"},"error"),t}}convertAuthingUser(e){return{id:String(e.id||e.userId||""),username:String(e.username||e.nickname||""),email:String(e.email||""),phone:String(e.phone||""),nickname:String(e.nickname||e.username||""),avatar:String(e.photo||e.avatar||""),plan:e.plan||"free",isProUser:e.isProUser||!1,...e}}async getAuthHeaders(){const e=await this.getCurrentUser();return{"Content-Type":"application/json",Authorization:`Bearer ${await this.getAuthToken()}`,"X-User-ID":(null==e?void 0:e.id)||""}}async getAuthToken(){if(!this.authingClient)throw new Error("Authing客户端未初始化");try{const e="";return a.secureLog("获取认证Token成功"),e}catch(e){throw a.secureLog("获取认证Token失败",{error:e instanceof Error?e.message:"未知错误"},"error"),e}}async syncUserToBackend(e){try{await fetch(`${this.apiBaseUrl}/user/sync`,{method:"POST",headers:await this.getAuthHeaders(),body:JSON.stringify(e)})}catch(r){}}async createUserInBackend(e,r){try{await fetch(`${this.apiBaseUrl}/user/create`,{method:"POST",headers:await this.getAuthHeaders(),body:JSON.stringify({...e,inviterId:r,timestamp:(new Date).toISOString()})})}catch(t){}}getGuard(){return this.guard}getAuthingClient(){return this.authingClient}};export{o as u};
