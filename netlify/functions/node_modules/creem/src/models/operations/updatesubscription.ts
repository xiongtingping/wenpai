/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateSubscriptionRequest = {
  id: string;
  xApiKey: string;
  updateSubscriptionRequestEntity: components.UpdateSubscriptionRequestEntity;
};

/** @internal */
export const UpdateSubscriptionRequest$inboundSchema: z.ZodType<
  UpdateSubscriptionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  "x-api-key": z.string(),
  UpdateSubscriptionRequestEntity:
    components.UpdateSubscriptionRequestEntity$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-api-key": "xApiKey",
    "UpdateSubscriptionRequestEntity": "updateSubscriptionRequestEntity",
  });
});

/** @internal */
export type UpdateSubscriptionRequest$Outbound = {
  id: string;
  "x-api-key": string;
  UpdateSubscriptionRequestEntity:
    components.UpdateSubscriptionRequestEntity$Outbound;
};

/** @internal */
export const UpdateSubscriptionRequest$outboundSchema: z.ZodType<
  UpdateSubscriptionRequest$Outbound,
  z.ZodTypeDef,
  UpdateSubscriptionRequest
> = z.object({
  id: z.string(),
  xApiKey: z.string(),
  updateSubscriptionRequestEntity:
    components.UpdateSubscriptionRequestEntity$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xApiKey: "x-api-key",
    updateSubscriptionRequestEntity: "UpdateSubscriptionRequestEntity",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSubscriptionRequest$ {
  /** @deprecated use `UpdateSubscriptionRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSubscriptionRequest$inboundSchema;
  /** @deprecated use `UpdateSubscriptionRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSubscriptionRequest$outboundSchema;
  /** @deprecated use `UpdateSubscriptionRequest$Outbound` instead. */
  export type Outbound = UpdateSubscriptionRequest$Outbound;
}

export function updateSubscriptionRequestToJSON(
  updateSubscriptionRequest: UpdateSubscriptionRequest,
): string {
  return JSON.stringify(
    UpdateSubscriptionRequest$outboundSchema.parse(updateSubscriptionRequest),
  );
}

export function updateSubscriptionRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSubscriptionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSubscriptionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSubscriptionRequest' from JSON`,
  );
}
