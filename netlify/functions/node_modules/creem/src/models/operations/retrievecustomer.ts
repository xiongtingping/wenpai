/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RetrieveCustomerRequest = {
  /**
   * The unique identifier of the customer
   */
  customerId?: string | undefined;
  /**
   * The unique email of the customer
   */
  email?: string | undefined;
  xApiKey: string;
};

/** @internal */
export const RetrieveCustomerRequest$inboundSchema: z.ZodType<
  RetrieveCustomerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer_id: z.string().optional(),
  email: z.string().optional(),
  "x-api-key": z.string(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "x-api-key": "xApiKey",
  });
});

/** @internal */
export type RetrieveCustomerRequest$Outbound = {
  customer_id?: string | undefined;
  email?: string | undefined;
  "x-api-key": string;
};

/** @internal */
export const RetrieveCustomerRequest$outboundSchema: z.ZodType<
  RetrieveCustomerRequest$Outbound,
  z.ZodTypeDef,
  RetrieveCustomerRequest
> = z.object({
  customerId: z.string().optional(),
  email: z.string().optional(),
  xApiKey: z.string(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    xApiKey: "x-api-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveCustomerRequest$ {
  /** @deprecated use `RetrieveCustomerRequest$inboundSchema` instead. */
  export const inboundSchema = RetrieveCustomerRequest$inboundSchema;
  /** @deprecated use `RetrieveCustomerRequest$outboundSchema` instead. */
  export const outboundSchema = RetrieveCustomerRequest$outboundSchema;
  /** @deprecated use `RetrieveCustomerRequest$Outbound` instead. */
  export type Outbound = RetrieveCustomerRequest$Outbound;
}

export function retrieveCustomerRequestToJSON(
  retrieveCustomerRequest: RetrieveCustomerRequest,
): string {
  return JSON.stringify(
    RetrieveCustomerRequest$outboundSchema.parse(retrieveCustomerRequest),
  );
}

export function retrieveCustomerRequestFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveCustomerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveCustomerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveCustomerRequest' from JSON`,
  );
}
