/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpgradeSubscriptionRequest = {
  id: string;
  xApiKey: string;
  upgradeSubscriptionRequestEntity: components.UpgradeSubscriptionRequestEntity;
};

/** @internal */
export const UpgradeSubscriptionRequest$inboundSchema: z.ZodType<
  UpgradeSubscriptionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  "x-api-key": z.string(),
  UpgradeSubscriptionRequestEntity:
    components.UpgradeSubscriptionRequestEntity$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-api-key": "xApiKey",
    "UpgradeSubscriptionRequestEntity": "upgradeSubscriptionRequestEntity",
  });
});

/** @internal */
export type UpgradeSubscriptionRequest$Outbound = {
  id: string;
  "x-api-key": string;
  UpgradeSubscriptionRequestEntity:
    components.UpgradeSubscriptionRequestEntity$Outbound;
};

/** @internal */
export const UpgradeSubscriptionRequest$outboundSchema: z.ZodType<
  UpgradeSubscriptionRequest$Outbound,
  z.ZodTypeDef,
  UpgradeSubscriptionRequest
> = z.object({
  id: z.string(),
  xApiKey: z.string(),
  upgradeSubscriptionRequestEntity:
    components.UpgradeSubscriptionRequestEntity$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xApiKey: "x-api-key",
    upgradeSubscriptionRequestEntity: "UpgradeSubscriptionRequestEntity",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpgradeSubscriptionRequest$ {
  /** @deprecated use `UpgradeSubscriptionRequest$inboundSchema` instead. */
  export const inboundSchema = UpgradeSubscriptionRequest$inboundSchema;
  /** @deprecated use `UpgradeSubscriptionRequest$outboundSchema` instead. */
  export const outboundSchema = UpgradeSubscriptionRequest$outboundSchema;
  /** @deprecated use `UpgradeSubscriptionRequest$Outbound` instead. */
  export type Outbound = UpgradeSubscriptionRequest$Outbound;
}

export function upgradeSubscriptionRequestToJSON(
  upgradeSubscriptionRequest: UpgradeSubscriptionRequest,
): string {
  return JSON.stringify(
    UpgradeSubscriptionRequest$outboundSchema.parse(upgradeSubscriptionRequest),
  );
}

export function upgradeSubscriptionRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpgradeSubscriptionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpgradeSubscriptionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpgradeSubscriptionRequest' from JSON`,
  );
}
