/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RetrieveProductRequest = {
  /**
   * The unique identifier of the product
   */
  productId: string;
  xApiKey: string;
};

/** @internal */
export const RetrieveProductRequest$inboundSchema: z.ZodType<
  RetrieveProductRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  "x-api-key": z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "x-api-key": "xApiKey",
  });
});

/** @internal */
export type RetrieveProductRequest$Outbound = {
  product_id: string;
  "x-api-key": string;
};

/** @internal */
export const RetrieveProductRequest$outboundSchema: z.ZodType<
  RetrieveProductRequest$Outbound,
  z.ZodTypeDef,
  RetrieveProductRequest
> = z.object({
  productId: z.string(),
  xApiKey: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    xApiKey: "x-api-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveProductRequest$ {
  /** @deprecated use `RetrieveProductRequest$inboundSchema` instead. */
  export const inboundSchema = RetrieveProductRequest$inboundSchema;
  /** @deprecated use `RetrieveProductRequest$outboundSchema` instead. */
  export const outboundSchema = RetrieveProductRequest$outboundSchema;
  /** @deprecated use `RetrieveProductRequest$Outbound` instead. */
  export type Outbound = RetrieveProductRequest$Outbound;
}

export function retrieveProductRequestToJSON(
  retrieveProductRequest: RetrieveProductRequest,
): string {
  return JSON.stringify(
    RetrieveProductRequest$outboundSchema.parse(retrieveProductRequest),
  );
}

export function retrieveProductRequestFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveProductRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveProductRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveProductRequest' from JSON`,
  );
}
