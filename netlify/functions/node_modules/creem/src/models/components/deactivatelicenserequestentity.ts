/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeactivateLicenseRequestEntity = {
  /**
   * The license key to deactivate.
   */
  key: string;
  /**
   * Id of the instance to deactivate.
   */
  instanceId: string;
};

/** @internal */
export const DeactivateLicenseRequestEntity$inboundSchema: z.ZodType<
  DeactivateLicenseRequestEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  instance_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "instance_id": "instanceId",
  });
});

/** @internal */
export type DeactivateLicenseRequestEntity$Outbound = {
  key: string;
  instance_id: string;
};

/** @internal */
export const DeactivateLicenseRequestEntity$outboundSchema: z.ZodType<
  DeactivateLicenseRequestEntity$Outbound,
  z.ZodTypeDef,
  DeactivateLicenseRequestEntity
> = z.object({
  key: z.string(),
  instanceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    instanceId: "instance_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeactivateLicenseRequestEntity$ {
  /** @deprecated use `DeactivateLicenseRequestEntity$inboundSchema` instead. */
  export const inboundSchema = DeactivateLicenseRequestEntity$inboundSchema;
  /** @deprecated use `DeactivateLicenseRequestEntity$outboundSchema` instead. */
  export const outboundSchema = DeactivateLicenseRequestEntity$outboundSchema;
  /** @deprecated use `DeactivateLicenseRequestEntity$Outbound` instead. */
  export type Outbound = DeactivateLicenseRequestEntity$Outbound;
}

export function deactivateLicenseRequestEntityToJSON(
  deactivateLicenseRequestEntity: DeactivateLicenseRequestEntity,
): string {
  return JSON.stringify(
    DeactivateLicenseRequestEntity$outboundSchema.parse(
      deactivateLicenseRequestEntity,
    ),
  );
}

export function deactivateLicenseRequestEntityFromJSON(
  jsonString: string,
): SafeParseResult<DeactivateLicenseRequestEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeactivateLicenseRequestEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeactivateLicenseRequestEntity' from JSON`,
  );
}
