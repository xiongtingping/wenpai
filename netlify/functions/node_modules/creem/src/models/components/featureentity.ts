/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FeatureEntity = {
  /**
   * Unique identifier for the feature.
   */
  id: string;
  /**
   * The feature type.
   */
  type: string;
  /**
   * A brief description of the feature
   */
  description: string;
};

/** @internal */
export const FeatureEntity$inboundSchema: z.ZodType<
  FeatureEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: z.string(),
  description: z.string(),
});

/** @internal */
export type FeatureEntity$Outbound = {
  id: string;
  type: string;
  description: string;
};

/** @internal */
export const FeatureEntity$outboundSchema: z.ZodType<
  FeatureEntity$Outbound,
  z.ZodTypeDef,
  FeatureEntity
> = z.object({
  id: z.string(),
  type: z.string(),
  description: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeatureEntity$ {
  /** @deprecated use `FeatureEntity$inboundSchema` instead. */
  export const inboundSchema = FeatureEntity$inboundSchema;
  /** @deprecated use `FeatureEntity$outboundSchema` instead. */
  export const outboundSchema = FeatureEntity$outboundSchema;
  /** @deprecated use `FeatureEntity$Outbound` instead. */
  export type Outbound = FeatureEntity$Outbound;
}

export function featureEntityToJSON(featureEntity: FeatureEntity): string {
  return JSON.stringify(FeatureEntity$outboundSchema.parse(featureEntity));
}

export function featureEntityFromJSON(
  jsonString: string,
): SafeParseResult<FeatureEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeatureEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeatureEntity' from JSON`,
  );
}
