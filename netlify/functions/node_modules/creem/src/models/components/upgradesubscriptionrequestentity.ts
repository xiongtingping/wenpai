/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The update behavior for the subscription (defaults to proration-charge-immediately)
 */
export const UpgradeSubscriptionRequestEntityUpdateBehavior = {
  ProrationChargeImmediately: "proration-charge-immediately",
  ProrationCharge: "proration-charge",
  ProrationNone: "proration-none",
} as const;
/**
 * The update behavior for the subscription (defaults to proration-charge-immediately)
 */
export type UpgradeSubscriptionRequestEntityUpdateBehavior = ClosedEnum<
  typeof UpgradeSubscriptionRequestEntityUpdateBehavior
>;

export type UpgradeSubscriptionRequestEntity = {
  /**
   * The ID of the product to upgrade to
   */
  productId: string;
  /**
   * The update behavior for the subscription (defaults to proration-charge-immediately)
   */
  updateBehavior?: UpgradeSubscriptionRequestEntityUpdateBehavior | undefined;
};

/** @internal */
export const UpgradeSubscriptionRequestEntityUpdateBehavior$inboundSchema:
  z.ZodNativeEnum<typeof UpgradeSubscriptionRequestEntityUpdateBehavior> = z
    .nativeEnum(UpgradeSubscriptionRequestEntityUpdateBehavior);

/** @internal */
export const UpgradeSubscriptionRequestEntityUpdateBehavior$outboundSchema:
  z.ZodNativeEnum<typeof UpgradeSubscriptionRequestEntityUpdateBehavior> =
    UpgradeSubscriptionRequestEntityUpdateBehavior$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpgradeSubscriptionRequestEntityUpdateBehavior$ {
  /** @deprecated use `UpgradeSubscriptionRequestEntityUpdateBehavior$inboundSchema` instead. */
  export const inboundSchema =
    UpgradeSubscriptionRequestEntityUpdateBehavior$inboundSchema;
  /** @deprecated use `UpgradeSubscriptionRequestEntityUpdateBehavior$outboundSchema` instead. */
  export const outboundSchema =
    UpgradeSubscriptionRequestEntityUpdateBehavior$outboundSchema;
}

/** @internal */
export const UpgradeSubscriptionRequestEntity$inboundSchema: z.ZodType<
  UpgradeSubscriptionRequestEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  update_behavior: UpgradeSubscriptionRequestEntityUpdateBehavior$inboundSchema
    .default("proration-charge-immediately"),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "update_behavior": "updateBehavior",
  });
});

/** @internal */
export type UpgradeSubscriptionRequestEntity$Outbound = {
  product_id: string;
  update_behavior: string;
};

/** @internal */
export const UpgradeSubscriptionRequestEntity$outboundSchema: z.ZodType<
  UpgradeSubscriptionRequestEntity$Outbound,
  z.ZodTypeDef,
  UpgradeSubscriptionRequestEntity
> = z.object({
  productId: z.string(),
  updateBehavior: UpgradeSubscriptionRequestEntityUpdateBehavior$outboundSchema
    .default("proration-charge-immediately"),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    updateBehavior: "update_behavior",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpgradeSubscriptionRequestEntity$ {
  /** @deprecated use `UpgradeSubscriptionRequestEntity$inboundSchema` instead. */
  export const inboundSchema = UpgradeSubscriptionRequestEntity$inboundSchema;
  /** @deprecated use `UpgradeSubscriptionRequestEntity$outboundSchema` instead. */
  export const outboundSchema = UpgradeSubscriptionRequestEntity$outboundSchema;
  /** @deprecated use `UpgradeSubscriptionRequestEntity$Outbound` instead. */
  export type Outbound = UpgradeSubscriptionRequestEntity$Outbound;
}

export function upgradeSubscriptionRequestEntityToJSON(
  upgradeSubscriptionRequestEntity: UpgradeSubscriptionRequestEntity,
): string {
  return JSON.stringify(
    UpgradeSubscriptionRequestEntity$outboundSchema.parse(
      upgradeSubscriptionRequestEntity,
    ),
  );
}

export function upgradeSubscriptionRequestEntityFromJSON(
  jsonString: string,
): SafeParseResult<UpgradeSubscriptionRequestEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpgradeSubscriptionRequestEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpgradeSubscriptionRequestEntity' from JSON`,
  );
}
