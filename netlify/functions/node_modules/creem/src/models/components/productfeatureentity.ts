/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LicenseEntity,
  LicenseEntity$inboundSchema,
  LicenseEntity$Outbound,
  LicenseEntity$outboundSchema,
} from "./licenseentity.js";

export type ProductFeatureEntity = {
  /**
   * License key issued for the order.
   */
  license: LicenseEntity;
};

/** @internal */
export const ProductFeatureEntity$inboundSchema: z.ZodType<
  ProductFeatureEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  license: LicenseEntity$inboundSchema,
});

/** @internal */
export type ProductFeatureEntity$Outbound = {
  license: LicenseEntity$Outbound;
};

/** @internal */
export const ProductFeatureEntity$outboundSchema: z.ZodType<
  ProductFeatureEntity$Outbound,
  z.ZodTypeDef,
  ProductFeatureEntity
> = z.object({
  license: LicenseEntity$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductFeatureEntity$ {
  /** @deprecated use `ProductFeatureEntity$inboundSchema` instead. */
  export const inboundSchema = ProductFeatureEntity$inboundSchema;
  /** @deprecated use `ProductFeatureEntity$outboundSchema` instead. */
  export const outboundSchema = ProductFeatureEntity$outboundSchema;
  /** @deprecated use `ProductFeatureEntity$Outbound` instead. */
  export type Outbound = ProductFeatureEntity$Outbound;
}

export function productFeatureEntityToJSON(
  productFeatureEntity: ProductFeatureEntity,
): string {
  return JSON.stringify(
    ProductFeatureEntity$outboundSchema.parse(productFeatureEntity),
  );
}

export function productFeatureEntityFromJSON(
  jsonString: string,
): SafeParseResult<ProductFeatureEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductFeatureEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductFeatureEntity' from JSON`,
  );
}
