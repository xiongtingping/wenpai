/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { activateLicense } from "../funcs/activateLicense.js";
import { cancelSubscription } from "../funcs/cancelSubscription.js";
import { createCheckout } from "../funcs/createCheckout.js";
import { createDiscount } from "../funcs/createDiscount.js";
import { createProduct } from "../funcs/createProduct.js";
import { deactivateLicense } from "../funcs/deactivateLicense.js";
import { deleteDiscount } from "../funcs/deleteDiscount.js";
import { generateCustomerLinks } from "../funcs/generateCustomerLinks.js";
import { retrieveCheckout } from "../funcs/retrieveCheckout.js";
import { retrieveCustomer } from "../funcs/retrieveCustomer.js";
import { retrieveDiscount } from "../funcs/retrieveDiscount.js";
import { retrieveProduct } from "../funcs/retrieveProduct.js";
import { retrieveSubscription } from "../funcs/retrieveSubscription.js";
import { searchProducts } from "../funcs/searchProducts.js";
import { searchTransactions } from "../funcs/searchTransactions.js";
import { updateSubscription } from "../funcs/updateSubscription.js";
import { upgradeSubscription } from "../funcs/upgradeSubscription.js";
import { validateLicense } from "../funcs/validateLicense.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Creem extends ClientSDK {
  /**
   * Retrieve a product
   */
  async retrieveProduct(
    request: operations.RetrieveProductRequest,
    options?: RequestOptions,
  ): Promise<components.ProductEntity> {
    return unwrapAsync(retrieveProduct(
      this,
      request,
      options,
    ));
  }

  /**
   * Creates a new product.
   */
  async createProduct(
    request: operations.CreateProductRequest,
    options?: RequestOptions,
  ): Promise<components.ProductEntity> {
    return unwrapAsync(createProduct(
      this,
      request,
      options,
    ));
  }

  /**
   * List all products
   */
  async searchProducts(
    request: operations.SearchProductsRequest,
    options?: RequestOptions,
  ): Promise<components.ProductListEntity> {
    return unwrapAsync(searchProducts(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a customer
   */
  async retrieveCustomer(
    request: operations.RetrieveCustomerRequest,
    options?: RequestOptions,
  ): Promise<components.CustomerEntity> {
    return unwrapAsync(retrieveCustomer(
      this,
      request,
      options,
    ));
  }

  /**
   * Generate Customer Links
   */
  async generateCustomerLinks(
    request: operations.GenerateCustomerLinksRequest,
    options?: RequestOptions,
  ): Promise<components.CustomerLinksEntity> {
    return unwrapAsync(generateCustomerLinks(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a subscription
   */
  async retrieveSubscription(
    request: operations.RetrieveSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<components.SubscriptionEntity> {
    return unwrapAsync(retrieveSubscription(
      this,
      request,
      options,
    ));
  }

  /**
   * Cancel a subscription.
   */
  async cancelSubscription(
    request: operations.CancelSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<components.SubscriptionEntity> {
    return unwrapAsync(cancelSubscription(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a subscription.
   */
  async updateSubscription(
    request: operations.UpdateSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<components.SubscriptionEntity> {
    return unwrapAsync(updateSubscription(
      this,
      request,
      options,
    ));
  }

  /**
   * Upgrade a subscription to a different product
   */
  async upgradeSubscription(
    request: operations.UpgradeSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<components.SubscriptionEntity> {
    return unwrapAsync(upgradeSubscription(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a new checkout session.
   */
  async retrieveCheckout(
    request: operations.RetrieveCheckoutRequest,
    options?: RequestOptions,
  ): Promise<components.CheckoutEntity> {
    return unwrapAsync(retrieveCheckout(
      this,
      request,
      options,
    ));
  }

  /**
   * Creates a new checkout session.
   */
  async createCheckout(
    request: operations.CreateCheckoutRequest,
    options?: RequestOptions,
  ): Promise<components.CheckoutEntity> {
    return unwrapAsync(createCheckout(
      this,
      request,
      options,
    ));
  }

  /**
   * Activates a license key.
   */
  async activateLicense(
    request: operations.ActivateLicenseRequest,
    options?: RequestOptions,
  ): Promise<components.LicenseEntity> {
    return unwrapAsync(activateLicense(
      this,
      request,
      options,
    ));
  }

  /**
   * Deactivate a license key instance.
   */
  async deactivateLicense(
    request: operations.DeactivateLicenseRequest,
    options?: RequestOptions,
  ): Promise<components.LicenseEntity> {
    return unwrapAsync(deactivateLicense(
      this,
      request,
      options,
    ));
  }

  /**
   * Validates a license key or instance.
   */
  async validateLicense(
    request: operations.ValidateLicenseRequest,
    options?: RequestOptions,
  ): Promise<components.LicenseEntity> {
    return unwrapAsync(validateLicense(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve discount
   */
  async retrieveDiscount(
    request: operations.RetrieveDiscountRequest,
    options?: RequestOptions,
  ): Promise<components.DiscountEntity> {
    return unwrapAsync(retrieveDiscount(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a discount.
   */
  async createDiscount(
    request: operations.CreateDiscountRequest,
    options?: RequestOptions,
  ): Promise<components.DiscountEntity> {
    return unwrapAsync(createDiscount(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a discount.
   */
  async deleteDiscount(
    request: operations.DeleteDiscountRequest,
    options?: RequestOptions,
  ): Promise<components.DiscountEntity> {
    return unwrapAsync(deleteDiscount(
      this,
      request,
      options,
    ));
  }

  /**
   * List all transactions
   */
  async searchTransactions(
    request: operations.SearchTransactionsRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionListEntity> {
    return unwrapAsync(searchTransactions(
      this,
      request,
      options,
    ));
  }
}
