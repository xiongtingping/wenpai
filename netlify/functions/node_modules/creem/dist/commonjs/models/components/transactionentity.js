"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionEntity$ = exports.TransactionEntity$outboundSchema = exports.TransactionEntity$inboundSchema = exports.TransactionEntityMode$ = exports.TransactionEntityMode$outboundSchema = exports.TransactionEntityMode$inboundSchema = exports.TransactionEntityMode = void 0;
exports.transactionEntityToJSON = transactionEntityToJSON;
exports.transactionEntityFromJSON = transactionEntityFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * String representing the environment.
 */
exports.TransactionEntityMode = {
    Test: "test",
    Prod: "prod",
    Sandbox: "sandbox",
};
/** @internal */
exports.TransactionEntityMode$inboundSchema = z.nativeEnum(exports.TransactionEntityMode);
/** @internal */
exports.TransactionEntityMode$outboundSchema = exports.TransactionEntityMode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TransactionEntityMode$;
(function (TransactionEntityMode$) {
    /** @deprecated use `TransactionEntityMode$inboundSchema` instead. */
    TransactionEntityMode$.inboundSchema = exports.TransactionEntityMode$inboundSchema;
    /** @deprecated use `TransactionEntityMode$outboundSchema` instead. */
    TransactionEntityMode$.outboundSchema = exports.TransactionEntityMode$outboundSchema;
})(TransactionEntityMode$ || (exports.TransactionEntityMode$ = TransactionEntityMode$ = {}));
/** @internal */
exports.TransactionEntity$inboundSchema = z.object({
    id: z.string(),
    mode: exports.TransactionEntityMode$inboundSchema,
    object: z.string(),
    amount: z.number(),
    amount_paid: z.number().optional(),
    discount_amount: z.number().optional(),
    currency: z.string(),
    type: z.string(),
    tax_country: z.string().optional(),
    tax_amount: z.number().optional(),
    status: z.string(),
    refunded_amount: z.nullable(z.number()).optional(),
    order: z.nullable(z.string()).optional(),
    subscription: z.nullable(z.string()).optional(),
    customer: z.nullable(z.string()).optional(),
    description: z.string().optional(),
    period_start: z.number().optional(),
    period_end: z.number().optional(),
    created_at: z.number(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "amount_paid": "amountPaid",
        "discount_amount": "discountAmount",
        "tax_country": "taxCountry",
        "tax_amount": "taxAmount",
        "refunded_amount": "refundedAmount",
        "period_start": "periodStart",
        "period_end": "periodEnd",
        "created_at": "createdAt",
    });
});
/** @internal */
exports.TransactionEntity$outboundSchema = z.object({
    id: z.string(),
    mode: exports.TransactionEntityMode$outboundSchema,
    object: z.string(),
    amount: z.number(),
    amountPaid: z.number().optional(),
    discountAmount: z.number().optional(),
    currency: z.string(),
    type: z.string(),
    taxCountry: z.string().optional(),
    taxAmount: z.number().optional(),
    status: z.string(),
    refundedAmount: z.nullable(z.number()).optional(),
    order: z.nullable(z.string()).optional(),
    subscription: z.nullable(z.string()).optional(),
    customer: z.nullable(z.string()).optional(),
    description: z.string().optional(),
    periodStart: z.number().optional(),
    periodEnd: z.number().optional(),
    createdAt: z.number(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        amountPaid: "amount_paid",
        discountAmount: "discount_amount",
        taxCountry: "tax_country",
        taxAmount: "tax_amount",
        refundedAmount: "refunded_amount",
        periodStart: "period_start",
        periodEnd: "period_end",
        createdAt: "created_at",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TransactionEntity$;
(function (TransactionEntity$) {
    /** @deprecated use `TransactionEntity$inboundSchema` instead. */
    TransactionEntity$.inboundSchema = exports.TransactionEntity$inboundSchema;
    /** @deprecated use `TransactionEntity$outboundSchema` instead. */
    TransactionEntity$.outboundSchema = exports.TransactionEntity$outboundSchema;
})(TransactionEntity$ || (exports.TransactionEntity$ = TransactionEntity$ = {}));
function transactionEntityToJSON(transactionEntity) {
    return JSON.stringify(exports.TransactionEntity$outboundSchema.parse(transactionEntity));
}
function transactionEntityFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TransactionEntity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TransactionEntity' from JSON`);
}
//# sourceMappingURL=transactionentity.js.map