"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscriptionEntity$ = exports.SubscriptionEntity$outboundSchema = exports.SubscriptionEntity$inboundSchema = exports.Status$ = exports.Status$outboundSchema = exports.Status$inboundSchema = exports.Customer$ = exports.Customer$outboundSchema = exports.Customer$inboundSchema = exports.Product$ = exports.Product$outboundSchema = exports.Product$inboundSchema = exports.SubscriptionEntityMode$ = exports.SubscriptionEntityMode$outboundSchema = exports.SubscriptionEntityMode$inboundSchema = exports.Status = exports.SubscriptionEntityMode = void 0;
exports.productToJSON = productToJSON;
exports.productFromJSON = productFromJSON;
exports.customerToJSON = customerToJSON;
exports.customerFromJSON = customerFromJSON;
exports.subscriptionEntityToJSON = subscriptionEntityToJSON;
exports.subscriptionEntityFromJSON = subscriptionEntityFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const customerentity_js_1 = require("./customerentity.js");
const productentity_js_1 = require("./productentity.js");
const subscriptionitementity_js_1 = require("./subscriptionitementity.js");
const transactionentity_js_1 = require("./transactionentity.js");
/**
 * String representing the environment.
 */
exports.SubscriptionEntityMode = {
    Test: "test",
    Prod: "prod",
    Sandbox: "sandbox",
};
/**
 * The current status of the subscription.
 */
exports.Status = {
    Active: "active",
    Canceled: "canceled",
    Unpaid: "unpaid",
    Paused: "paused",
    Trialing: "trialing",
};
/** @internal */
exports.SubscriptionEntityMode$inboundSchema = z.nativeEnum(exports.SubscriptionEntityMode);
/** @internal */
exports.SubscriptionEntityMode$outboundSchema = exports.SubscriptionEntityMode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SubscriptionEntityMode$;
(function (SubscriptionEntityMode$) {
    /** @deprecated use `SubscriptionEntityMode$inboundSchema` instead. */
    SubscriptionEntityMode$.inboundSchema = exports.SubscriptionEntityMode$inboundSchema;
    /** @deprecated use `SubscriptionEntityMode$outboundSchema` instead. */
    SubscriptionEntityMode$.outboundSchema = exports.SubscriptionEntityMode$outboundSchema;
})(SubscriptionEntityMode$ || (exports.SubscriptionEntityMode$ = SubscriptionEntityMode$ = {}));
/** @internal */
exports.Product$inboundSchema = z.union([productentity_js_1.ProductEntity$inboundSchema, z.string()]);
/** @internal */
exports.Product$outboundSchema = z.union([productentity_js_1.ProductEntity$outboundSchema, z.string()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Product$;
(function (Product$) {
    /** @deprecated use `Product$inboundSchema` instead. */
    Product$.inboundSchema = exports.Product$inboundSchema;
    /** @deprecated use `Product$outboundSchema` instead. */
    Product$.outboundSchema = exports.Product$outboundSchema;
})(Product$ || (exports.Product$ = Product$ = {}));
function productToJSON(product) {
    return JSON.stringify(exports.Product$outboundSchema.parse(product));
}
function productFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Product$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Product' from JSON`);
}
/** @internal */
exports.Customer$inboundSchema = z.union([customerentity_js_1.CustomerEntity$inboundSchema, z.string()]);
/** @internal */
exports.Customer$outboundSchema = z.union([customerentity_js_1.CustomerEntity$outboundSchema, z.string()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Customer$;
(function (Customer$) {
    /** @deprecated use `Customer$inboundSchema` instead. */
    Customer$.inboundSchema = exports.Customer$inboundSchema;
    /** @deprecated use `Customer$outboundSchema` instead. */
    Customer$.outboundSchema = exports.Customer$outboundSchema;
})(Customer$ || (exports.Customer$ = Customer$ = {}));
function customerToJSON(customer) {
    return JSON.stringify(exports.Customer$outboundSchema.parse(customer));
}
function customerFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Customer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Customer' from JSON`);
}
/** @internal */
exports.Status$inboundSchema = z
    .nativeEnum(exports.Status);
/** @internal */
exports.Status$outboundSchema = exports.Status$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Status$;
(function (Status$) {
    /** @deprecated use `Status$inboundSchema` instead. */
    Status$.inboundSchema = exports.Status$inboundSchema;
    /** @deprecated use `Status$outboundSchema` instead. */
    Status$.outboundSchema = exports.Status$outboundSchema;
})(Status$ || (exports.Status$ = Status$ = {}));
/** @internal */
exports.SubscriptionEntity$inboundSchema = z.object({
    id: z.string(),
    mode: exports.SubscriptionEntityMode$inboundSchema,
    object: z.string(),
    product: z.union([productentity_js_1.ProductEntity$inboundSchema, z.string()]),
    customer: z.union([customerentity_js_1.CustomerEntity$inboundSchema, z.string()]),
    items: z.array(subscriptionitementity_js_1.SubscriptionItemEntity$inboundSchema).optional(),
    collection_method: z.string(),
    status: exports.Status$inboundSchema,
    last_transaction_id: z.string().optional(),
    last_transaction: transactionentity_js_1.TransactionEntity$inboundSchema.optional(),
    last_transaction_date: z.string().datetime({ offset: true }).transform(v => new Date(v)).optional(),
    next_transaction_date: z.string().datetime({ offset: true }).transform(v => new Date(v)).optional(),
    current_period_start_date: z.string().datetime({ offset: true }).transform(v => new Date(v)).optional(),
    current_period_end_date: z.string().datetime({ offset: true }).transform(v => new Date(v)).optional(),
    canceled_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "collection_method": "collectionMethod",
        "last_transaction_id": "lastTransactionId",
        "last_transaction": "lastTransaction",
        "last_transaction_date": "lastTransactionDate",
        "next_transaction_date": "nextTransactionDate",
        "current_period_start_date": "currentPeriodStartDate",
        "current_period_end_date": "currentPeriodEndDate",
        "canceled_at": "canceledAt",
        "created_at": "createdAt",
        "updated_at": "updatedAt",
    });
});
/** @internal */
exports.SubscriptionEntity$outboundSchema = z.object({
    id: z.string(),
    mode: exports.SubscriptionEntityMode$outboundSchema,
    object: z.string(),
    product: z.union([productentity_js_1.ProductEntity$outboundSchema, z.string()]),
    customer: z.union([customerentity_js_1.CustomerEntity$outboundSchema, z.string()]),
    items: z.array(subscriptionitementity_js_1.SubscriptionItemEntity$outboundSchema).optional(),
    collectionMethod: z.string(),
    status: exports.Status$outboundSchema,
    lastTransactionId: z.string().optional(),
    lastTransaction: transactionentity_js_1.TransactionEntity$outboundSchema.optional(),
    lastTransactionDate: z.date().transform(v => v.toISOString()).optional(),
    nextTransactionDate: z.date().transform(v => v.toISOString()).optional(),
    currentPeriodStartDate: z.date().transform(v => v.toISOString()).optional(),
    currentPeriodEndDate: z.date().transform(v => v.toISOString()).optional(),
    canceledAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    createdAt: z.date().transform(v => v.toISOString()),
    updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        collectionMethod: "collection_method",
        lastTransactionId: "last_transaction_id",
        lastTransaction: "last_transaction",
        lastTransactionDate: "last_transaction_date",
        nextTransactionDate: "next_transaction_date",
        currentPeriodStartDate: "current_period_start_date",
        currentPeriodEndDate: "current_period_end_date",
        canceledAt: "canceled_at",
        createdAt: "created_at",
        updatedAt: "updated_at",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var SubscriptionEntity$;
(function (SubscriptionEntity$) {
    /** @deprecated use `SubscriptionEntity$inboundSchema` instead. */
    SubscriptionEntity$.inboundSchema = exports.SubscriptionEntity$inboundSchema;
    /** @deprecated use `SubscriptionEntity$outboundSchema` instead. */
    SubscriptionEntity$.outboundSchema = exports.SubscriptionEntity$outboundSchema;
})(SubscriptionEntity$ || (exports.SubscriptionEntity$ = SubscriptionEntity$ = {}));
function subscriptionEntityToJSON(subscriptionEntity) {
    return JSON.stringify(exports.SubscriptionEntity$outboundSchema.parse(subscriptionEntity));
}
function subscriptionEntityFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.SubscriptionEntity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SubscriptionEntity' from JSON`);
}
//# sourceMappingURL=subscriptionentity.js.map