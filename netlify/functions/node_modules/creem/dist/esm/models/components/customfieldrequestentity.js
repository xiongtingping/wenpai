/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Text$inboundSchema, Text$outboundSchema, } from "./text.js";
/**
 * The type of the field.
 */
export const Type = {
    Text: "text",
};
/** @internal */
export const Type$inboundSchema = z.nativeEnum(Type);
/** @internal */
export const Type$outboundSchema = Type$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Type$;
(function (Type$) {
    /** @deprecated use `Type$inboundSchema` instead. */
    Type$.inboundSchema = Type$inboundSchema;
    /** @deprecated use `Type$outboundSchema` instead. */
    Type$.outboundSchema = Type$outboundSchema;
})(Type$ || (Type$ = {}));
/** @internal */
export const CustomFieldRequestEntity$inboundSchema = z.object({
    type: Type$inboundSchema,
    key: z.string(),
    label: z.string(),
    optional: z.boolean().optional(),
    text: Text$inboundSchema.optional(),
});
/** @internal */
export const CustomFieldRequestEntity$outboundSchema = z.object({
    type: Type$outboundSchema,
    key: z.string(),
    label: z.string(),
    optional: z.boolean().optional(),
    text: Text$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomFieldRequestEntity$;
(function (CustomFieldRequestEntity$) {
    /** @deprecated use `CustomFieldRequestEntity$inboundSchema` instead. */
    CustomFieldRequestEntity$.inboundSchema = CustomFieldRequestEntity$inboundSchema;
    /** @deprecated use `CustomFieldRequestEntity$outboundSchema` instead. */
    CustomFieldRequestEntity$.outboundSchema = CustomFieldRequestEntity$outboundSchema;
})(CustomFieldRequestEntity$ || (CustomFieldRequestEntity$ = {}));
export function customFieldRequestEntityToJSON(customFieldRequestEntity) {
    return JSON.stringify(CustomFieldRequestEntity$outboundSchema.parse(customFieldRequestEntity));
}
export function customFieldRequestEntityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomFieldRequestEntity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomFieldRequestEntity' from JSON`);
}
//# sourceMappingURL=customfieldrequestentity.js.map