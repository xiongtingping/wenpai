/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * String representing the environment.
 */
export const OrderEntityMode = {
    Test: "test",
    Prod: "prod",
    Sandbox: "sandbox",
};
/**
 * Current status of the order.
 */
export const OrderEntityStatus = {
    Pending: "pending",
    Paid: "paid",
};
/**
 * The type of order. This can specify whether it's a regular purchase, subscription, etc.
 */
export const OrderEntityType = {
    Recurring: "recurring",
    Onetime: "onetime",
};
/** @internal */
export const OrderEntityMode$inboundSchema = z.nativeEnum(OrderEntityMode);
/** @internal */
export const OrderEntityMode$outboundSchema = OrderEntityMode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrderEntityMode$;
(function (OrderEntityMode$) {
    /** @deprecated use `OrderEntityMode$inboundSchema` instead. */
    OrderEntityMode$.inboundSchema = OrderEntityMode$inboundSchema;
    /** @deprecated use `OrderEntityMode$outboundSchema` instead. */
    OrderEntityMode$.outboundSchema = OrderEntityMode$outboundSchema;
})(OrderEntityMode$ || (OrderEntityMode$ = {}));
/** @internal */
export const OrderEntityStatus$inboundSchema = z.nativeEnum(OrderEntityStatus);
/** @internal */
export const OrderEntityStatus$outboundSchema = OrderEntityStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrderEntityStatus$;
(function (OrderEntityStatus$) {
    /** @deprecated use `OrderEntityStatus$inboundSchema` instead. */
    OrderEntityStatus$.inboundSchema = OrderEntityStatus$inboundSchema;
    /** @deprecated use `OrderEntityStatus$outboundSchema` instead. */
    OrderEntityStatus$.outboundSchema = OrderEntityStatus$outboundSchema;
})(OrderEntityStatus$ || (OrderEntityStatus$ = {}));
/** @internal */
export const OrderEntityType$inboundSchema = z.nativeEnum(OrderEntityType);
/** @internal */
export const OrderEntityType$outboundSchema = OrderEntityType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrderEntityType$;
(function (OrderEntityType$) {
    /** @deprecated use `OrderEntityType$inboundSchema` instead. */
    OrderEntityType$.inboundSchema = OrderEntityType$inboundSchema;
    /** @deprecated use `OrderEntityType$outboundSchema` instead. */
    OrderEntityType$.outboundSchema = OrderEntityType$outboundSchema;
})(OrderEntityType$ || (OrderEntityType$ = {}));
/** @internal */
export const OrderEntity$inboundSchema = z.object({
    id: z.string(),
    mode: OrderEntityMode$inboundSchema,
    object: z.string(),
    customer: z.string().optional(),
    product: z.string(),
    transaction: z.string().optional(),
    discount: z.string().optional(),
    amount: z.number(),
    sub_total: z.number().optional(),
    tax_amount: z.number().optional(),
    discount_amount: z.number().optional(),
    amount_due: z.number().optional(),
    amount_paid: z.number().optional(),
    currency: z.string(),
    fx_amount: z.number().optional(),
    fx_currency: z.string().optional(),
    fx_rate: z.number().optional(),
    status: OrderEntityStatus$inboundSchema,
    type: OrderEntityType$inboundSchema,
    affiliate: z.string().optional(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
    return remap$(v, {
        "sub_total": "subTotal",
        "tax_amount": "taxAmount",
        "discount_amount": "discountAmount",
        "amount_due": "amountDue",
        "amount_paid": "amountPaid",
        "fx_amount": "fxAmount",
        "fx_currency": "fxCurrency",
        "fx_rate": "fxRate",
        "created_at": "createdAt",
        "updated_at": "updatedAt",
    });
});
/** @internal */
export const OrderEntity$outboundSchema = z.object({
    id: z.string(),
    mode: OrderEntityMode$outboundSchema,
    object: z.string(),
    customer: z.string().optional(),
    product: z.string(),
    transaction: z.string().optional(),
    discount: z.string().optional(),
    amount: z.number(),
    subTotal: z.number().optional(),
    taxAmount: z.number().optional(),
    discountAmount: z.number().optional(),
    amountDue: z.number().optional(),
    amountPaid: z.number().optional(),
    currency: z.string(),
    fxAmount: z.number().optional(),
    fxCurrency: z.string().optional(),
    fxRate: z.number().optional(),
    status: OrderEntityStatus$outboundSchema,
    type: OrderEntityType$outboundSchema,
    affiliate: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()),
    updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
    return remap$(v, {
        subTotal: "sub_total",
        taxAmount: "tax_amount",
        discountAmount: "discount_amount",
        amountDue: "amount_due",
        amountPaid: "amount_paid",
        fxAmount: "fx_amount",
        fxCurrency: "fx_currency",
        fxRate: "fx_rate",
        createdAt: "created_at",
        updatedAt: "updated_at",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var OrderEntity$;
(function (OrderEntity$) {
    /** @deprecated use `OrderEntity$inboundSchema` instead. */
    OrderEntity$.inboundSchema = OrderEntity$inboundSchema;
    /** @deprecated use `OrderEntity$outboundSchema` instead. */
    OrderEntity$.outboundSchema = OrderEntity$outboundSchema;
})(OrderEntity$ || (OrderEntity$ = {}));
export function orderEntityToJSON(orderEntity) {
    return JSON.stringify(OrderEntity$outboundSchema.parse(orderEntity));
}
export function orderEntityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => OrderEntity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OrderEntity' from JSON`);
}
//# sourceMappingURL=orderentity.js.map