/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * String representing the environment.
 */
export const DiscountEntityMode = {
    Test: "test",
    Prod: "prod",
    Sandbox: "sandbox",
};
/**
 * The status of the discount (e.g., active, inactive).
 */
export const DiscountEntityStatus = {
    Active: "active",
    Draft: "draft",
    Expired: "expired",
    Scheduled: "scheduled",
};
/**
 * The type of the discount, either "percentage" or "fixed".
 */
export const DiscountEntityType = {
    Percentage: "percentage",
    Fixed: "fixed",
};
/**
 * The duration type for the discount.
 */
export const Duration = {
    Forever: "forever",
    Once: "once",
    Repeating: "repeating",
};
/** @internal */
export const DiscountEntityMode$inboundSchema = z.nativeEnum(DiscountEntityMode);
/** @internal */
export const DiscountEntityMode$outboundSchema = DiscountEntityMode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DiscountEntityMode$;
(function (DiscountEntityMode$) {
    /** @deprecated use `DiscountEntityMode$inboundSchema` instead. */
    DiscountEntityMode$.inboundSchema = DiscountEntityMode$inboundSchema;
    /** @deprecated use `DiscountEntityMode$outboundSchema` instead. */
    DiscountEntityMode$.outboundSchema = DiscountEntityMode$outboundSchema;
})(DiscountEntityMode$ || (DiscountEntityMode$ = {}));
/** @internal */
export const DiscountEntityStatus$inboundSchema = z.nativeEnum(DiscountEntityStatus);
/** @internal */
export const DiscountEntityStatus$outboundSchema = DiscountEntityStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DiscountEntityStatus$;
(function (DiscountEntityStatus$) {
    /** @deprecated use `DiscountEntityStatus$inboundSchema` instead. */
    DiscountEntityStatus$.inboundSchema = DiscountEntityStatus$inboundSchema;
    /** @deprecated use `DiscountEntityStatus$outboundSchema` instead. */
    DiscountEntityStatus$.outboundSchema = DiscountEntityStatus$outboundSchema;
})(DiscountEntityStatus$ || (DiscountEntityStatus$ = {}));
/** @internal */
export const DiscountEntityType$inboundSchema = z.nativeEnum(DiscountEntityType);
/** @internal */
export const DiscountEntityType$outboundSchema = DiscountEntityType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DiscountEntityType$;
(function (DiscountEntityType$) {
    /** @deprecated use `DiscountEntityType$inboundSchema` instead. */
    DiscountEntityType$.inboundSchema = DiscountEntityType$inboundSchema;
    /** @deprecated use `DiscountEntityType$outboundSchema` instead. */
    DiscountEntityType$.outboundSchema = DiscountEntityType$outboundSchema;
})(DiscountEntityType$ || (DiscountEntityType$ = {}));
/** @internal */
export const Duration$inboundSchema = z
    .nativeEnum(Duration);
/** @internal */
export const Duration$outboundSchema = Duration$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Duration$;
(function (Duration$) {
    /** @deprecated use `Duration$inboundSchema` instead. */
    Duration$.inboundSchema = Duration$inboundSchema;
    /** @deprecated use `Duration$outboundSchema` instead. */
    Duration$.outboundSchema = Duration$outboundSchema;
})(Duration$ || (Duration$ = {}));
/** @internal */
export const DiscountEntity$inboundSchema = z.object({
    id: z.string(),
    mode: DiscountEntityMode$inboundSchema,
    object: z.string(),
    status: DiscountEntityStatus$inboundSchema,
    name: z.string(),
    code: z.string(),
    type: DiscountEntityType$inboundSchema,
    amount: z.number().optional(),
    currency: z.string().optional(),
    percentage: z.number().optional(),
    expiry_date: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    max_redemptions: z.number().optional(),
    duration: Duration$inboundSchema.optional(),
    duration_in_months: z.number().optional(),
    applies_to_products: z.array(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "expiry_date": "expiryDate",
        "max_redemptions": "maxRedemptions",
        "duration_in_months": "durationInMonths",
        "applies_to_products": "appliesToProducts",
    });
});
/** @internal */
export const DiscountEntity$outboundSchema = z.object({
    id: z.string(),
    mode: DiscountEntityMode$outboundSchema,
    object: z.string(),
    status: DiscountEntityStatus$outboundSchema,
    name: z.string(),
    code: z.string(),
    type: DiscountEntityType$outboundSchema,
    amount: z.number().optional(),
    currency: z.string().optional(),
    percentage: z.number().optional(),
    expiryDate: z.date().transform(v => v.toISOString()).optional(),
    maxRedemptions: z.number().optional(),
    duration: Duration$outboundSchema.optional(),
    durationInMonths: z.number().optional(),
    appliesToProducts: z.array(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        expiryDate: "expiry_date",
        maxRedemptions: "max_redemptions",
        durationInMonths: "duration_in_months",
        appliesToProducts: "applies_to_products",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var DiscountEntity$;
(function (DiscountEntity$) {
    /** @deprecated use `DiscountEntity$inboundSchema` instead. */
    DiscountEntity$.inboundSchema = DiscountEntity$inboundSchema;
    /** @deprecated use `DiscountEntity$outboundSchema` instead. */
    DiscountEntity$.outboundSchema = DiscountEntity$outboundSchema;
})(DiscountEntity$ || (DiscountEntity$ = {}));
export function discountEntityToJSON(discountEntity) {
    return JSON.stringify(DiscountEntity$outboundSchema.parse(discountEntity));
}
export function discountEntityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => DiscountEntity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DiscountEntity' from JSON`);
}
//# sourceMappingURL=discountentity.js.map