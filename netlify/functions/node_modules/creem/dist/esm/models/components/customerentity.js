/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * String representing the environment.
 */
export const CustomerEntityMode = {
    Test: "test",
    Prod: "prod",
    Sandbox: "sandbox",
};
/** @internal */
export const CustomerEntityMode$inboundSchema = z.nativeEnum(CustomerEntityMode);
/** @internal */
export const CustomerEntityMode$outboundSchema = CustomerEntityMode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerEntityMode$;
(function (CustomerEntityMode$) {
    /** @deprecated use `CustomerEntityMode$inboundSchema` instead. */
    CustomerEntityMode$.inboundSchema = CustomerEntityMode$inboundSchema;
    /** @deprecated use `CustomerEntityMode$outboundSchema` instead. */
    CustomerEntityMode$.outboundSchema = CustomerEntityMode$outboundSchema;
})(CustomerEntityMode$ || (CustomerEntityMode$ = {}));
/** @internal */
export const CustomerEntity$inboundSchema = z.object({
    id: z.string(),
    mode: CustomerEntityMode$inboundSchema,
    object: z.string(),
    email: z.string(),
    name: z.string().optional(),
    country: z.string(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
        "updated_at": "updatedAt",
    });
});
/** @internal */
export const CustomerEntity$outboundSchema = z.object({
    id: z.string(),
    mode: CustomerEntityMode$outboundSchema,
    object: z.string(),
    email: z.string(),
    name: z.string().optional(),
    country: z.string(),
    createdAt: z.date().transform(v => v.toISOString()),
    updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
        updatedAt: "updated_at",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomerEntity$;
(function (CustomerEntity$) {
    /** @deprecated use `CustomerEntity$inboundSchema` instead. */
    CustomerEntity$.inboundSchema = CustomerEntity$inboundSchema;
    /** @deprecated use `CustomerEntity$outboundSchema` instead. */
    CustomerEntity$.outboundSchema = CustomerEntity$outboundSchema;
})(CustomerEntity$ || (CustomerEntity$ = {}));
export function customerEntityToJSON(customerEntity) {
    return JSON.stringify(CustomerEntity$outboundSchema.parse(customerEntity));
}
export function customerEntityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomerEntity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomerEntity' from JSON`);
}
//# sourceMappingURL=customerentity.js.map