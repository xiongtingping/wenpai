/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * String representing the environment.
 */
export const TransactionEntityMode = {
    Test: "test",
    Prod: "prod",
    Sandbox: "sandbox",
};
/** @internal */
export const TransactionEntityMode$inboundSchema = z.nativeEnum(TransactionEntityMode);
/** @internal */
export const TransactionEntityMode$outboundSchema = TransactionEntityMode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransactionEntityMode$;
(function (TransactionEntityMode$) {
    /** @deprecated use `TransactionEntityMode$inboundSchema` instead. */
    TransactionEntityMode$.inboundSchema = TransactionEntityMode$inboundSchema;
    /** @deprecated use `TransactionEntityMode$outboundSchema` instead. */
    TransactionEntityMode$.outboundSchema = TransactionEntityMode$outboundSchema;
})(TransactionEntityMode$ || (TransactionEntityMode$ = {}));
/** @internal */
export const TransactionEntity$inboundSchema = z.object({
    id: z.string(),
    mode: TransactionEntityMode$inboundSchema,
    object: z.string(),
    amount: z.number(),
    amount_paid: z.number().optional(),
    discount_amount: z.number().optional(),
    currency: z.string(),
    type: z.string(),
    tax_country: z.string().optional(),
    tax_amount: z.number().optional(),
    status: z.string(),
    refunded_amount: z.nullable(z.number()).optional(),
    order: z.nullable(z.string()).optional(),
    subscription: z.nullable(z.string()).optional(),
    customer: z.nullable(z.string()).optional(),
    description: z.string().optional(),
    period_start: z.number().optional(),
    period_end: z.number().optional(),
    created_at: z.number(),
}).transform((v) => {
    return remap$(v, {
        "amount_paid": "amountPaid",
        "discount_amount": "discountAmount",
        "tax_country": "taxCountry",
        "tax_amount": "taxAmount",
        "refunded_amount": "refundedAmount",
        "period_start": "periodStart",
        "period_end": "periodEnd",
        "created_at": "createdAt",
    });
});
/** @internal */
export const TransactionEntity$outboundSchema = z.object({
    id: z.string(),
    mode: TransactionEntityMode$outboundSchema,
    object: z.string(),
    amount: z.number(),
    amountPaid: z.number().optional(),
    discountAmount: z.number().optional(),
    currency: z.string(),
    type: z.string(),
    taxCountry: z.string().optional(),
    taxAmount: z.number().optional(),
    status: z.string(),
    refundedAmount: z.nullable(z.number()).optional(),
    order: z.nullable(z.string()).optional(),
    subscription: z.nullable(z.string()).optional(),
    customer: z.nullable(z.string()).optional(),
    description: z.string().optional(),
    periodStart: z.number().optional(),
    periodEnd: z.number().optional(),
    createdAt: z.number(),
}).transform((v) => {
    return remap$(v, {
        amountPaid: "amount_paid",
        discountAmount: "discount_amount",
        taxCountry: "tax_country",
        taxAmount: "tax_amount",
        refundedAmount: "refunded_amount",
        periodStart: "period_start",
        periodEnd: "period_end",
        createdAt: "created_at",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var TransactionEntity$;
(function (TransactionEntity$) {
    /** @deprecated use `TransactionEntity$inboundSchema` instead. */
    TransactionEntity$.inboundSchema = TransactionEntity$inboundSchema;
    /** @deprecated use `TransactionEntity$outboundSchema` instead. */
    TransactionEntity$.outboundSchema = TransactionEntity$outboundSchema;
})(TransactionEntity$ || (TransactionEntity$ = {}));
export function transactionEntityToJSON(transactionEntity) {
    return JSON.stringify(TransactionEntity$outboundSchema.parse(transactionEntity));
}
export function transactionEntityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => TransactionEntity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TransactionEntity' from JSON`);
}
//# sourceMappingURL=transactionentity.js.map