/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const RetrieveCustomerRequest$inboundSchema = z.object({
    customer_id: z.string().optional(),
    email: z.string().optional(),
    "x-api-key": z.string(),
}).transform((v) => {
    return remap$(v, {
        "customer_id": "customerId",
        "x-api-key": "xApiKey",
    });
});
/** @internal */
export const RetrieveCustomerRequest$outboundSchema = z.object({
    customerId: z.string().optional(),
    email: z.string().optional(),
    xApiKey: z.string(),
}).transform((v) => {
    return remap$(v, {
        customerId: "customer_id",
        xApiKey: "x-api-key",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var RetrieveCustomerRequest$;
(function (RetrieveCustomerRequest$) {
    /** @deprecated use `RetrieveCustomerRequest$inboundSchema` instead. */
    RetrieveCustomerRequest$.inboundSchema = RetrieveCustomerRequest$inboundSchema;
    /** @deprecated use `RetrieveCustomerRequest$outboundSchema` instead. */
    RetrieveCustomerRequest$.outboundSchema = RetrieveCustomerRequest$outboundSchema;
})(RetrieveCustomerRequest$ || (RetrieveCustomerRequest$ = {}));
export function retrieveCustomerRequestToJSON(retrieveCustomerRequest) {
    return JSON.stringify(RetrieveCustomerRequest$outboundSchema.parse(retrieveCustomerRequest));
}
export function retrieveCustomerRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => RetrieveCustomerRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RetrieveCustomerRequest' from JSON`);
}
//# sourceMappingURL=retrievecustomer.js.map