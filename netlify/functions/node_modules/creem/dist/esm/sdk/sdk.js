/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import { activateLicense } from "../funcs/activateLicense.js";
import { cancelSubscription } from "../funcs/cancelSubscription.js";
import { createCheckout } from "../funcs/createCheckout.js";
import { createDiscount } from "../funcs/createDiscount.js";
import { createProduct } from "../funcs/createProduct.js";
import { deactivateLicense } from "../funcs/deactivateLicense.js";
import { deleteDiscount } from "../funcs/deleteDiscount.js";
import { generateCustomerLinks } from "../funcs/generateCustomerLinks.js";
import { retrieveCheckout } from "../funcs/retrieveCheckout.js";
import { retrieveCustomer } from "../funcs/retrieveCustomer.js";
import { retrieveDiscount } from "../funcs/retrieveDiscount.js";
import { retrieveProduct } from "../funcs/retrieveProduct.js";
import { retrieveSubscription } from "../funcs/retrieveSubscription.js";
import { searchProducts } from "../funcs/searchProducts.js";
import { searchTransactions } from "../funcs/searchTransactions.js";
import { updateSubscription } from "../funcs/updateSubscription.js";
import { upgradeSubscription } from "../funcs/upgradeSubscription.js";
import { validateLicense } from "../funcs/validateLicense.js";
import { ClientSDK } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
export class Creem extends ClientSDK {
    /**
     * Retrieve a product
     */
    async retrieveProduct(request, options) {
        return unwrapAsync(retrieveProduct(this, request, options));
    }
    /**
     * Creates a new product.
     */
    async createProduct(request, options) {
        return unwrapAsync(createProduct(this, request, options));
    }
    /**
     * List all products
     */
    async searchProducts(request, options) {
        return unwrapAsync(searchProducts(this, request, options));
    }
    /**
     * Retrieve a customer
     */
    async retrieveCustomer(request, options) {
        return unwrapAsync(retrieveCustomer(this, request, options));
    }
    /**
     * Generate Customer Links
     */
    async generateCustomerLinks(request, options) {
        return unwrapAsync(generateCustomerLinks(this, request, options));
    }
    /**
     * Retrieve a subscription
     */
    async retrieveSubscription(request, options) {
        return unwrapAsync(retrieveSubscription(this, request, options));
    }
    /**
     * Cancel a subscription.
     */
    async cancelSubscription(request, options) {
        return unwrapAsync(cancelSubscription(this, request, options));
    }
    /**
     * Update a subscription.
     */
    async updateSubscription(request, options) {
        return unwrapAsync(updateSubscription(this, request, options));
    }
    /**
     * Upgrade a subscription to a different product
     */
    async upgradeSubscription(request, options) {
        return unwrapAsync(upgradeSubscription(this, request, options));
    }
    /**
     * Retrieve a new checkout session.
     */
    async retrieveCheckout(request, options) {
        return unwrapAsync(retrieveCheckout(this, request, options));
    }
    /**
     * Creates a new checkout session.
     */
    async createCheckout(request, options) {
        return unwrapAsync(createCheckout(this, request, options));
    }
    /**
     * Activates a license key.
     */
    async activateLicense(request, options) {
        return unwrapAsync(activateLicense(this, request, options));
    }
    /**
     * Deactivate a license key instance.
     */
    async deactivateLicense(request, options) {
        return unwrapAsync(deactivateLicense(this, request, options));
    }
    /**
     * Validates a license key or instance.
     */
    async validateLicense(request, options) {
        return unwrapAsync(validateLicense(this, request, options));
    }
    /**
     * Retrieve discount
     */
    async retrieveDiscount(request, options) {
        return unwrapAsync(retrieveDiscount(this, request, options));
    }
    /**
     * Create a discount.
     */
    async createDiscount(request, options) {
        return unwrapAsync(createDiscount(this, request, options));
    }
    /**
     * Delete a discount.
     */
    async deleteDiscount(request, options) {
        return unwrapAsync(deleteDiscount(this, request, options));
    }
    /**
     * List all transactions
     */
    async searchTransactions(request, options) {
        return unwrapAsync(searchTransactions(this, request, options));
    }
}
//# sourceMappingURL=sdk.js.map