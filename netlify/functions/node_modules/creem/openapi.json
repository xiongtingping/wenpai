{
  "openapi": "3.0.0",
  "paths": {
    "/v1/products": {
      "get": {
        "operationId": "retrieveProduct",
        "summary": "Retrieve a product",
        "parameters": [
          {
            "name": "product_id",
            "required": true,
            "in": "query",
            "description": "The unique identifier of the product",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the product",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductEntity"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createProduct",
        "summary": "Creates a new product.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductRequestEntity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created a product",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/products/search": {
      "get": {
        "operationId": "searchProducts",
        "summary": "List all products",
        "parameters": [
          {
            "name": "page_number",
            "required": false,
            "in": "query",
            "description": "The page number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "The the page size",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved products",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductListEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customers": {
      "get": {
        "operationId": "retrieveCustomer",
        "summary": "Retrieve a customer",
        "parameters": [
          {
            "name": "customer_id",
            "required": false,
            "in": "query",
            "description": "The unique identifier of the customer",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "required": false,
            "in": "query",
            "description": "The unique email of the customer",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/customers/billing": {
      "post": {
        "operationId": "generateCustomerLinks",
        "summary": "Generate Customer Links",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomerPortalLinkRequestEntity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully generate customer links",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerLinksEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/subscriptions": {
      "get": {
        "operationId": "retrieveSubscription",
        "summary": "Retrieve a subscription",
        "parameters": [
          {
            "name": "subscription_id",
            "required": true,
            "in": "query",
            "description": "The unique identifier of the subscription",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the subscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/subscriptions/{id}/cancel": {
      "post": {
        "operationId": "cancelSubscription",
        "summary": "Cancel a subscription.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully canceled a subscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/subscriptions/{id}": {
      "post": {
        "operationId": "updateSubscription",
        "summary": "Update a subscription.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscriptionRequestEntity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully update a subscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/subscriptions/{id}/upgrade": {
      "post": {
        "operationId": "upgradeSubscription",
        "summary": "Upgrade a subscription to a different product",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpgradeSubscriptionRequestEntity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully upgraded the subscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkouts": {
      "get": {
        "operationId": "retrieveCheckout",
        "summary": "Retrieve a new checkout session.",
        "parameters": [
          {
            "name": "checkout_id",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the subscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutEntity"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createCheckout",
        "summary": "Creates a new checkout session.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Create checkout request payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCheckoutRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created a checkout session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckoutEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/licenses/activate": {
      "post": {
        "operationId": "activateLicense",
        "summary": "Activates a license key.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateLicenseRequestEntity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully activated a license key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/licenses/deactivate": {
      "post": {
        "operationId": "deactivateLicense",
        "summary": "Deactivate a license key instance.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeactivateLicenseRequestEntity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully deactivated a license key instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/licenses/validate": {
      "post": {
        "operationId": "validateLicense",
        "summary": "Validates a license key or instance.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateLicenseRequestEntity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully validated a license key instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/discounts": {
      "get": {
        "operationId": "retrieveDiscount",
        "summary": "Retrieve discount",
        "parameters": [
          {
            "name": "discount_id",
            "required": false,
            "in": "query",
            "description": "The unique identifier of the discount (provide either discount_id OR discount_code)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "discount_code",
            "required": false,
            "in": "query",
            "description": "The unique discount code (provide either discount_id OR discount_code)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the discount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountEntity"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createDiscount",
        "summary": "Create a discount.",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDiscountRequestEntity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created a discount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/discounts/{id}/delete": {
      "delete": {
        "operationId": "deleteDiscount",
        "summary": "Delete a discount.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted a discount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/transactions/search": {
      "get": {
        "operationId": "searchTransactions",
        "summary": "List all transactions",
        "parameters": [
          {
            "name": "customer_id",
            "required": false,
            "in": "query",
            "description": "The customer id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order_id",
            "required": false,
            "in": "query",
            "description": "The order id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "product_id",
            "required": false,
            "in": "query",
            "description": "The product id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_number",
            "required": false,
            "in": "query",
            "description": "The page number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page_size",
            "required": false,
            "in": "query",
            "description": "The the page size",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved transactions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionListEntity"
                }
              }
            }
          }
        }
      }
    }
  },
  "info": {
    "title": "Creem API",
    "description": "Creem is an all-in-one platform for managing subscriptions and recurring revenue, tailored specifically for today's SaaS companies. It enables you to boost revenue, enhance customer retention, and scale your operations seamlessly.'",
    "version": "v1",
    "contact": {

    }
  },
  "tags": [],
  "servers": [
    {
      "url": "https://api.creem.io"
    },
    {
      "url": "https://test-api.creem.io"
    }
  ],
  "components": {
    "schemas": {
      "FeatureEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the feature."
          },
          "type": {
            "type": "string",
            "description": "The feature type."
          },
          "description": {
            "type": "string",
            "description": "A brief description of the feature",
            "example": "Get access to discord server."
          }
        },
        "required": [
          "id",
          "type",
          "description"
        ]
      },
      "ProductEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the object."
          },
          "mode": {
            "type": "string",
            "enum": [
              "test",
              "prod",
              "sandbox"
            ],
            "description": "String representing the environment."
          },
          "object": {
            "type": "string",
            "description": "String representing the object's type. Objects of the same type share the same value."
          },
          "name": {
            "type": "string",
            "description": "The name of the product"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the product",
            "example": "This is a sample product description."
          },
          "image_url": {
            "type": "string",
            "description": "URL of the product image. Only png as jpg are supported",
            "example": "https://example.com/image.jpg"
          },
          "features": {
            "description": "Features of the product.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeatureEntity"
            }
          },
          "price": {
            "type": "number",
            "description": "The price of the product in cents. 1000 = $10.00",
            "example": 400
          },
          "currency": {
            "type": "string",
            "description": "Three-letter ISO currency code, in uppercase. Must be a supported currency.",
            "example": "EUR"
          },
          "billing_type": {
            "type": "string",
            "description": "Indicates the billing method for the customer. It can either be a `recurring` billing cycle or a `onetime` payment.",
            "example": "recurring"
          },
          "billing_period": {
            "type": "string",
            "description": "Billing period",
            "example": "every-month"
          },
          "status": {
            "type": "string",
            "description": "Status of the product"
          },
          "tax_mode": {
            "type": "string",
            "description": "Specifies the tax calculation mode for the transaction. If set to \"inclusive,\" the tax is included in the price. If set to \"exclusive,\" the tax is added on top of the price.",
            "example": "inclusive"
          },
          "tax_category": {
            "type": "string",
            "description": "Categorizes the type of product or service for tax purposes. This helps determine the applicable tax rules based on the nature of the item or service.",
            "example": "saas"
          },
          "product_url": {
            "type": "string",
            "description": "The product page you can redirect your customers to for express checkout.",
            "example": "https://creem.io/product/prod_123123123123"
          },
          "default_success_url": {
            "type": "string",
            "description": "The URL to which the user will be redirected after successfull payment.",
            "example": "https://example.com/?status=successful",
            "nullable": true
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date of the product",
            "example": "2023-01-01T00:00:00Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated date of the product",
            "example": "2023-01-01T00:00:00Z"
          }
        },
        "required": [
          "id",
          "mode",
          "object",
          "name",
          "description",
          "price",
          "currency",
          "billing_type",
          "billing_period",
          "status",
          "tax_mode",
          "tax_category",
          "created_at",
          "updated_at"
        ]
      },
      "PaginationEntity": {
        "type": "object",
        "properties": {
          "total_records": {
            "type": "number",
            "description": "Total number of records in the list",
            "example": 0
          },
          "total_pages": {
            "type": "number",
            "description": "Total number of pages available",
            "example": 0
          },
          "current_page": {
            "type": "number",
            "description": "The current page number",
            "example": 1
          },
          "next_page": {
            "type": "number",
            "description": "The next page number, or null if there is no next page",
            "example": 2,
            "nullable": true
          },
          "prev_page": {
            "type": "number",
            "description": "The previous page number, or null if there is no previous page",
            "example": null,
            "nullable": true
          }
        },
        "required": [
          "total_records",
          "total_pages",
          "current_page",
          "next_page",
          "prev_page"
        ]
      },
      "ProductListEntity": {
        "type": "object",
        "properties": {
          "items": {
            "description": "List of product items",
            "items": {
              "$ref": "#/components/schemas/ProductEntity"
            },
            "type": "array"
          },
          "pagination": {
            "description": "Pagination details for the list",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationEntity"
              }
            ]
          }
        },
        "required": [
          "items",
          "pagination"
        ]
      },
      "Text": {
        "type": "object",
        "properties": {
          "max_length": {
            "type": "number",
            "description": "Maximum character length constraint for the input."
          },
          "min_length": {
            "type": "number",
            "description": "Minimum character length requirement for the input."
          }
        }
      },
      "CustomFieldRequestEntity": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the field.",
            "enum": [
              "text"
            ],
            "example": "text"
          },
          "key": {
            "type": "string",
            "description": "Unique key for custom field. Must be unique to this field, alphanumeric, and up to 200 characters.",
            "maxLength": 200
          },
          "label": {
            "type": "string",
            "description": "The label for the field, displayed to the customer, up to 50 characters",
            "maxLength": 200
          },
          "optional": {
            "type": "boolean",
            "description": "Whether the customer is required to complete the field. Defaults to `false`"
          },
          "text": {
            "description": "Configuration for type of text field.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Text"
              }
            ]
          }
        },
        "required": [
          "type",
          "key",
          "label"
        ]
      },
      "CreateProductRequestEntity": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the product"
          },
          "description": {
            "type": "string",
            "description": "Description of the product"
          },
          "image_url": {
            "type": "string",
            "description": "URL of the product image",
            "example": "https://picsum.photos/200/300"
          },
          "price": {
            "type": "integer",
            "description": "The price of the product in cents ",
            "example": 400,
            "minimum": 100
          },
          "currency": {
            "type": "string",
            "description": "Three-letter ISO currency code, in uppercase. Must be a supported currency.",
            "example": "EUR"
          },
          "billing_type": {
            "type": "string",
            "description": "Indicates the billing method for the customer. It can either be a `recurring` billing cycle or a `onetime` payment.",
            "example": "recurring"
          },
          "billing_period": {
            "type": "string",
            "description": "Billing period, required if billing_type is recurring",
            "example": "every-month"
          },
          "tax_mode": {
            "type": "string",
            "description": "Specifies the tax calculation mode for the transaction. If set to \"inclusive,\" the tax is included in the price. If set to \"exclusive,\" the tax is added on top of the price.",
            "example": "inclusive"
          },
          "tax_category": {
            "type": "string",
            "description": "Categorizes the type of product or service for tax purposes. This helps determine the applicable tax rules based on the nature of the item or service.",
            "example": "saas"
          },
          "default_success_url": {
            "type": "string",
            "description": "The URL to which the user will be redirected after successfull payment.",
            "example": "https://example.com/?status=successful"
          },
          "custom_field": {
            "description": "Collect additional information from your customer using custom fields during checkout. Up to 3 fields are supported.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldRequestEntity"
            }
          }
        },
        "required": [
          "name",
          "price",
          "currency",
          "billing_type"
        ]
      },
      "CustomerEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the object."
          },
          "mode": {
            "type": "string",
            "enum": [
              "test",
              "prod",
              "sandbox"
            ],
            "description": "String representing the environment."
          },
          "object": {
            "type": "string",
            "description": "String representing the object’s type. Objects of the same type share the same value."
          },
          "email": {
            "type": "string",
            "description": "Customer email address.",
            "example": "user@example.com"
          },
          "name": {
            "type": "string",
            "description": "Customer name.",
            "example": "John Doe"
          },
          "country": {
            "type": "string",
            "description": "The ISO alpha-2 country code for the customer.",
            "example": "US",
            "pattern": "^[A-Z]{2}$"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date of the product",
            "example": "2023-01-01T00:00:00Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated date of the product",
            "example": "2023-01-01T00:00:00Z"
          }
        },
        "required": [
          "id",
          "mode",
          "object",
          "email",
          "country",
          "created_at",
          "updated_at"
        ]
      },
      "CreateCustomerPortalLinkRequestEntity": {
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "Unique identifier of the customer."
          }
        },
        "required": [
          "customer_id"
        ]
      },
      "CustomerLinksEntity": {
        "type": "object",
        "properties": {
          "customer_portal_link": {
            "type": "string",
            "description": "Customer portal link."
          }
        },
        "required": [
          "customer_portal_link"
        ]
      },
      "SubscriptionItemEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the object."
          },
          "mode": {
            "type": "string",
            "enum": [
              "test",
              "prod",
              "sandbox"
            ],
            "description": "String representing the environment."
          },
          "object": {
            "type": "string",
            "description": "String representing the object’s type. Objects of the same type share the same value."
          },
          "product_id": {
            "type": "string",
            "description": "The ID of the product associated with the subscription item."
          },
          "price_id": {
            "type": "string",
            "description": "The ID of the price associated with the subscription item."
          },
          "units": {
            "type": "number",
            "description": "The number of units for the subscription item."
          }
        },
        "required": [
          "id",
          "mode",
          "object"
        ]
      },
      "TransactionEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the object."
          },
          "mode": {
            "type": "string",
            "enum": [
              "test",
              "prod",
              "sandbox"
            ],
            "description": "String representing the environment."
          },
          "object": {
            "type": "string",
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "example": "transaction"
          },
          "amount": {
            "type": "number",
            "description": "The transaction amount in cents. 1000 = $10.00",
            "example": 2000
          },
          "amount_paid": {
            "type": "number",
            "description": "The amount the customer paid in cents. 1000 = $10.00",
            "example": 2000
          },
          "discount_amount": {
            "type": "number",
            "description": "The discount amount in cents. 1000 = $10.00",
            "example": 2000
          },
          "currency": {
            "type": "string",
            "description": "Three-letter ISO currency code, in uppercase. Must be a supported currency.",
            "example": "EUR"
          },
          "type": {
            "type": "string",
            "description": "The type of transaction. payment(one time payments) and invoice(subscription)"
          },
          "tax_country": {
            "type": "string",
            "description": "The ISO alpha-2 country code where tax is collected.",
            "example": "US",
            "pattern": "^[A-Z]{2}$"
          },
          "tax_amount": {
            "type": "number",
            "description": "The sale tax amount in cents. 1000 = $10.00",
            "example": 2000
          },
          "status": {
            "type": "string",
            "description": "Status of the transaction."
          },
          "refunded_amount": {
            "type": "number",
            "description": "The amount that has been refunded in cents. 1000 = $10.00",
            "example": 2000,
            "nullable": true
          },
          "order": {
            "type": "string",
            "description": "The order associated with the transaction.",
            "nullable": true
          },
          "subscription": {
            "type": "string",
            "description": "The subscription associated with the transaction.",
            "nullable": true
          },
          "customer": {
            "type": "string",
            "description": "The customer associated with the transaction.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of the transaction."
          },
          "period_start": {
            "type": "number",
            "description": "Start period for the invoice as timestamp"
          },
          "period_end": {
            "type": "number",
            "description": "End period for the invoice as timestamp"
          },
          "created_at": {
            "type": "number",
            "description": "Creation date of the order as timestamp"
          }
        },
        "required": [
          "id",
          "mode",
          "object",
          "amount",
          "currency",
          "type",
          "status",
          "created_at"
        ]
      },
      "SubscriptionEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the object."
          },
          "mode": {
            "type": "string",
            "enum": [
              "test",
              "prod",
              "sandbox"
            ],
            "description": "String representing the environment."
          },
          "object": {
            "type": "string",
            "description": "String representing the object's type. Objects of the same type share the same value.",
            "example": "subscription"
          },
          "product": {
            "description": "The product associated with the subscription.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ProductEntity"
              },
              {
                "type": "string"
              }
            ]
          },
          "customer": {
            "description": "The customer who owns the subscription.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CustomerEntity"
              },
              {
                "type": "string"
              }
            ]
          },
          "items": {
            "description": "Subscription items.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionItemEntity"
            }
          },
          "collection_method": {
            "type": "string",
            "description": "The method used for collecting payments for the subscription.",
            "example": "charge_automatically"
          },
          "status": {
            "type": "string",
            "description": "The current status of the subscription.",
            "enum": [
              "active",
              "canceled",
              "unpaid",
              "paused",
              "trialing"
            ],
            "example": "active"
          },
          "last_transaction_id": {
            "type": "string",
            "description": "The ID of the last paid transaction.",
            "example": "tran_3e6Z6TzvHKdsjEgXnGDEp0"
          },
          "last_transaction": {
            "description": "The last paid transaction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionEntity"
              }
            ]
          },
          "last_transaction_date": {
            "format": "date-time",
            "type": "string",
            "description": "The date of the last paid transaction.",
            "example": "2024-09-12T12:34:56Z"
          },
          "next_transaction_date": {
            "format": "date-time",
            "type": "string",
            "description": "The date when the next subscription transaction will be charged.",
            "example": "2024-09-12T12:34:56Z"
          },
          "current_period_start_date": {
            "format": "date-time",
            "type": "string",
            "description": "The start date of the current subscription period.",
            "example": "2024-09-12T12:34:56Z"
          },
          "current_period_end_date": {
            "format": "date-time",
            "type": "string",
            "description": "The end date of the current subscription period.",
            "example": "2024-09-12T12:34:56Z"
          },
          "canceled_at": {
            "type": "string",
            "description": "The date and time when the subscription was canceled, if applicable.",
            "example": "2024-09-12T12:34:56Z",
            "format": "date-time",
            "nullable": true
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "The date and time when the subscription was created.",
            "example": "2024-01-01T00:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time when the subscription was last updated.",
            "example": "2024-09-12T12:34:56Z",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "mode",
          "object",
          "product",
          "customer",
          "collection_method",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "UpsertSubscriptionItemEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the item to update."
          },
          "product_id": {
            "type": "string",
            "description": "The ID of the product associated with the subscription item."
          },
          "price_id": {
            "type": "string",
            "description": "The ID of the price associated with the subscription item."
          },
          "units": {
            "type": "number",
            "description": "The number of units for the subscription item."
          }
        }
      },
      "UpdateSubscriptionRequestEntity": {
        "type": "object",
        "properties": {
          "items": {
            "description": "List of subscription items to update/create. If no item ID is provided, the item will be created.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpsertSubscriptionItemEntity"
            }
          },
          "update_behavior": {
            "type": "string",
            "description": "The update behavior for the subscription (defaults to proration)",
            "enum": [
              "proration-charge-immediately",
              "proration-charge",
              "proration-none"
            ],
            "default": "proration-charge"
          }
        }
      },
      "UpgradeSubscriptionRequestEntity": {
        "type": "object",
        "properties": {
          "product_id": {
            "type": "string",
            "description": "The ID of the product to upgrade to",
            "example": "prod_123"
          },
          "update_behavior": {
            "type": "string",
            "description": "The update behavior for the subscription (defaults to proration-charge-immediately)",
            "enum": [
              "proration-charge-immediately",
              "proration-charge",
              "proration-none"
            ],
            "default": "proration-charge-immediately"
          }
        },
        "required": [
          "product_id"
        ]
      },
      "OrderEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the object."
          },
          "mode": {
            "type": "string",
            "enum": [
              "test",
              "prod",
              "sandbox"
            ],
            "description": "String representing the environment."
          },
          "object": {
            "type": "string",
            "description": "String representing the object's type. Objects of the same type share the same value."
          },
          "customer": {
            "type": "string",
            "description": "The customer who placed the order."
          },
          "product": {
            "type": "string",
            "description": "The product associated with the order."
          },
          "transaction": {
            "type": "string",
            "description": "The transaction ID of the order",
            "example": "tx_1234567890"
          },
          "discount": {
            "type": "string",
            "description": "The discount ID of the order",
            "example": "dis_1234567890"
          },
          "amount": {
            "type": "number",
            "description": "The total amount of the order in cents. 1000 = $10.00",
            "example": 2000
          },
          "sub_total": {
            "type": "number",
            "description": "The subtotal of the order in cents. 1000 = $10.00",
            "example": 1800
          },
          "tax_amount": {
            "type": "number",
            "description": "The tax amount of the order in cents. 1000 = $10.00",
            "example": 200
          },
          "discount_amount": {
            "type": "number",
            "description": "The discount amount of the order in cents. 1000 = $10.00",
            "example": 100
          },
          "amount_due": {
            "type": "number",
            "description": "The amount due for the order in cents. 1000 = $10.00",
            "example": 1900
          },
          "amount_paid": {
            "type": "number",
            "description": "The amount paid for the order in cents. 1000 = $10.00",
            "example": 1900
          },
          "currency": {
            "type": "string",
            "description": "Three-letter ISO currency code, in uppercase. Must be a supported currency.",
            "example": "EUR"
          },
          "fx_amount": {
            "type": "number",
            "description": "The amount in the foreign currency, if applicable.",
            "example": 15
          },
          "fx_currency": {
            "type": "string",
            "description": "Three-letter ISO code of the foreign currency, if applicable.",
            "example": "EUR"
          },
          "fx_rate": {
            "type": "number",
            "description": "The exchange rate used for converting between currencies, if applicable.",
            "example": 1.2
          },
          "status": {
            "type": "string",
            "description": "Current status of the order.",
            "enum": [
              "pending",
              "paid"
            ],
            "example": "pending"
          },
          "type": {
            "type": "string",
            "description": "The type of order. This can specify whether it's a regular purchase, subscription, etc.",
            "example": "recurring",
            "enum": [
              "recurring",
              "onetime"
            ]
          },
          "affiliate": {
            "type": "string",
            "description": "The affiliate associated with the order, if applicable."
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date of the order",
            "example": "2023-09-13T00:00:00Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated date of the order",
            "example": "2023-09-13T00:00:00Z"
          }
        },
        "required": [
          "id",
          "mode",
          "object",
          "product",
          "amount",
          "currency",
          "status",
          "type",
          "created_at",
          "updated_at"
        ]
      },
      "CustomField": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the field."
          },
          "key": {
            "type": "string",
            "description": "Unique key for custom field. Must be unique to this field, alphanumeric, and up to 200 characters.",
            "maxLength": 200
          },
          "label": {
            "type": "string",
            "description": "The label for the field, displayed to the customer, up to 50 characters",
            "maxLength": 200
          },
          "optional": {
            "type": "boolean",
            "description": "Whether the customer is required to complete the field. Defaults to `false`."
          },
          "text": {
            "description": "Whether the customer is required to complete the field. Defaults to `false`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Text"
              }
            ]
          }
        },
        "required": [
          "type",
          "key",
          "label"
        ]
      },
      "LicenseInstanceEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the object."
          },
          "mode": {
            "type": "string",
            "enum": [
              "test",
              "prod",
              "sandbox"
            ],
            "description": "String representing the environment."
          },
          "object": {
            "type": "string",
            "description": "A string representing the object’s type. Objects of the same type share the same value.",
            "example": "license-instance"
          },
          "name": {
            "type": "string",
            "description": "The name of the license instance.",
            "example": "My Customer License Instance"
          },
          "status": {
            "type": "string",
            "description": "The status of the license instance.",
            "enum": [
              "active",
              "deactivated"
            ],
            "example": "active"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "The creation date of the license instance.",
            "example": "2023-09-13T00:00:00Z"
          }
        },
        "required": [
          "id",
          "mode",
          "object",
          "name",
          "status",
          "created_at"
        ]
      },
      "LicenseEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the object."
          },
          "mode": {
            "type": "string",
            "enum": [
              "test",
              "prod",
              "sandbox"
            ],
            "description": "String representing the environment."
          },
          "object": {
            "type": "string",
            "description": "A string representing the object’s type. Objects of the same type share the same value."
          },
          "status": {
            "type": "string",
            "description": "The current status of the license key.",
            "enum": [
              "inactive",
              "active",
              "expired",
              "disabled"
            ],
            "example": "active"
          },
          "key": {
            "type": "string",
            "description": "The license key.",
            "example": "ABC123-XYZ456-XYZ456-XYZ456"
          },
          "activation": {
            "type": "number",
            "description": "The number of instances that this license key was activated.",
            "example": 5
          },
          "activation_limit": {
            "type": "object",
            "description": "The activation limit. Null if activations are unlimited.",
            "example": 1,
            "nullable": true
          },
          "expires_at": {
            "type": "object",
            "description": "The date the license key expires. Null if it does not have an expiration date.",
            "example": "2023-09-13T00:00:00Z",
            "nullable": true
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "The creation date of the license key.",
            "example": "2023-09-13T00:00:00Z"
          },
          "instance": {
            "description": "Associated license instances.",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/LicenseInstanceEntity"
              }
            ]
          }
        },
        "required": [
          "id",
          "mode",
          "object",
          "status",
          "key",
          "activation",
          "created_at"
        ]
      },
      "ProductFeatureEntity": {
        "type": "object",
        "properties": {
          "license": {
            "description": "License key issued for the order.",
            "allOf": [
              {
                "$ref": "#/components/schemas/LicenseEntity"
              }
            ]
          }
        },
        "required": [
          "license"
        ]
      },
      "CheckoutEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the object."
          },
          "mode": {
            "type": "string",
            "enum": [
              "test",
              "prod",
              "sandbox"
            ],
            "description": "String representing the environment."
          },
          "object": {
            "type": "string",
            "description": "String representing the object's type. Objects of the same type share the same value."
          },
          "status": {
            "type": "string",
            "description": "Status of the checkout."
          },
          "request_id": {
            "type": "string",
            "description": "Identify and track each checkout request."
          },
          "product": {
            "description": "The product associated with the checkout session.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ProductEntity"
              }
            ]
          },
          "units": {
            "type": "number",
            "description": "The number of units for the of the product.",
            "default": 1
          },
          "order": {
            "description": "The order associated with the checkout session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderEntity"
              }
            ]
          },
          "subscription": {
            "description": "The subscription associated with the checkout session.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/SubscriptionEntity"
              }
            ]
          },
          "customer": {
            "description": "The customer associated with the checkout session.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/CustomerEntity"
              }
            ]
          },
          "custom_fields": {
            "description": "Additional information collected from your customer during the checkout process.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          },
          "checkout_url": {
            "type": "string",
            "description": "The URL to which the customer will be redirected to complete the payment."
          },
          "success_url": {
            "type": "string",
            "description": "The URL to which the user will be redirected after the checkout process is completed.",
            "example": "https://example.com/return",
            "nullable": true
          },
          "feature": {
            "description": "Features issued for the order.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductFeatureEntity"
            }
          },
          "metadata": {
            "type": "object",
            "description": "Metadata for the checkout in the form of key-value pairs",
            "example": {
              "userId": "user_123",
              "visitCount": 42,
              "lastVisit": "2023-04-01"
            },
            "additionalProperties": true
          }
        },
        "required": [
          "id",
          "mode",
          "object",
          "status",
          "product"
        ]
      },
      "CustomerRequestEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the customer. You may specify only one of these parameters: id or email.",
            "example": "cust_1234567890"
          },
          "email": {
            "type": "string",
            "description": "Customer email address. You may only specify one of these parameters: id, email.",
            "example": "user@example.com"
          }
        }
      },
      "CreateCheckoutRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "Identify and track each checkout request."
          },
          "product_id": {
            "type": "string",
            "description": "The ID of the product associated with the checkout session.",
            "example": "prod_1234567890"
          },
          "units": {
            "type": "number",
            "description": "The number of units for the order.",
            "example": 1
          },
          "discount_code": {
            "type": "string",
            "description": "Prefill the checkout session with a discount code.",
            "example": "SUMMER2024"
          },
          "customer": {
            "description": "Customer data for checkout session. This will prefill the customer info on the checkout page",
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerRequestEntity"
              }
            ]
          },
          "custom_field": {
            "description": "Collect additional information from your customer using custom fields. Up to 3 fields are supported.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldRequestEntity"
            }
          },
          "success_url": {
            "type": "string",
            "description": "The URL to which the user will be redirected after the checkout process is completed."
          },
          "metadata": {
            "type": "object",
            "description": "Metadata for the checkout in the form of key-value pairs",
            "example": {
              "userId": "user_123",
              "visitCount": 42,
              "lastVisit": "2023-04-01"
            },
            "additionalProperties": true
          }
        },
        "required": [
          "product_id"
        ]
      },
      "ActivateLicenseRequestEntity": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The license key to activate."
          },
          "instance_name": {
            "type": "string",
            "description": "A label for the new instance to identify it in Creem."
          }
        },
        "required": [
          "key",
          "instance_name"
        ]
      },
      "DeactivateLicenseRequestEntity": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The license key to deactivate."
          },
          "instance_id": {
            "type": "string",
            "description": "Id of the instance to deactivate."
          }
        },
        "required": [
          "key",
          "instance_id"
        ]
      },
      "ValidateLicenseRequestEntity": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The license key to validate."
          },
          "instance_id": {
            "type": "string",
            "description": "Id of the instance to validate."
          }
        },
        "required": [
          "key",
          "instance_id"
        ]
      },
      "DiscountEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the object."
          },
          "mode": {
            "type": "string",
            "enum": [
              "test",
              "prod",
              "sandbox"
            ],
            "description": "String representing the environment."
          },
          "object": {
            "type": "string",
            "description": "A string representing the object’s type. Objects of the same type share the same value.",
            "example": "discount"
          },
          "status": {
            "type": "string",
            "description": "The status of the discount (e.g., active, inactive).",
            "enum": [
              "active",
              "draft",
              "expired",
              "scheduled"
            ],
            "example": "active"
          },
          "name": {
            "type": "string",
            "description": "The name of the discount.",
            "example": "Holiday Sale"
          },
          "code": {
            "type": "string",
            "description": "The discount code. A unique identifier for the discount.",
            "example": "HOLIDAY2024"
          },
          "type": {
            "type": "string",
            "description": "The type of the discount, either \"percentage\" or \"fixed\".",
            "enum": [
              "percentage",
              "fixed"
            ],
            "example": "percentage"
          },
          "amount": {
            "type": "number",
            "description": "The amount of the discount. Can be a percentage or a fixed amount.",
            "example": 20
          },
          "currency": {
            "type": "string",
            "description": "The currency of the discount. Only required if type is \"fixed\".",
            "example": "USD"
          },
          "percentage": {
            "type": "number",
            "description": "The percentage of the discount. Only applicable if type is \"percentage\".",
            "example": 15
          },
          "expiry_date": {
            "format": "date-time",
            "type": "string",
            "description": "The expiry date of the discount.",
            "example": "2024-12-31T23:59:59Z"
          },
          "max_redemptions": {
            "type": "number",
            "description": "The maximum number of redemptions allowed for the discount.",
            "example": 100
          },
          "duration": {
            "type": "string",
            "description": "The duration type for the discount.",
            "enum": [
              "forever",
              "once",
              "repeating"
            ],
            "example": "repeating"
          },
          "duration_in_months": {
            "type": "number",
            "description": "The number of months the discount is valid for. Only applicable if the duration is \"repeating\" and the product is a subscription.",
            "example": 6
          },
          "applies_to_products": {
            "description": "The list of product IDs to which this discount applies.",
            "example": [
              "prod_123",
              "prod_456"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "mode",
          "object",
          "status",
          "name",
          "code",
          "type"
        ]
      },
      "CreateDiscountRequestEntity": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the discount.",
            "example": "Holiday Sale"
          },
          "code": {
            "type": "string",
            "description": "Optional discount code. If left empty, a code will be generated.",
            "example": "HOLIDAY2024"
          },
          "type": {
            "type": "string",
            "description": "The type of the discount, either \"percentage\" or \"fixed\".",
            "enum": [
              "percentage",
              "fixed"
            ]
          },
          "amount": {
            "type": "number",
            "description": "The fixed value for the discount. Only applicable if the type is \"fixed\".",
            "example": 20
          },
          "currency": {
            "type": "string",
            "description": "The currency of the discount. Only required if type is \"fixed\".",
            "example": "USD"
          },
          "percentage": {
            "type": "number",
            "description": "The percentage value for the discount. Only applicable if the type is \"percentage\".",
            "example": 15
          },
          "expiry_date": {
            "format": "date-time",
            "type": "string",
            "description": "The expiry date of the discount.",
            "example": "2024-12-31T23:59:59Z"
          },
          "max_redemptions": {
            "type": "number",
            "description": "The maximum number of redemptions for the discount.",
            "example": 100
          },
          "duration": {
            "type": "string",
            "description": "The duration type for the discount.",
            "enum": [
              "forever",
              "once",
              "repeating"
            ],
            "example": "repeating"
          },
          "duration_in_months": {
            "type": "number",
            "description": "The number of months the discount is valid for. Only applicable if the duration is \"repeating\" and the product is a subscription.",
            "example": 6
          },
          "applies_to_products": {
            "description": "The list of product IDs to which this discount applies.",
            "example": [
              "prod_123",
              "prod_456"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "type",
          "duration",
          "applies_to_products"
        ]
      },
      "TransactionListEntity": {
        "type": "object",
        "properties": {
          "items": {
            "description": "List of transactions items",
            "items": {
              "$ref": "#/components/schemas/TransactionEntity"
            },
            "type": "array"
          },
          "pagination": {
            "description": "Pagination details for the list",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationEntity"
              }
            ]
          }
        },
        "required": [
          "items",
          "pagination"
        ]
      }
    }
  }
}