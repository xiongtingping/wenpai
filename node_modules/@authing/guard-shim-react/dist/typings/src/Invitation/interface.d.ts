import { GuardModuleType } from '../Guard/module';
import { Lang } from '../Type';
export interface InviteContext {
    token: string;
    email: string | null;
    ticket: string;
    enabledIdentifierCodeConfig: boolean;
    enabledInfoFill: boolean;
    allowSkipBindExtIdp: boolean;
    sendVerifyCodeMethod: 'prioritySMS' | 'priorityEmail';
    phoneCountryCode: string | null;
    phone: string | null;
    username: string | null;
    name: string | null;
    verifyCodeMaxErrCount: number;
    extendsFieldsI18n?: {
        [key: string]: Record<Lang, {
            enabled: boolean;
            value: string;
        }>;
    };
    extendsFieldsOptions?: {
        key: string;
        options: {
            value: string;
            label: string;
        }[];
    }[];
    extendsFields: any;
    registerInfoFillMsg?: string;
}
export interface GuardInviteLoginInitData extends Partial<InviteContext> {
    canBack?: boolean;
    verifyAccount: string;
    context: any;
    originModule: GuardModuleType;
    originContext: any;
}
export interface GuardInviteCompleteInitData extends Partial<GuardInviteLoginInitData> {
    metaData: any;
}
export interface GuardInviteIdentityBindInitData extends Partial<GuardInviteLoginInitData> {
    weComConfig: {
        QRConfig: any;
        id: string;
        isDefault: boolean;
        title: string;
    };
    isNew: boolean;
    socialConnections: any[];
}
export interface EyGuardProtocolInitData {
    onAcceptHandle: () => void;
    onRejectHandle: () => void;
    mode: 'Guard' | 'Portal';
}
export interface EyLoginProps {
    onBeforeLogin?: (loginInfo: any) => void;
    onLoginSuccess?: (data: any, message?: string) => void;
    onLoginFailed?: (code: number, data: any, message?: string) => void;
}
export declare const useRegisterHandleHook: (initData: any, submitButtonRef?: {
    current: {
        onSpin: (arg0: boolean) => void;
    };
}) => (context: any) => Promise<void>;
