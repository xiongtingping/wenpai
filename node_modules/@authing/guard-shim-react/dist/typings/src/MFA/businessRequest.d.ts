import { CredentialCreationOptionsJSON, CredentialRequestOptionsJSON, PublicKeyCredentialWithAssertionJSON, PublicKeyCredentialWithAttestationJSON } from '@github/webauthn-json';
import { AuthingGuardResponse } from '../_utils/http';
export declare enum MfaBusinessAction {
    VerifyEmail = "verify-email",
    VerifySms = "verify-sms",
    VerifyTotp = "verify-totp",
    VerifyFace = "verify-face",
    AssociateFace = "associate-face",
    PasskeyBind = "passkey-bind",
    PasskeyVerify = "passkey-verify"
}
export declare const authFlow: (action: MfaBusinessAction, content: any) => Promise<AuthingGuardResponse<any>>;
interface VerifySmsContent {
    phone: string;
    code: string;
    mfaToken?: string;
    phoneCountryCode?: string;
}
interface VerifyEmailContent {
    email: string;
    code: string;
    mfaToken?: string;
}
interface VerifyTotpContent {
    totp: string;
    mfaToken?: string;
}
interface VerifyFaceContent {
    photo: string;
    mfaToken?: string;
}
interface AssociateFaceContent {
    photoA: string;
    photoB: string;
    isExternalPhoto?: boolean;
    mfaToken?: string;
}
type BindPasskeyContent = PublicKeyCredentialWithAttestationJSON;
interface VerifyPasskeyContent {
    credential: PublicKeyCredentialWithAssertionJSON;
    ticket: string;
}
interface GetPasskeyBindChallengeParams {
    mfaToken: string;
}
interface GetPasskeyVerifyChallengeParams {
    mfaToken: string;
}
export declare const VerifyEmail: (content: VerifyEmailContent) => Promise<AuthingGuardResponse<any>>;
export declare const VerifySms: (content: VerifySmsContent) => Promise<AuthingGuardResponse<any>>;
export declare const VerifyTotp: (content: VerifyTotpContent) => Promise<AuthingGuardResponse<any>>;
export declare const VerifyFace: (content: VerifyFaceContent) => Promise<AuthingGuardResponse<any>>;
export declare const AssociateFace: (content: AssociateFaceContent) => Promise<AuthingGuardResponse<any>>;
export declare const GetPasskeyBindChallenge: (content: GetPasskeyBindChallengeParams) => Promise<AuthingGuardResponse<CredentialCreationOptionsJSON>>;
export declare const GetPasskeyVerifyChallenge: (content: GetPasskeyVerifyChallengeParams) => Promise<AuthingGuardResponse<CredentialRequestOptionsJSON & {
    ticket: string;
}>>;
export declare const useMfaBusinessRequest: () => {
    "verify-email": (content: VerifyEmailContent) => Promise<AuthingGuardResponse<any>>;
    "verify-sms": (content: VerifySmsContent) => Promise<AuthingGuardResponse<any>>;
    "verify-totp": (content: VerifyTotpContent) => Promise<AuthingGuardResponse<any>>;
    "verify-face": (content: VerifyFaceContent) => Promise<AuthingGuardResponse<any>>;
    "associate-face": (content: AssociateFaceContent) => Promise<AuthingGuardResponse<any>>;
    "passkey-bind": (content: BindPasskeyContent) => Promise<AuthingGuardResponse<any>> | null;
    "passkey-verify": (content: VerifyPasskeyContent) => Promise<AuthingGuardResponse<any>> | null;
};
export {};
