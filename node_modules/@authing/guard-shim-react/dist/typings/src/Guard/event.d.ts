import { GuardModuleType } from './module';
import { CompleteInfoEvents } from '../CompleteInfo/interface';
import { ForgetPasswordEvents } from '../ForgetPassword/interface';
import { IdentityBindingEvents } from '../IdentityBinding/interface';
import { IdentityBindingAskEvents } from '../IdentityBindingAsk';
import { LoginEvents } from '../Login/interface';
import { RegisterEvents } from '../Register/interface';
import { TenantPortalEvents } from '../TenantPortalSelect/interface';
import { StoreInstance } from './core/hooks/useMultipleAccounts';
interface OnAfterChangeModuleOptions {
    currentView: string;
    currentModule: GuardModuleType;
    currentTab?: string;
    data?: any;
}
export interface GuardEvents extends LoginEvents, RegisterEvents, CompleteInfoEvents, ForgetPasswordEvents, IdentityBindingEvents, IdentityBindingAskEvents, TenantPortalEvents {
    onBeforeChangeModule?: (key: GuardModuleType, initData?: any) => boolean | Promise<boolean>;
    onAfterChangeModule?: (options: OnAfterChangeModuleOptions) => void;
}
export declare const guardEventsFilter: (props: any, multipleInstance?: StoreInstance, openEventsMapping?: boolean) => GuardEvents;
export declare const guardEventsHijacking: (events: GuardEvents, openEventsMapping?: boolean) => GuardEvents;
export declare const GuardEventsCamelToKebabMapping: {
    readonly onLoad: "load";
    readonly onLoadError: "load-error";
    readonly onLogin: "login";
    readonly onBeforeLogin: "before-login";
    readonly onLoginError: "login-error";
    readonly onRegister: "register";
    readonly onBeforeRegister: "before-register";
    readonly onRegisterError: "register-error";
    readonly onEmailSend: "email-send";
    readonly onEmailSendError: "email-send-error";
    readonly onPhoneSend: "phone-send";
    readonly onPhoneSendError: "phone-send-error";
    readonly onPwdReset: "pwd-reset";
    readonly onPwdResetError: "pwd-reset-error";
    readonly onClose: "close";
    readonly onLoginTabChange: "login-tab-change";
    readonly onRegisterTabChange: "register-tab-change";
    readonly onRegisterInfoCompleted: "register-info-completed";
    readonly onRegisterInfoCompletedError: "register-info-completed-error";
    readonly onLangChange: "lang-change";
    readonly onBeforeChangeModule: "before-change-module";
    readonly onAfterChangeModule: "after-change-module";
    readonly onTenantSelect: "tenant-select";
};
export interface GuardEventsKebabToCamelType {
    load: GuardEvents['onLoad'];
    'load-error': GuardEvents['onLoadError'];
    'before-login': GuardEvents['onBeforeLogin'];
    login: GuardEvents['onLogin'];
    'login-error': GuardEvents['onLoginError'];
    'before-register': GuardEvents['onBeforeRegister'];
    register: GuardEvents['onRegister'];
    'register-error': GuardEvents['onRegisterError'];
    'email-send': GuardEvents['onEmailSend'];
    'email-send-error': GuardEvents['onEmailSendError'];
    'phone-send': GuardEvents['onPhoneSend'];
    'phone-send-error': GuardEvents['onPhoneSendError'];
    'pwd-reset': GuardEvents['onPwdReset'];
    'pwd-reset-error': GuardEvents['onPwdResetError'];
    close: GuardEvents['onClose'];
    'login-tab-change': GuardEvents['onLoginTabChange'];
    'register-tab-change': GuardEvents['onRegisterTabChange'];
    'register-info-completed': GuardEvents['onRegisterInfoCompleted'];
    'register-info-completed-error': GuardEvents['onRegisterInfoCompletedError'];
    'lang-change': GuardEvents['onLangChange'];
    'before-change-module': GuardEvents['onBeforeChangeModule'];
    'after-change-module': GuardEvents['onAfterChangeModule'];
    'tenant-select': GuardEvents['onTenantSelect'];
}
export {};
