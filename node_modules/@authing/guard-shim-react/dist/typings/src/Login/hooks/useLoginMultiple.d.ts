import { FormInstance } from 'shim-antd/lib/form';
import { React } from 'shim-react';
import { BackFillMultipleState, LoginWay } from '../../Guard/core/hooks/useMultipleAccounts';
/**
 * 登录账号选择时：账户 & 登录方式自动回填
 * oidc 时：login_hint 回填账号
 *
 * TODO: HOOK 参数有时间整理成为对象，开始没有想到有这么多
 * 调用地方 core 中需要回填的两个登录方式
 */
declare function useLoginAccountBackFill(options: {
    form: FormInstance<any>;
    way: LoginWay | LoginWay[];
    formKey: string;
    backfillData?: BackFillMultipleState;
    isOnlyInternationSms?: boolean;
    setAreaCode?: React.Dispatch<React.SetStateAction<string>>;
    cancelBackfill?: boolean;
    changeCurrentMethod?: (account: string) => void;
    loginHint?: string;
}): void;
/**
 * 多账号统一状态管理
 * @param setLoginWay
 * @returns
 */
declare function useLoginSelectAccount(setLoginWay: React.Dispatch<any>): {
    isMultipleAccount: boolean;
    multipleInstance: {
        initStore: (appId: string, options: {
            serverSideLoginMethods: LoginWay[];
            isInternationSms: boolean;
        }) => void;
        setLoginWay: (tab: "input" | "qrcode", way: LoginWay, id?: string | undefined, internation?: {
            phoneCountryCode: string;
            areaCode: string;
        } | undefined) => void;
        setUserInfo: (user: Omit<import("../../Guard/core/hooks/useMultipleAccounts").User & {
            id: string;
            loginAccount?: string | undefined;
            usertype?: string | undefined;
        }, "way" | "tab" | "phoneCountryCode">) => void;
        setLoginWayByHttpData: (account: string, data: {
            username?: string | undefined;
            phone?: string | undefined;
            email?: string | undefined;
        }) => void;
        setLoginWayByLDAPData: (account: string, data: {
            name?: string | undefined;
            phone?: string | undefined;
            email?: string | undefined;
        }) => void;
        getMemoUser: (excludeWays?: LoginWay[]) => import("../multipleAccounts/panel").SelectOptions[];
        getMemoSingleUser: (id: string) => {
            way: LoginWay;
            account: string;
        } | undefined;
        delUserById: (id: string) => string;
        getMemberState: () => boolean;
        getFirstBackFillData: () => BackFillMultipleState | undefined;
        getOriginAccount: () => string;
        getOriginWay: () => string;
    } | undefined;
    referMultipleState: ((type: "login" | "multiple") => void) | undefined;
    backfillData: BackFillMultipleState | undefined;
    defaultQrWay: string | undefined;
};
export { useLoginAccountBackFill, useLoginSelectAccount as useLoginMultiple };
