import { Rule } from 'shim-antd/lib/form';
import { User } from 'authing-js-sdk';
import { GuardProps } from '../Guard';
import { ApplicationConfig, ComplateFiledsPlace, LoginMethods, RegisterMethods, RegisterSortMethods, TabFieldsI18nItem } from '../Type/application';
import { Lang } from '../Type';
export declare const VALIDATE_PATTERN: {
    readonly email: RegExp;
    readonly phone: RegExp;
    readonly ip: RegExp;
    readonly host: RegExp;
    readonly username: RegExp;
};
export declare const validate: (type: keyof typeof VALIDATE_PATTERN, val: string) => boolean;
export declare const getRequiredRules: (msg: string) => Rule[];
export declare const fieldRequiredRule: (fieldRequiredRule: string, fieldRequiredRuleMessage?: string) => Rule[];
export declare function getDeviceName(): string | null | undefined;
export type STYLE_RECORD_KEY = 'appConfig' | 'userConfig';
export declare const insertStyles: (styles: string | any, recordKey?: STYLE_RECORD_KEY) => void;
export declare const removeStyles: (recordKey: STYLE_RECORD_KEY) => void;
export declare const getClassnames: (classnames: (string | boolean | undefined)[]) => string;
/**
 * https://www.itranslater.com/qa/details/2115518846294557696
 * Simple object check.
 * @param item
 * @returns {boolean}
 */
export declare function isObject(item: any): any;
/**
 * https://www.itranslater.com/qa/details/2115518846294557696
 * Deep merge two objects.
 * @param target
 * @param ...sources
 */
export declare function deepMerge<T extends object = any>(target: T, ...sources: any[]): T;
/**
 * @description 在托管页下上传query.login_page_context中指定的用户自定义字段进行补全(/oidc/auth发起的认证只会携带 login_page_context)
 */
export declare const getUserRegisterParams: () => {
    key: string;
    value: any;
}[];
export declare enum PasswordStrength {
    NoCheck = 0,
    Low = 1,
    Middle = 2,
    High = 3,
    AUTO = 4,
    Custom = 5
}
export declare const PASSWORD_STRENGTH_TEXT_MAP: Record<PasswordStrength, {
    placeholder: () => string;
    validateMessage: () => string;
}>;
export declare const getSymbolTypeLength: (pwd: string) => number;
export declare const getPasswordValidate: (strength?: PasswordStrength, customPasswordStrength?: any, fieldRequiredRuleMessage?: string, userId?: string, setRuleResults?: any) => Rule[];
export declare const getPasswordValidateRules: (strength?: PasswordStrength, customPasswordStrength?: any, customValidateTrigger?: string, fieldRequiredRuleMessage?: string, userId?: string, setRuleResults?: any) => Rule[];
export declare const sleep: (delay: number) => Promise<unknown>;
export declare const shoudGoToComplete: (user: User, contextType: ComplateFiledsPlace, config: ApplicationConfig | undefined, autoRegister?: boolean) => boolean;
export declare const transformMethod: (method: RegisterMethods | string) => string;
export declare const mailDesensitization: (mail: string) => string;
export declare const phoneDesensitization: (phone: string) => string;
export declare const GuardPropsFilter: (pre: GuardProps, current: GuardProps) => boolean;
export declare const getDocumentNode: (node: Node & ParentNode) => Document;
export declare const getLoginTypePipe: (publicConfig: ApplicationConfig, registerMethod: RegisterMethods) => {
    specifyDefaultLoginMethod: LoginMethods;
    lockMethod: string;
} | {
    specifyDefaultLoginMethod: LoginMethods;
    lockMethod?: undefined;
} | undefined;
export declare const getPasswordIdentify: (identity: string) => string;
export declare const getCurrentLng: () => Lang;
export declare const regexFromString: (string: string) => RegExp | null;
export declare const getI18nLabel: (method: string | RegisterSortMethods, i18nFields: Map<string, TabFieldsI18nItem>, defaultLanguageConfig: Lang) => string;
export declare const getSortLabels: (methods: string[], i18nConfig: Map<string, TabFieldsI18nItem>, defaultLanguageConfig: Lang) => string;
export declare const getSortTabs: (tabs: string[], tab?: string) => string[];
export declare const isDisabled: (values: Record<string, any>, requireNames?: string[]) => boolean;
export declare const isWeComOrigin: (event: MessageEvent) => boolean;
export declare const isDingTalkOrigin: (origin: string) => boolean;
export * from './popupCenter';
export * from './clipboard';
export * from './locales';
export * from './config';
export * from './facePlugin';
export * from './hooks';
export * from './logger';
export * from './responseManagement';
export * from './appendConfig';
export * from './clipboard';
export * from './context';
export * from './corsVerification';
export * from './countryList';
export * from './errorFace';
export * from './flowHandleStorage';
export * from './getCaptchaUrl';
export * from './GuardErrorCode';
export * from './guardHttp';
export * from './initAppId';
export * from './popupCenter';
export * from './tenant';
export * from './useErrorText';
export * from './getVersion';
export * from './compute';
