{"version":3,"file":"index.esm.js","sources":["../../src/axios.ts","../../src/constants.ts","../../src/storage/InMemoryStorgeProvider.ts","../../src/storage/LocalStorageProvider.ts","../../src/storage/NullStorageProvider.ts","../../src/storage/SessionStorageProvider.ts","../../src/utils.ts","../../src/Authing.ts"],"sourcesContent":["import axios, { AxiosError, AxiosRequestConfig } from 'axios'\n\nimport { version } from '../package.json'\n\nfunction isAxiosError(e: any): e is AxiosError {\n\treturn e.isAxiosError\n}\n\nasync function axiosPromiseWrapper(p: Promise<any>) {\n\ttry {\n\t\treturn await p\n\t} catch (e) {\n\t\tif (isAxiosError(e)) {\n\t\t\tif ((e.response?.data as any)?.error) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\t\t\tconst { error, error_description } = e.response!.data as any\n\t\t\t\tthrow new Error(`认证服务器返回错误 ${error}: ${error_description}`)\n\t\t\t}\n\t\t}\n\t\tthrow e\n\t}\n}\n\nexport async function axiosGet(\n\turl: string,\n\toptions?: AxiosRequestConfig<string>\n) {\n\tconst _options = mergeOptions(options)\n\treturn axiosPromiseWrapper(axios.get(url, _options))\n}\n\nexport async function axiosPost(\n\turl: string,\n\tdata?: any,\n\toptions?: AxiosRequestConfig<string>\n) {\n\tconst _options = mergeOptions(options)\n\treturn axiosPromiseWrapper(axios.post(url, data, _options))\n}\n\nfunction mergeOptions (options?: AxiosRequestConfig<string>): AxiosRequestConfig {\n\tconst _options = Object.assign({}, options || {}, {\n\t\theaders: {\n\t\t\t...options?.headers,\n\t\t\t'x-authing-request-from': 'sdk-web',\n\t\t\t'x-authing-sdk-version': version\n\t\t}\n\t})\n\treturn _options\n}\n","export const SDK_IDENTIFIER = 'authing-spa'\nexport const STORAGE_VERSION = '1'\n\nexport const STORAGE_KEY_PREFIX = `${SDK_IDENTIFIER}:${STORAGE_VERSION}`\n\nexport const DEFAULT_IFRAME_LOGINSTATE_TIMEOUT = 5000\n\nexport const DEFAULT_POPUP_WIDTH = 800\nexport const DEFAULT_POPUP_HEIGHT = 600\n\nexport const DEFAULT_SCOPE = 'openid profile'\n\nexport const MSG_PENDING_AUTHZ =\n  '另一个认证流程正在进行中，请不要同时发起多个认证'\nexport const MSG_CROSS_ORIGIN_ISOLATED =\n  '当前页面运行在隔离模式下, 无法进行此方式登录, 请使用 loginWithRedirect'\n","import { MayBePromise } from '../types'\nimport { StorageProvider } from './interface'\n\nexport class InMemoryStorageProvider<T> implements StorageProvider<T> {\n\tprivate readonly storage = Object.create(null)\n\n\tget(key: string): MayBePromise<T | null> {\n\t\treturn this.storage[key] ?? null\n\t}\n\n\tput(key: string, value: T): MayBePromise<void> {\n\t\tthis.storage[key] = value\n\t}\n\n\tdelete(key: string): MayBePromise<void> {\n\t\tdelete this.storage[key]\n\t}\n}\n","import { MayBePromise } from '../types'\nimport { StorageProvider } from './interface'\n\nexport class LocalStorageProvider<T> implements StorageProvider<T> {\n\tget(key: string): MayBePromise<T | null> {\n\t\tconst jsonItem = localStorage.getItem(key)\n\t\tif (jsonItem === null) {\n\t\t\treturn null\n\t\t}\n\t\treturn JSON.parse(jsonItem) as T\n\t}\n\n\tput(key: string, value: T): MayBePromise<void> {\n\t\tlocalStorage.setItem(key, JSON.stringify(value))\n\t}\n\n\tdelete(key: string): MayBePromise<void> {\n\t\tlocalStorage.removeItem(key)\n\t}\n}\n","import { MayBePromise } from '../types'\nimport { StorageProvider } from './interface'\n\nexport class NullStorageProvider<T> implements StorageProvider<T> {\n\tget(): MayBePromise<T | null> {\n\t\treturn null\n\t}\n\n\tput(): MayBePromise<void> {\n\t\t// null\n\t}\n\n\tdelete(): MayBePromise<void> {\n\t\t// null\n\t}\n}\n","import { MayBePromise } from '../types'\nimport { StorageProvider } from './interface'\n\nexport class SessionStorageProvider<T> implements StorageProvider<T> {\n\tget(key: string): MayBePromise<T | null> {\n\t\tconst jsonItem = sessionStorage.getItem(key)\n\t\tif (jsonItem === null) {\n\t\t\treturn null\n\t\t}\n\t\treturn JSON.parse(jsonItem) as T\n\t}\n\n\tput(key: string, value: T): MayBePromise<void> {\n\t\tsessionStorage.setItem(key, JSON.stringify(value))\n\t}\n\n\tdelete(key: string): MayBePromise<void> {\n\t\tsessionStorage.removeItem(key)\n\t}\n}\n","import { STORAGE_KEY_PREFIX } from './constants'\nimport { StrDict } from './types'\n\nexport function createQueryParams(params: any) {\n\treturn Object.keys(params)\n\t\t.filter(k => params[k] !== null && params[k] !== undefined)\n\t\t.map(\n\t\t\tk => encodeURIComponent(k) + '=' + encodeURIComponent(params[k] as string)\n\t\t)\n\t\t.join('&')\n}\n\nexport function loginStateKey(appId: string) {\n\treturn [STORAGE_KEY_PREFIX, appId, 'login-state'].join(':')\n}\n\nexport function transactionKey(appId: string, state: string) {\n\treturn [STORAGE_KEY_PREFIX, appId, 'tx', state].join(':')\n}\n\nexport function getCrypto() {\n\t//ie 11.x uses msCrypto\n\treturn (window.crypto || (window as any).msCrypto) as Crypto\n}\n\nexport function getCryptoSubtle() {\n\tconst crypto = getCrypto()\n\t//safari 10.x uses webkitSubtle\n\treturn crypto.subtle || (crypto as any).webkitSubtle\n}\n\nexport function createRandomString(length: number) {\n\tconst charset =\n    '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n\tconst randomValues = Array.from(\n\t\tgetCrypto().getRandomValues(new Uint8Array(length))\n\t)\n\treturn randomValues.map(v => charset[v % charset.length]).join('')\n}\n\nexport function string2Buf(str: string) {\n\tconst buffer: number[] = []\n\tfor (let i = 0; i < str.length; ++i) {\n\t\tbuffer.push(str.charCodeAt(i))\n\t}\n\treturn new Uint8Array(buffer)\n}\n\nfunction buf2Base64Url(buffer: ArrayBuffer) {\n\tconst ie11SafeInput = new Uint8Array(buffer)\n\tlet binary = ''\n\tfor (let i = 0; i < ie11SafeInput.byteLength; ++i) {\n\t\tbinary += String.fromCharCode(ie11SafeInput[i])\n\t}\n\tconst base64 = window.btoa(binary)\n\tconst charMapping: StrDict = { '+': '-', '/': '_', '=': '' }\n\treturn base64.replace(/[+/=]/g, (ch: string) => charMapping[ch])\n}\n\nexport async function genPKCEPair(algorithm = 'SHA-256') {\n\t// 规定最少 43 个字符\n\tconst codeVerifier = createRandomString(43)\n\tconst hash = await getCryptoSubtle().digest(\n\t\talgorithm,\n\t\tstring2Buf(codeVerifier)\n\t)\n\tconst codeChallenge = buf2Base64Url(hash)\n\treturn { codeChallenge, codeVerifier }\n}\n\nexport function domainC14n(domain: string) {\n\tconst domainExp = /^(((?:http)|(?:https)):\\/\\/)?((?:[\\w-_]+)(?:\\.[\\w-_]+)+)(?:\\/.*)?$/\n\tconst matchRes = domainExp.exec(domain)\n\tif (matchRes && matchRes[3]) {\n\t\treturn `${matchRes[1] ?? 'https://'}${matchRes[3]}`\n\t}\n\tthrow Error(`无效的域名配置: ${domain}`)\n}\n\nexport function parseToken(token: string) {\n\tlet [header, body, sig] = token.split('.')\n\tif (!sig) {\n\t\tthrow new Error('无效的 Token 格式')\n\t}\n\n\tconst headerObj = JSON.parse(window.atob(header))\n\tif (headerObj.enc) {\n\t\tthrow new Error(\n\t\t\t'本 SDK 目前不支持处理加密 Token, 请在应用配置中关闭「ID Token 加密」功能'\n\t\t)\n\t}\n\n\tbody = body.replace(/-/g, '+').replace(/_/g, '/')\n\tbody = decodeURIComponent(\n\t\twindow\n\t\t\t.atob(body)\n\t\t\t.split('')\n\t\t\t.map(function (c) {\n\t\t\t\treturn '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)\n\t\t\t})\n\t\t\t.join('')\n\t)\n\n\treturn {\n\t\theader: headerObj,\n\t\tbody: JSON.parse(body)\n\t}\n}\n\nexport function isIE() {\n\tif (\n\t\twindow.navigator.userAgent.indexOf('MSIE') >= 1 ||\n    (window.navigator.userAgent.indexOf('Trident') >= 1 &&\n      window.navigator.userAgent.indexOf('rv') >= 1) ||\n    window.navigator.userAgent.indexOf('Edge') >= 1\n\t) {\n\t\treturn true\n\t}\n\n\treturn false\n}\n","import { axiosGet, axiosPost } from './axios'\nimport {\n\tDEFAULT_IFRAME_LOGINSTATE_TIMEOUT,\n\tDEFAULT_POPUP_HEIGHT,\n\tDEFAULT_POPUP_WIDTH,\n\tDEFAULT_SCOPE,\n\tMSG_CROSS_ORIGIN_ISOLATED,\n\tMSG_PENDING_AUTHZ\n} from './constants'\nimport {\n\tAuthingSPAInitOptions,\n\tLoginState,\n\tIDToken,\n\tAccessToken,\n\tLoginTransaction,\n\tAuthzURLParams,\n\tOIDCWebMessageResponse,\n\tPKCETokenParams,\n\tOIDCTokenResponse,\n\tLoginStateWithCustomStateData,\n\tLogoutURLParams,\n\tIUserInfo,\n\tNormalError\n} from './global'\nimport { InMemoryStorageProvider } from './storage/InMemoryStorgeProvider'\nimport { StorageProvider } from './storage/interface'\nimport { LocalStorageProvider } from './storage/LocalStorageProvider'\nimport { NullStorageProvider } from './storage/NullStorageProvider'\nimport { SessionStorageProvider } from './storage/SessionStorageProvider'\nimport { MsgListener, StrDict } from './types'\nimport {\n\tcreateQueryParams,\n\tcreateRandomString,\n\tdomainC14n,\n\tgenPKCEPair,\n\tgetCrypto,\n\tgetCryptoSubtle,\n\tisIE,\n\tloginStateKey,\n\tparseToken,\n\ttransactionKey\n} from './utils'\n\nexport class Authing {\n\tprivate globalMsgListener: MsgListener | null | undefined\n\n\tprivate readonly options: Required<AuthingSPAInitOptions>\n\tprivate readonly loginStateProvider: StorageProvider<LoginState>\n\tprivate readonly transactionProvider: StorageProvider<LoginTransaction>\n\tprivate readonly domain: string\n\n\tconstructor(options: AuthingSPAInitOptions) {\n\t\tthis.options = options as any\n\t\tthis.domain = domainC14n(this.options.domain)\n\n\t\tif (!options.useImplicitMode && (!getCrypto() || !getCryptoSubtle())) {\n\t\t\tthrow new Error(\n\t\t\t\t'PKCE 模式需要浏览器 crypto 能力, 请确保浏览器处于 https 域名下，或设置 useImplicitMode 为 true'\n\t\t\t)\n\t\t}\n\n\t\tif (typeof localStorage === 'object') {\n\t\t\tthis.loginStateProvider = new LocalStorageProvider()\n\t\t} else {\n\t\t\tconsole.warn('您的浏览器版本过低，登录态存储功能将不可用')\n\t\t\tthis.loginStateProvider = new InMemoryStorageProvider()\n\t\t}\n\n\t\tif (typeof sessionStorage === 'object') {\n\t\t\tthis.transactionProvider = new SessionStorageProvider()\n\t\t} else {\n\t\t\tif (!options.useImplicitMode) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t'您的浏览器版本过低，PKCE 重定向认证功能将不可用，请设置 useImplicitMode 为 true'\n\t\t\t\t)\n\t\t\t}\n\t\t\tthis.transactionProvider = new NullStorageProvider()\n\t\t}\n\n\t\toptions.implicitResponseType =\n      options.implicitResponseType ?? 'id_token token'\n\t\toptions.redirectResponseMode = options.redirectResponseMode ?? 'fragment'\n\t\toptions.popupWidth = options.popupWidth ?? DEFAULT_POPUP_WIDTH\n\t\toptions.popupHeight = options.popupHeight ?? DEFAULT_POPUP_HEIGHT\n\t\toptions.scope = options.scope ?? DEFAULT_SCOPE\n\t}\n\n\tasync getLoginStateWithRedirect() {\n\t\tconst state = createRandomString(16)\n\t\tconst nonce = createRandomString(16)\n\t\tconst redirectUri = this.options.redirectUri ?? window.location.origin\n\n\t\tconst params: AuthzURLParams = {\n\t\t\tredirect_uri: redirectUri,\n\t\t\tresponse_mode: this.options.redirectResponseMode || 'query',\n\t\t\tresponse_type: this.options.useImplicitMode\n\t\t\t\t? this.options.implicitResponseType\n\t\t\t\t: 'code',\n\t\t\tclient_id: this.options.appId,\n\t\t\tstate,\n\t\t\tnonce,\n\t\t\tscope: this.options.scope\n\t\t}\n\n\t\tlet codeVerifier: string | undefined\n\t\tif (!this.options.useImplicitMode) {\n\t\t\tconst { codeChallenge, codeVerifier: v } = await genPKCEPair()\n\t\t\tparams.code_challenge = codeChallenge\n\t\t\tparams.code_challenge_method = 'S256'\n\t\t\tcodeVerifier = v\n\t\t}\n\n\t\tawait this.transactionProvider.put(\n\t\t\ttransactionKey(this.options.appId, state),\n\t\t\t{\n\t\t\t\tcodeVerifier,\n\t\t\t\tstate,\n\t\t\t\tredirectUri,\n\t\t\t\tnonce\n\t\t\t}\n\t\t)\n\n\t\twindow.location.replace(\n\t\t\t`${this.domain}/oidc/auth?${createQueryParams(params)}`\n\t\t)\n\t}\n\n\t/**\n   * 按顺序用以下方式获取用户登录态：\n   *\n   * 1. 本地缓存获取\n   * 2. 隐藏 iframe 获取\n   *\n   * @param options.ignoreCache 忽略本地缓存\n   */\n\tasync getLoginState(\n\t\toptions: {\n      ignoreCache?: boolean\n    } = {}\n\t): Promise<null | LoginState> {\n\t\t// 1. 从 loginStateProvider 中（默认为 localStorage）获取\n\t\tif (!options.ignoreCache) {\n\t\t\tconst state = await this.loginStateProvider.get(\n\t\t\t\tloginStateKey(this.options.appId)\n\t\t\t)\n\t\t\tif (state && state.expireAt && state.expireAt > Date.now()) {\n\t\t\t\tif (!this.options.introspectAccessToken || !state.accessToken) {\n\t\t\t\t\treturn state\n\t\t\t\t}\n\n\t\t\t\tconst { data } = await axiosPost(\n\t\t\t\t\t`${this.domain}/oidc/token/introspection`,\n\t\t\t\t\tcreateQueryParams({\n\t\t\t\t\t\tclient_id: this.options.appId,\n\t\t\t\t\t\ttoken: state.accessToken\n\t\t\t\t\t}),\n\t\t\t\t\t{\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t)\n\n\t\t\t\tif (data.active === true) {\n\t\t\t\t\treturn state\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// 清掉旧的登录态\n\t\tawait this.loginStateProvider.delete(loginStateKey(this.options.appId))\n\n\t\t// 2. 用隐藏 iframe 获取\n\t\tif (this.globalMsgListener !== undefined) {\n\t\t\tthrow new Error(MSG_PENDING_AUTHZ)\n\t\t}\n\t\tthis.globalMsgListener = null\n\n\t\tif (window.crossOriginIsolated) {\n\t\t\t// 如果是 crossOriginIsolated 就发不了 postMessage 了\n\t\t\tconsole.warn('当前页面运行在隔离模式下，无法获取登录态')\n\t\t\treturn null\n\t\t}\n\n\t\tconst state = createRandomString(16)\n\t\tconst nonce = createRandomString(16)\n\t\tlet codeVerifier: string | undefined\n\t\tconst redirectUrl = this.options.redirectUri ?? window.location.origin\n\n\t\tconst params: AuthzURLParams = {\n\t\t\tredirect_uri: redirectUrl,\n\t\t\tresponse_mode: 'web_message',\n\t\t\tresponse_type: this.options.useImplicitMode\n\t\t\t\t? this.options.implicitResponseType\n\t\t\t\t: 'code',\n\t\t\tclient_id: this.options.appId,\n\t\t\tstate,\n\t\t\tnonce,\n\t\t\tprompt: 'none',\n\t\t\tscope: this.options.scope\n\t\t}\n\n\t\tif (!this.options.useImplicitMode) {\n\t\t\tconst { codeChallenge, codeVerifier: v } = await genPKCEPair()\n\t\t\tcodeVerifier = v\n\t\t\tparams.code_challenge = codeChallenge\n\t\t\tparams.code_challenge_method = 'S256'\n\t\t}\n\n\t\tconst iframe = document.createElement('iframe')\n\t\t// iframe.title = 'postMessage() Initiator';\n\t\tiframe.hidden = true\n\t\tiframe.width = iframe.height = '0'\n\n\t\tiframe.src = `${this.domain}/oidc/auth?${createQueryParams(params)}`\n\t\tif (isIE()) {\n\t\t\tdocument.body.appendChild(iframe)\n\t\t} else {\n\t\t\tdocument.body.append(iframe)\n\t\t}\n\n\t\tconst res = await Promise.race([\n\t\t\tthis.listenToPostMessage(state),\n\t\t\tnew Promise<null>(resolve =>\n\t\t\t\tsetTimeout(() => resolve(null), DEFAULT_IFRAME_LOGINSTATE_TIMEOUT)\n\t\t\t)\n\t\t])\n\n\t\tif (this.globalMsgListener) {\n\t\t\twindow.removeEventListener('message', this.globalMsgListener)\n\t\t}\n\t\tthis.globalMsgListener = undefined\n\n\t\tiframe.remove()\n\n\t\tif (res === null) {\n\t\t\tconsole.warn('登录态获取超时')\n\t\t\treturn null\n\t\t}\n\n\t\tif (res.error) {\n\t\t\tif (res.error !== 'login_required') {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`登录态获取失败，认证服务器返回错误: error=${res.error}, error_description=${res.errorDesc}`\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\tconsole.warn('用户未登录')\n\t\t\t}\n\t\t\treturn null\n\t\t}\n\n\t\tif (res.state !== state) {\n\t\t\tthrow new Error('state 验证失败')\n\t\t}\n\n\t\treturn this.handleOIDCWebMsgResponse(res, nonce, redirectUrl, codeVerifier)\n\t}\n\n\t/**\n   * 将用户重定向到 Authing 认证端点进行登录，需要配合 handleRedirectCallback 使用\n   *\n   * @param options.redirectUri 回调地址，默认为初始化参数中的 redirectUri\n   * @param options.originalUri 发起登录的 URL，若设置了 redirectToOriginalUri 会在登录结束后重定向回到此页面，默认为当前 URL\n   * @param options.forced 即使在用户已登录时也提示用户再次登录\n   * @param options.customState 自定义的中间状态，会被传递到回调端点\n   */\n\tasync loginWithRedirect(\n\t\toptions: {\n      redirectUri?: string\n      originalUri?: string\n      forced?: boolean\n      customState?: any\n      login_page_context?: string\n    } = {}\n\t): Promise<void> {\n\t\tconst redirectUri = options.redirectUri || this.options.redirectUri\n\t\tif (!redirectUri) {\n\t\t\tthrow new Error('必须设置 redirect_uri')\n\t\t}\n\n\t\tconst state = createRandomString(16)\n\t\tconst nonce = createRandomString(16)\n\n\t\tconst params: AuthzURLParams = {\n\t\t\tredirect_uri: redirectUri,\n\t\t\tresponse_mode: this.options.redirectResponseMode,\n\t\t\tresponse_type: this.options.useImplicitMode\n\t\t\t\t? this.options.implicitResponseType\n\t\t\t\t: 'code',\n\t\t\tclient_id: this.options.appId,\n\t\t\tstate,\n\t\t\tnonce,\n\t\t\tscope: this.options.scope,\n\t\t\t...(options.forced && { prompt: 'login' }),\n\t\t\t...(options.login_page_context && {\n\t\t\t\tlogin_page_context: options.login_page_context\n\t\t\t})\n\t\t}\n\n\t\tlet codeVerifier: string | undefined\n\t\tif (!this.options.useImplicitMode) {\n\t\t\tconst { codeChallenge, codeVerifier: v } = await genPKCEPair()\n\t\t\tparams.code_challenge = codeChallenge\n\t\t\tparams.code_challenge_method = 'S256'\n\t\t\tcodeVerifier = v\n\t\t}\n\n\t\tawait this.transactionProvider.put(\n\t\t\ttransactionKey(this.options.appId, state),\n\t\t\t{\n\t\t\t\tcodeVerifier,\n\t\t\t\tstate,\n\t\t\t\tredirectUri,\n\t\t\t\tnonce,\n\t\t\t\t...(this.options.redirectToOriginalUri && {\n\t\t\t\t\toriginalUri: options.originalUri ?? window.location.href\n\t\t\t\t}),\n\t\t\t\t...(options.customState !== undefined && {\n\t\t\t\t\tcustomState: options.customState\n\t\t\t\t})\n\t\t\t}\n\t\t)\n\n\t\twindow.location.replace(\n\t\t\t`${this.domain}/oidc/auth?${createQueryParams(params)}`\n\t\t)\n\t}\n\n\t/**\n   * 判断当前 URL 是否为 Authing 登录回调 URL\n   */\n\tisRedirectCallback(): boolean {\n\t\tconst params = this.resolveCallbackParams()\n\n\t\tif (!params) {\n\t\t\treturn false\n\t\t}\n\n\t\tif (params['error']) {\n\t\t\treturn true\n\t\t}\n\n\t\tif (this.options.useImplicitMode) {\n\t\t\treturn !!(params['access_token'] || params['id_token'])\n\t\t} else {\n\t\t\treturn !!params['code']\n\t\t}\n\t}\n\n\t/**\n   * 在回调端点处理 Authing 发送的授权码或 token，获取用户登录态\n   */\n\tasync handleRedirectCallback(): Promise<LoginStateWithCustomStateData> {\n\t\tconst paramDict = this.resolveCallbackParams()\n\t\tif (!paramDict) {\n\t\t\tthrow new Error('非法的回调 URL')\n\t\t}\n\n\t\tif (paramDict.error) {\n\t\t\tthrow new Error(\n\t\t\t\t`认证失败, error=${paramDict.error}, error_description=${paramDict.error_description}`\n\t\t\t)\n\t\t}\n\n\t\tlet originalUri: string | undefined\n\t\tlet customState: any\n\n\t\tconst { state } = paramDict\n\t\tif (!state) {\n\t\t\tthrow new Error('非法的回调 URL: 缺少 state')\n\t\t}\n\t\tconst tx = await this.transactionProvider.get(\n\t\t\ttransactionKey(this.options.appId, state)\n\t\t)\n\t\tif (tx) {\n\t\t\tawait this.transactionProvider.delete(\n\t\t\t\ttransactionKey(this.options.appId, state)\n\t\t\t)\n\n\t\t\tif (tx.state !== state) {\n\t\t\t\tthrow new Error('state 验证失败')\n\t\t\t}\n\n\t\t\toriginalUri = tx.originalUri\n\t\t\tcustomState = tx.customState\n\t\t\tif (!this.options.useImplicitMode) {\n\t\t\t\t// PKCE code flow\n\t\t\t\tconst { code } = paramDict\n\t\t\t\tif (!code) {\n\t\t\t\t\tthrow new Error('非法的回调 URL: 缺少 code')\n\t\t\t\t}\n\t\t\t\tconst res = await this.exchangeToken(\n\t\t\t\t\tcode,\n\t\t\t\t\ttx.redirectUri,\n          tx.codeVerifier as string,\n          tx.nonce\n\t\t\t\t)\n\n\t\t\t\tif (this.options.redirectToOriginalUri && originalUri) {\n\t\t\t\t\twindow.location.replace(originalUri)\n\t\t\t\t}\n\n\t\t\t\treturn res\n\t\t\t}\n\t\t} else if (!this.options.useImplicitMode) {\n\t\t\tthrow new Error(\n\t\t\t\t'获取登录流程会话失败, 请确认是否重复访问了回调端点，以及浏览器是否支持 sessionStorage'\n\t\t\t)\n\t\t}\n\t\t// implicit flow\n\t\tconst idToken = paramDict.id_token\n\t\tconst accessToken = paramDict.access_token\n\t\t// implict 模式没有refresh_token\n\t\t//  https://docs.authing.cn/v2/concepts/oidc/choose-flow.html#%E9%9A%90%E5%BC%8F%E6%A8%A1%E5%BC%8F\n\t\t// const refreshToken = paramDict.refresh_token\n\t\tconst nonce = tx?.nonce\n\n\t\tif (\n\t\t\t(this.options.implicitResponseType.includes('token') && !accessToken) ||\n      (this.options.implicitResponseType.includes('id_token') && !idToken)\n\t\t) {\n\t\t\tthrow new Error('非法的回调 URL: 缺少 token')\n\t\t}\n\n\t\tconst result = await this.saveLoginState({\n\t\t\tidToken,\n\t\t\taccessToken,\n\t\t\tnonce\n\t\t})\n\n\t\tif (this.options.redirectToOriginalUri && originalUri) {\n\t\t\twindow.location.replace(originalUri)\n\t\t}\n\n\t\treturn { ...result, customState }\n\n\t}\n\n\t/**\n   * 弹出一个新的 Authing 登录页面窗口，在其中完成登录\n   *\n   * @param options.redirectUri 回调地址，需要和当前页面在 same origin 下；默认为初始化参数中的 redirectUri 或 window.location.origin\n   * @param options.forced 即使在用户已登录时也提示用户再次登录\n   */\n\tasync loginWithPopup(\n\t\toptions: { redirectUri?: string; forced?: boolean } = {}\n\t): Promise<LoginState | null> {\n\t\tconst redirectUri =\n      options.redirectUri || this.options.redirectUri || window.location.origin\n\n\t\tif (this.globalMsgListener !== undefined) {\n\t\t\tthrow new Error(MSG_PENDING_AUTHZ)\n\t\t}\n\t\tthis.globalMsgListener = null\n\n\t\tif (window.crossOriginIsolated) {\n\t\t\t// 如果是 crossOriginIsolated 就发不了 postMessage 了\n\t\t\tthrow new Error(MSG_CROSS_ORIGIN_ISOLATED)\n\t\t}\n\n\t\tconst state = createRandomString(16)\n\t\tconst nonce = createRandomString(16)\n\n\t\tconst params: AuthzURLParams = {\n\t\t\tredirect_uri: redirectUri,\n\t\t\tresponse_mode: 'web_message',\n\t\t\tresponse_type: this.options.useImplicitMode\n\t\t\t\t? this.options.implicitResponseType\n\t\t\t\t: 'code',\n\t\t\tclient_id: this.options.appId,\n\t\t\tstate,\n\t\t\tnonce,\n\t\t\t...(options.forced && { prompt: 'login' }),\n\t\t\tscope: this.options.scope\n\t\t}\n\n\t\tlet codeVerifier: string | undefined\n\t\tif (!this.options.useImplicitMode) {\n\t\t\tconst { codeChallenge, codeVerifier: v } = await genPKCEPair()\n\t\t\tcodeVerifier = v\n\t\t\tparams.code_challenge = codeChallenge\n\t\t\tparams.code_challenge_method = 'S256'\n\t\t}\n\n\t\tconst url = `${this.domain}/oidc/auth?${createQueryParams(params)}`\n\t\tconst win = window.open(\n\t\t\turl,\n\t\t\t'authing-spa-login-window',\n\t\t\t`popup,width=${this.options.popupWidth},height=${this.options.popupHeight}`\n\t\t)\n\t\tif (!win) {\n\t\t\tthrow new Error('弹出窗口失败')\n\t\t}\n\n\t\tconst res = await Promise.race([\n\t\t\tthis.listenToPostMessage(state),\n\t\t\tnew Promise<null>(resolve => {\n\t\t\t\tconst handle = setInterval(() => {\n\t\t\t\t\tif (win.closed) {\n\t\t\t\t\t\tclearInterval(handle)\n\t\t\t\t\t\t// 防止 post message 事件和 close 事件同时到达\n\t\t\t\t\t\tsetTimeout(() => resolve(null), 500)\n\t\t\t\t\t}\n\t\t\t\t}, 500)\n\t\t\t})\n\t\t])\n\t\tif (this.globalMsgListener) {\n\t\t\twindow.removeEventListener('message', this.globalMsgListener)\n\t\t}\n\t\tthis.globalMsgListener = undefined\n\n\t\tif (!res) {\n\t\t\t// 窗口被用户关闭了\n\t\t\treturn null\n\t\t}\n\n\t\tif (res.error) {\n\t\t\tthrow new Error(\n\t\t\t\t`登录失败，认证服务器返回错误: error=${res.error}, error_description=${res.errorDesc}`\n\t\t\t)\n\t\t}\n\n\t\tif (res.state !== state) {\n\t\t\tthrow new Error('state 验证失败')\n\t\t}\n\n\t\treturn this.handleOIDCWebMsgResponse(res, nonce, redirectUri, codeVerifier)\n\t}\n\n\t// /**\n\t//  * 由于 iframe 存在跨域 cookie 无法携带以及联邦认证支持问题，暂时不支持本方法\n\t//  *\n\t//  * 在指定的 iframe 中显示 Authing 登录页面，在其中完成登录\n\t//  *\n\t//  * 注意: 当需要手动关闭 iframe 时，必须同时调用 abortIframeLogin 方法\n\t//  *\n\t//  * @param options.forced 即使在用户已登录时也提示用户再次登录\n\t//  */\n\t/*\n  async loginWithIframe(\n    iframe: HTMLIFrameElement,\n    options: { forced?: boolean } = {},\n  ): Promise<LoginState> {\n    if (this.globalMsgListener !== undefined) {\n      throw new Error(MSG_PENDING_AUTHZ);\n    }\n    this.globalMsgListener = null;\n\n    if (window.crossOriginIsolated) {\n      // 如果是 crossOriginIsolated 就发不了 postMessage 了\n      throw new Error(MSG_CROSS_ORIGIN_ISOLATED);\n    }\n\n    const state = createRandomString(16);\n    const nonce = createRandomString(16);\n    let codeVerifier: string | undefined;\n\n    const params: AuthzURLParams = {\n      redirect_uri: window.location.href,\n      response_mode: 'web_message',\n      response_type: this.options.useImplicitMode\n        ? this.options.implicitResponseType\n        : 'code',\n      client_id: this.options.appId,\n      state,\n      nonce,\n      ...(options.forced && { prompt: 'login' }),\n      scope: this.options.scope,\n    };\n\n    if (!this.options.useImplicitMode) {\n      const { codeChallenge, codeVerifier: v } = await genPKCEPair();\n      codeVerifier = v;\n      params.code_challenge = codeChallenge;\n      params.code_challenge_method = 'S256';\n    }\n\n    iframe.src = `${this.domain}/oidc/auth?${createQueryParams(params)}`;\n\n    const res = await this.listenToPostMessage(state);\n    if (res.error) {\n      throw new Error(\n        `登录失败，认证服务器返回错误: error=${res.error}, error_description=${res.errorDesc}`,\n      );\n    }\n\n    if (res.state !== state) {\n      throw new Error('state 验证失败');\n    }\n\n    return this.handleSuccessfulOIDCResponse(\n      res,\n      window.location.href,\n      codeVerifier,\n    );\n  }\n  */\n\n\t/**\n   * 手动中止 iframe 登录, 并移除 SDK 注册的事件监听器\n   */\n\t/*\n  abortIframeLogin(): void {\n    if (this.globalMsgListener) {\n      window.removeEventListener('message', this.globalMsgListener);\n    }\n    this.globalMsgListener = undefined;\n  }\n  */\n\n\t/**\n   * 用 Access Token 获取用户身份信息\n   *\n   * @param options.accessToken Access Token，默认从登录态中获取\n   */\n\tasync getUserInfo(\n\t\toptions: {\n      accessToken?: string\n    } = {}\n\t): Promise<IUserInfo | NormalError> {\n\t\tconst accessToken =\n      options.accessToken ?? (await this.getLoginState())?.accessToken\n\t\tif (!accessToken) {\n\t\t\tthrow new Error('access token 不存在，请重新登录')\n\t\t}\n\n\t\tconst { data } = await axiosGet(`${this.domain}/api/v3/get-profile`, {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${accessToken}`,\n\t\t\t\t'x-authing-userpool-id': this.options.userPoolId\n\t\t\t}\n\t\t})\n\n\t\tif (data.data) {\n\t\t\treturn data.data as IUserInfo\n\t\t}\n\n\t\treturn {\n\t\t\tapiCode: data.apiCode,\n\t\t\tmessage: data.message,\n\t\t\tstatusCode: data.statusCode\n\t\t}\n\t}\n\n\t/**\n   * 重定向到 Authing 的登出端点，完成登出操作\n   *\n   * @param options.redirectUri 登出完成后的回调地址，默认为初始化参数中的 logoutRedirectUri\n   * @param options.state 自定义中间状态\n   */\n\tasync logoutWithRedirect(\n\t\toptions: {\n      redirectUri?: string | null\n      state?: string\n    } = {}\n\t): Promise<void> {\n\t\tconst loginState = await this.loginStateProvider.get(\n\t\t\tloginStateKey(this.options.appId)\n\t\t)\n\t\tif (!loginState) {\n\t\t\treturn\n\t\t}\n\t\tawait this.loginStateProvider.delete(loginStateKey(this.options.appId))\n\n\t\tconst params: LogoutURLParams = {\n\t\t\tid_token_hint: loginState.idToken\n\t\t}\n\n\t\tconst logoutRedirectUri =\n      options.redirectUri ?? this.options.logoutRedirectUri\n\t\tif (logoutRedirectUri) {\n\t\t\tparams.post_logout_redirect_uri = logoutRedirectUri\n\t\t\tparams.state = options.state\n\t\t}\n\n\t\tawait this.loginStateProvider.delete(loginStateKey(this.options.appId))\n\n\t\twindow.location.replace(\n\t\t\t`${this.domain}/oidc/session/end?${createQueryParams(params)}`\n\t\t)\n\t\treturn\n\t}\n\t/**\n   *\n   * 使用内部维护的 refresh_token 刷新 access_token、id_token\n   *\n   */\n\tasync refreshToken(): Promise<null | LoginState> {\n\t\tconst state = await this.loginStateProvider.get(\n\t\t\tloginStateKey(this.options.appId)\n\t\t)\n\t\tif (!state?.refreshToken) {\n\t\t\tthrow new Error(\n\t\t\t\t'获取 refresh_token 失败，请检查相关协议配置，是否开启 refresh_token 相关功能'\n\t\t\t)\n\t\t}\n\t\tif (state && state.expireAt && state.expireAt > Date.now()) {\n\t\t\tconst data = {\n\t\t\t\tgrant_type: 'refresh_token',\n\t\t\t\tredirect_uri: '',\n\t\t\t\trefresh_token: state.refreshToken\n\t\t\t}\n\n\t\t\tconst { data: tokenRes } = (await axiosPost(\n\t\t\t\t`${this.domain}/oidc/token`,\n\t\t\t\tcreateQueryParams(data),\n\t\t\t\t{\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t\t\t\t\t'x-authing-app-id': this.options.appId\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t)) as { data: OIDCTokenResponse }\n\n\t\t\t// 清掉旧的登录态\n\t\t\tawait this.loginStateProvider.delete(loginStateKey(this.options.appId))\n\n\t\t\treturn this.saveLoginState({\n\t\t\t\tidToken: tokenRes.id_token,\n\t\t\t\taccessToken: tokenRes.access_token,\n\t\t\t\trefreshToken: tokenRes.refresh_token\n\t\t\t})\n\t\t}\n\t\treturn null\n\t}\n\n\tprivate async listenToPostMessage(state: string) {\n\t\treturn new Promise<OIDCWebMessageResponse>((resolve, reject) => {\n\t\t\tconst msgEventListener = (msgEvent: MessageEvent) => {\n\t\t\t\tif (\n\t\t\t\t\tmsgEvent.origin !== this.domain ||\n          msgEvent.data?.type !== 'authorization_response'\n\t\t\t\t) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\twindow.removeEventListener('message', msgEventListener)\n\t\t\t\tthis.globalMsgListener = undefined\n\n\t\t\t\tconst { response } = msgEvent.data\n\t\t\t\tif (!response || response.state !== state) {\n\t\t\t\t\treturn reject(new Error('非法的服务端返回值'))\n\t\t\t\t}\n\n\t\t\t\tif (response.error) {\n\t\t\t\t\treturn resolve({\n\t\t\t\t\t\terror: response.error,\n\t\t\t\t\t\terrorDesc: response.error_description\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\treturn resolve({\n\t\t\t\t\taccessToken: response.access_token,\n\t\t\t\t\tidToken: response.id_token,\n\t\t\t\t\trefreshToken: response.refresh_token,\n\t\t\t\t\tcode: response.code,\n\t\t\t\t\tstate: response.state\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tthis.globalMsgListener = msgEventListener\n\t\t\twindow.addEventListener('message', msgEventListener)\n\t\t})\n\t}\n\n\tprivate async saveLoginState(params: {\n    accessToken?: string\n    idToken?: string\n    refreshToken?: string\n    nonce?: string\n  }) {\n\t\tconst { accessToken, idToken, refreshToken } = params\n\t\tconst loginState: LoginState = {\n\t\t\taccessToken: accessToken,\n\t\t\tidToken: idToken,\n\t\t\trefreshToken: refreshToken,\n\t\t\ttimestamp: Date.now()\n\t\t}\n\n\t\tif (idToken) {\n\t\t\tconst parsedIdToken: IDToken = parseToken(idToken).body\n\t\t\tloginState.parsedIdToken = parsedIdToken\n\t\t\tloginState.expireAt = parsedIdToken.exp * 1000\n\n\t\t\tif (params.nonce && parsedIdToken.nonce !== params.nonce) {\n\t\t\t\tthrow new Error('nonce 验证失败')\n\t\t\t}\n\t\t}\n\n\t\tif (accessToken) {\n\t\t\tconst parsedAccessToken: AccessToken = parseToken(accessToken).body\n\t\t\tloginState.parsedAccessToken = parsedAccessToken\n\t\t\tloginState.expireAt = parsedAccessToken.exp * 1000\n\t\t}\n\n\t\tawait this.loginStateProvider.put(\n\t\t\tloginStateKey(this.options.appId),\n\t\t\tloginState\n\t\t)\n\t\treturn loginState\n\t}\n\n\tprivate async exchangeToken(\n\t\tcode: string,\n\t\tredirectUri: string,\n\t\tcodeVerifier: string,\n\t\tnonce: string\n\t) {\n\t\tconst tokenParam: PKCETokenParams = {\n\t\t\tgrant_type: 'authorization_code',\n\t\t\tcode,\n\t\t\tcode_verifier: codeVerifier as string,\n\t\t\tclient_id: this.options.appId,\n\t\t\tredirect_uri: redirectUri\n\t\t}\n\n\t\tconst { data: tokenRes } = (await axiosPost(\n\t\t\t`${this.domain}/oidc/token`,\n\t\t\tcreateQueryParams(tokenParam),\n\t\t\t{\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded'\n\t\t\t\t}\n\t\t\t}\n\t\t)) as { data: OIDCTokenResponse }\n\n\t\treturn this.saveLoginState({\n\t\t\tidToken: tokenRes.id_token,\n\t\t\taccessToken: tokenRes.access_token,\n\t\t\trefreshToken: tokenRes.refresh_token,\n\t\t\tnonce\n\t\t})\n\t}\n\n\tprivate async handleOIDCWebMsgResponse(\n\t\tres: OIDCWebMessageResponse,\n\t\tnonce: string,\n\t\t// 只有 PKCE 会用下面两个参数\n\t\tredirectUri?: string,\n\t\tcodeVerifier?: string\n\t) {\n\t\tif (this.options.useImplicitMode) {\n\t\t\t// implicit flow\n\t\t\tif (\n\t\t\t\t(this.options.implicitResponseType.includes('token') &&\n          typeof res.accessToken !== 'string') ||\n        (this.options.implicitResponseType.includes('id_token') &&\n          typeof res.idToken !== 'string')\n\t\t\t) {\n\t\t\t\tthrow new Error('无效的 Token 返回值')\n\t\t\t}\n\n\t\t\treturn this.saveLoginState({\n\t\t\t\taccessToken: res.accessToken,\n\t\t\t\tidToken: res.idToken,\n\t\t\t\trefreshToken: res.refreshToken,\n\t\t\t\tnonce\n\t\t\t})\n\t\t}\n\n\t\t// PKCE code flow\n\t\tif (typeof res.code !== 'string') {\n\t\t\tthrow new Error('无效的 Code 返回值')\n\t\t}\n\n\t\tif (!redirectUri || !codeVerifier) {\n\t\t\t// should never happen\n\t\t\tthrow new Error()\n\t\t}\n\n\t\treturn this.exchangeToken(res.code, redirectUri, codeVerifier, nonce)\n\t}\n\n\tprivate resolveCallbackParams() {\n\t\tconst paramSource: string =\n      this.options.redirectResponseMode === 'fragment'\n      \t? window.location.hash\n      \t: window.location.search\n\t\tif (!paramSource) {\n\t\t\treturn null\n\t\t}\n\n\t\tconst paramDict: StrDict = Object.create(null)\n\t\tparamSource\n\t\t\t.substring(1)\n\t\t\t.split('&')\n\t\t\t.forEach(item => {\n\t\t\t\tconst [key, val] = item.split('=')\n\t\t\t\tparamDict[key] = val\n\t\t\t})\n\n\t\treturn paramDict\n\t}\n}\n"],"names":["axiosPromiseWrapper","p","_d","e_1","isAxiosError","_b","response","_a","data","error","_c","error_description","Error","concat","axiosGet","url","options","_options","mergeOptions","axios","get","axiosPost","post","Object","assign","headers","STORAGE_KEY_PREFIX","InMemoryStorageProvider","this","storage","create","prototype","key","put","value","delete","LocalStorageProvider","jsonItem","localStorage","getItem","JSON","parse","setItem","stringify","removeItem","NullStorageProvider","SessionStorageProvider","sessionStorage","createQueryParams","params","keys","filter","k","undefined","map","encodeURIComponent","join","loginStateKey","appId","transactionKey","state","getCrypto","window","crypto","msCrypto","getCryptoSubtle","subtle","webkitSubtle","createRandomString","length","charset","Array","from","getRandomValues","Uint8Array","v","string2Buf","str","buffer","i","push","charCodeAt","genPKCEPair","algorithm","codeVerifier","digest","hash","sent","codeChallenge","ie11SafeInput","binary","byteLength","String","fromCharCode","base64","btoa","charMapping","replace","ch","buf2Base64Url","parseToken","token","split","header","body","headerObj","atob","enc","decodeURIComponent","c","toString","slice","Authing","domain","matchRes","exec","domainC14n","useImplicitMode","loginStateProvider","console","warn","transactionProvider","implicitResponseType","redirectResponseMode","popupWidth","popupHeight","scope","_e","getLoginStateWithRedirect","nonce","redirectUri","location","origin","redirect_uri","response_mode","response_type","client_id","code_challenge","code_challenge_method","getLoginState","ignoreCache","state_1","expireAt","Date","now","introspectAccessToken","accessToken","active","globalMsgListener","crossOriginIsolated","redirectUrl","prompt","iframe","document","createElement","hidden","width","height","src","navigator","userAgent","indexOf","appendChild","append","Promise","race","listenToPostMessage","resolve","setTimeout","res","removeEventListener","remove","errorDesc","handleOIDCWebMsgResponse","loginWithRedirect","forced","login_page_context","__assign","redirectToOriginalUri","originalUri","href","customState","isRedirectCallback","resolveCallbackParams","handleRedirectCallback","paramDict","tx","code","exchangeToken","idToken","id_token","access_token","includes","saveLoginState","result","loginWithPopup","win","open","handle","setInterval","closed","clearInterval","getUserInfo","Authorization","userPoolId","apiCode","message","statusCode","logoutWithRedirect","loginState","id_token_hint","logoutRedirectUri","post_logout_redirect_uri","refreshToken","grant_type","refresh_token","tokenRes","reject","msgEventListener","msgEvent","_this","type","addEventListener","timestamp","parsedIdToken","exp","parsedAccessToken","tokenParam","code_verifier","paramSource","search","substring","forEach","item","val"],"mappings":"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"}