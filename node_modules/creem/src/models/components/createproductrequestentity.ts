/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CustomFieldRequestEntity,
  CustomFieldRequestEntity$inboundSchema,
  CustomFieldRequestEntity$Outbound,
  CustomFieldRequestEntity$outboundSchema,
} from "./customfieldrequestentity.js";

export type CreateProductRequestEntity = {
  /**
   * Name of the product
   */
  name: string;
  /**
   * Description of the product
   */
  description?: string | undefined;
  /**
   * URL of the product image
   */
  imageUrl?: string | undefined;
  /**
   * The price of the product in cents
   */
  price: number;
  /**
   * Three-letter ISO currency code, in uppercase. Must be a supported currency.
   */
  currency: string;
  /**
   * Indicates the billing method for the customer. It can either be a `recurring` billing cycle or a `onetime` payment.
   */
  billingType: string;
  /**
   * Billing period, required if billing_type is recurring
   */
  billingPeriod?: string | undefined;
  /**
   * Specifies the tax calculation mode for the transaction. If set to "inclusive," the tax is included in the price. If set to "exclusive," the tax is added on top of the price.
   */
  taxMode?: string | undefined;
  /**
   * Categorizes the type of product or service for tax purposes. This helps determine the applicable tax rules based on the nature of the item or service.
   */
  taxCategory?: string | undefined;
  /**
   * The URL to which the user will be redirected after successfull payment.
   */
  defaultSuccessUrl?: string | undefined;
  /**
   * Collect additional information from your customer using custom fields during checkout. Up to 3 fields are supported.
   */
  customField?: Array<CustomFieldRequestEntity> | undefined;
};

/** @internal */
export const CreateProductRequestEntity$inboundSchema: z.ZodType<
  CreateProductRequestEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  image_url: z.string().optional(),
  price: z.number().int(),
  currency: z.string(),
  billing_type: z.string(),
  billing_period: z.string().optional(),
  tax_mode: z.string().optional(),
  tax_category: z.string().optional(),
  default_success_url: z.string().optional(),
  custom_field: z.array(CustomFieldRequestEntity$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
    "billing_type": "billingType",
    "billing_period": "billingPeriod",
    "tax_mode": "taxMode",
    "tax_category": "taxCategory",
    "default_success_url": "defaultSuccessUrl",
    "custom_field": "customField",
  });
});

/** @internal */
export type CreateProductRequestEntity$Outbound = {
  name: string;
  description?: string | undefined;
  image_url?: string | undefined;
  price: number;
  currency: string;
  billing_type: string;
  billing_period?: string | undefined;
  tax_mode?: string | undefined;
  tax_category?: string | undefined;
  default_success_url?: string | undefined;
  custom_field?: Array<CustomFieldRequestEntity$Outbound> | undefined;
};

/** @internal */
export const CreateProductRequestEntity$outboundSchema: z.ZodType<
  CreateProductRequestEntity$Outbound,
  z.ZodTypeDef,
  CreateProductRequestEntity
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  imageUrl: z.string().optional(),
  price: z.number().int(),
  currency: z.string(),
  billingType: z.string(),
  billingPeriod: z.string().optional(),
  taxMode: z.string().optional(),
  taxCategory: z.string().optional(),
  defaultSuccessUrl: z.string().optional(),
  customField: z.array(CustomFieldRequestEntity$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
    billingType: "billing_type",
    billingPeriod: "billing_period",
    taxMode: "tax_mode",
    taxCategory: "tax_category",
    defaultSuccessUrl: "default_success_url",
    customField: "custom_field",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProductRequestEntity$ {
  /** @deprecated use `CreateProductRequestEntity$inboundSchema` instead. */
  export const inboundSchema = CreateProductRequestEntity$inboundSchema;
  /** @deprecated use `CreateProductRequestEntity$outboundSchema` instead. */
  export const outboundSchema = CreateProductRequestEntity$outboundSchema;
  /** @deprecated use `CreateProductRequestEntity$Outbound` instead. */
  export type Outbound = CreateProductRequestEntity$Outbound;
}

export function createProductRequestEntityToJSON(
  createProductRequestEntity: CreateProductRequestEntity,
): string {
  return JSON.stringify(
    CreateProductRequestEntity$outboundSchema.parse(createProductRequestEntity),
  );
}

export function createProductRequestEntityFromJSON(
  jsonString: string,
): SafeParseResult<CreateProductRequestEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProductRequestEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProductRequestEntity' from JSON`,
  );
}
