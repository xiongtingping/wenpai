/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ValidateLicenseRequestEntity = {
  /**
   * The license key to validate.
   */
  key: string;
  /**
   * Id of the instance to validate.
   */
  instanceId: string;
};

/** @internal */
export const ValidateLicenseRequestEntity$inboundSchema: z.ZodType<
  ValidateLicenseRequestEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  instance_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "instance_id": "instanceId",
  });
});

/** @internal */
export type ValidateLicenseRequestEntity$Outbound = {
  key: string;
  instance_id: string;
};

/** @internal */
export const ValidateLicenseRequestEntity$outboundSchema: z.ZodType<
  ValidateLicenseRequestEntity$Outbound,
  z.ZodTypeDef,
  ValidateLicenseRequestEntity
> = z.object({
  key: z.string(),
  instanceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    instanceId: "instance_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidateLicenseRequestEntity$ {
  /** @deprecated use `ValidateLicenseRequestEntity$inboundSchema` instead. */
  export const inboundSchema = ValidateLicenseRequestEntity$inboundSchema;
  /** @deprecated use `ValidateLicenseRequestEntity$outboundSchema` instead. */
  export const outboundSchema = ValidateLicenseRequestEntity$outboundSchema;
  /** @deprecated use `ValidateLicenseRequestEntity$Outbound` instead. */
  export type Outbound = ValidateLicenseRequestEntity$Outbound;
}

export function validateLicenseRequestEntityToJSON(
  validateLicenseRequestEntity: ValidateLicenseRequestEntity,
): string {
  return JSON.stringify(
    ValidateLicenseRequestEntity$outboundSchema.parse(
      validateLicenseRequestEntity,
    ),
  );
}

export function validateLicenseRequestEntityFromJSON(
  jsonString: string,
): SafeParseResult<ValidateLicenseRequestEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValidateLicenseRequestEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValidateLicenseRequestEntity' from JSON`,
  );
}
