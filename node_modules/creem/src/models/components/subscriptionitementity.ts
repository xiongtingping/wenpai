/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * String representing the environment.
 */
export const SubscriptionItemEntityMode = {
  Test: "test",
  Prod: "prod",
  Sandbox: "sandbox",
} as const;
/**
 * String representing the environment.
 */
export type SubscriptionItemEntityMode = ClosedEnum<
  typeof SubscriptionItemEntityMode
>;

export type SubscriptionItemEntity = {
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the environment.
   */
  mode: SubscriptionItemEntityMode;
  /**
   * String representing the objectâ€™s type. Objects of the same type share the same value.
   */
  object: string;
  /**
   * The ID of the product associated with the subscription item.
   */
  productId?: string | undefined;
  /**
   * The ID of the price associated with the subscription item.
   */
  priceId?: string | undefined;
  /**
   * The number of units for the subscription item.
   */
  units?: number | undefined;
};

/** @internal */
export const SubscriptionItemEntityMode$inboundSchema: z.ZodNativeEnum<
  typeof SubscriptionItemEntityMode
> = z.nativeEnum(SubscriptionItemEntityMode);

/** @internal */
export const SubscriptionItemEntityMode$outboundSchema: z.ZodNativeEnum<
  typeof SubscriptionItemEntityMode
> = SubscriptionItemEntityMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionItemEntityMode$ {
  /** @deprecated use `SubscriptionItemEntityMode$inboundSchema` instead. */
  export const inboundSchema = SubscriptionItemEntityMode$inboundSchema;
  /** @deprecated use `SubscriptionItemEntityMode$outboundSchema` instead. */
  export const outboundSchema = SubscriptionItemEntityMode$outboundSchema;
}

/** @internal */
export const SubscriptionItemEntity$inboundSchema: z.ZodType<
  SubscriptionItemEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  mode: SubscriptionItemEntityMode$inboundSchema,
  object: z.string(),
  product_id: z.string().optional(),
  price_id: z.string().optional(),
  units: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "price_id": "priceId",
  });
});

/** @internal */
export type SubscriptionItemEntity$Outbound = {
  id: string;
  mode: string;
  object: string;
  product_id?: string | undefined;
  price_id?: string | undefined;
  units?: number | undefined;
};

/** @internal */
export const SubscriptionItemEntity$outboundSchema: z.ZodType<
  SubscriptionItemEntity$Outbound,
  z.ZodTypeDef,
  SubscriptionItemEntity
> = z.object({
  id: z.string(),
  mode: SubscriptionItemEntityMode$outboundSchema,
  object: z.string(),
  productId: z.string().optional(),
  priceId: z.string().optional(),
  units: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    priceId: "price_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionItemEntity$ {
  /** @deprecated use `SubscriptionItemEntity$inboundSchema` instead. */
  export const inboundSchema = SubscriptionItemEntity$inboundSchema;
  /** @deprecated use `SubscriptionItemEntity$outboundSchema` instead. */
  export const outboundSchema = SubscriptionItemEntity$outboundSchema;
  /** @deprecated use `SubscriptionItemEntity$Outbound` instead. */
  export type Outbound = SubscriptionItemEntity$Outbound;
}

export function subscriptionItemEntityToJSON(
  subscriptionItemEntity: SubscriptionItemEntity,
): string {
  return JSON.stringify(
    SubscriptionItemEntity$outboundSchema.parse(subscriptionItemEntity),
  );
}

export function subscriptionItemEntityFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionItemEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionItemEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionItemEntity' from JSON`,
  );
}
