/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PaginationEntity,
  PaginationEntity$inboundSchema,
  PaginationEntity$Outbound,
  PaginationEntity$outboundSchema,
} from "./paginationentity.js";
import {
  TransactionEntity,
  TransactionEntity$inboundSchema,
  TransactionEntity$Outbound,
  TransactionEntity$outboundSchema,
} from "./transactionentity.js";

export type TransactionListEntity = {
  /**
   * List of transactions items
   */
  items: Array<TransactionEntity>;
  /**
   * Pagination details for the list
   */
  pagination: PaginationEntity;
};

/** @internal */
export const TransactionListEntity$inboundSchema: z.ZodType<
  TransactionListEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(TransactionEntity$inboundSchema),
  pagination: PaginationEntity$inboundSchema,
});

/** @internal */
export type TransactionListEntity$Outbound = {
  items: Array<TransactionEntity$Outbound>;
  pagination: PaginationEntity$Outbound;
};

/** @internal */
export const TransactionListEntity$outboundSchema: z.ZodType<
  TransactionListEntity$Outbound,
  z.ZodTypeDef,
  TransactionListEntity
> = z.object({
  items: z.array(TransactionEntity$outboundSchema),
  pagination: PaginationEntity$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionListEntity$ {
  /** @deprecated use `TransactionListEntity$inboundSchema` instead. */
  export const inboundSchema = TransactionListEntity$inboundSchema;
  /** @deprecated use `TransactionListEntity$outboundSchema` instead. */
  export const outboundSchema = TransactionListEntity$outboundSchema;
  /** @deprecated use `TransactionListEntity$Outbound` instead. */
  export type Outbound = TransactionListEntity$Outbound;
}

export function transactionListEntityToJSON(
  transactionListEntity: TransactionListEntity,
): string {
  return JSON.stringify(
    TransactionListEntity$outboundSchema.parse(transactionListEntity),
  );
}

export function transactionListEntityFromJSON(
  jsonString: string,
): SafeParseResult<TransactionListEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionListEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionListEntity' from JSON`,
  );
}
