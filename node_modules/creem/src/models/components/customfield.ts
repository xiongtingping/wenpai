/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Text,
  Text$inboundSchema,
  Text$Outbound,
  Text$outboundSchema,
} from "./text.js";

export type CustomField = {
  /**
   * The type of the field.
   */
  type: string;
  /**
   * Unique key for custom field. Must be unique to this field, alphanumeric, and up to 200 characters.
   */
  key: string;
  /**
   * The label for the field, displayed to the customer, up to 50 characters
   */
  label: string;
  /**
   * Whether the customer is required to complete the field. Defaults to `false`.
   */
  optional?: boolean | undefined;
  /**
   * Whether the customer is required to complete the field. Defaults to `false`.
   */
  text?: Text | undefined;
};

/** @internal */
export const CustomField$inboundSchema: z.ZodType<
  CustomField,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  key: z.string(),
  label: z.string(),
  optional: z.boolean().optional(),
  text: Text$inboundSchema.optional(),
});

/** @internal */
export type CustomField$Outbound = {
  type: string;
  key: string;
  label: string;
  optional?: boolean | undefined;
  text?: Text$Outbound | undefined;
};

/** @internal */
export const CustomField$outboundSchema: z.ZodType<
  CustomField$Outbound,
  z.ZodTypeDef,
  CustomField
> = z.object({
  type: z.string(),
  key: z.string(),
  label: z.string(),
  optional: z.boolean().optional(),
  text: Text$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomField$ {
  /** @deprecated use `CustomField$inboundSchema` instead. */
  export const inboundSchema = CustomField$inboundSchema;
  /** @deprecated use `CustomField$outboundSchema` instead. */
  export const outboundSchema = CustomField$outboundSchema;
  /** @deprecated use `CustomField$Outbound` instead. */
  export type Outbound = CustomField$Outbound;
}

export function customFieldToJSON(customField: CustomField): string {
  return JSON.stringify(CustomField$outboundSchema.parse(customField));
}

export function customFieldFromJSON(
  jsonString: string,
): SafeParseResult<CustomField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomField' from JSON`,
  );
}
