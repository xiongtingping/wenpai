/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Text = {
  /**
   * Maximum character length constraint for the input.
   */
  maxLength?: number | undefined;
  /**
   * Minimum character length requirement for the input.
   */
  minLength?: number | undefined;
};

/** @internal */
export const Text$inboundSchema: z.ZodType<Text, z.ZodTypeDef, unknown> = z
  .object({
    max_length: z.number().optional(),
    min_length: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      "max_length": "maxLength",
      "min_length": "minLength",
    });
  });

/** @internal */
export type Text$Outbound = {
  max_length?: number | undefined;
  min_length?: number | undefined;
};

/** @internal */
export const Text$outboundSchema: z.ZodType<Text$Outbound, z.ZodTypeDef, Text> =
  z.object({
    maxLength: z.number().optional(),
    minLength: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      maxLength: "max_length",
      minLength: "min_length",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Text$ {
  /** @deprecated use `Text$inboundSchema` instead. */
  export const inboundSchema = Text$inboundSchema;
  /** @deprecated use `Text$outboundSchema` instead. */
  export const outboundSchema = Text$outboundSchema;
  /** @deprecated use `Text$Outbound` instead. */
  export type Outbound = Text$Outbound;
}

export function textToJSON(text: Text): string {
  return JSON.stringify(Text$outboundSchema.parse(text));
}

export function textFromJSON(
  jsonString: string,
): SafeParseResult<Text, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Text$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Text' from JSON`,
  );
}
