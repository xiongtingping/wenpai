/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateCheckoutRequest = {
  xApiKey: string;
  /**
   * Create checkout request payload
   */
  createCheckoutRequest: components.CreateCheckoutRequest;
};

/** @internal */
export const CreateCheckoutRequest$inboundSchema: z.ZodType<
  CreateCheckoutRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-api-key": z.string(),
  CreateCheckoutRequest: components.CreateCheckoutRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-api-key": "xApiKey",
    "CreateCheckoutRequest": "createCheckoutRequest",
  });
});

/** @internal */
export type CreateCheckoutRequest$Outbound = {
  "x-api-key": string;
  CreateCheckoutRequest: components.CreateCheckoutRequest$Outbound;
};

/** @internal */
export const CreateCheckoutRequest$outboundSchema: z.ZodType<
  CreateCheckoutRequest$Outbound,
  z.ZodTypeDef,
  CreateCheckoutRequest
> = z.object({
  xApiKey: z.string(),
  createCheckoutRequest: components.CreateCheckoutRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xApiKey: "x-api-key",
    createCheckoutRequest: "CreateCheckoutRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCheckoutRequest$ {
  /** @deprecated use `CreateCheckoutRequest$inboundSchema` instead. */
  export const inboundSchema = CreateCheckoutRequest$inboundSchema;
  /** @deprecated use `CreateCheckoutRequest$outboundSchema` instead. */
  export const outboundSchema = CreateCheckoutRequest$outboundSchema;
  /** @deprecated use `CreateCheckoutRequest$Outbound` instead. */
  export type Outbound = CreateCheckoutRequest$Outbound;
}

export function createCheckoutRequestToJSON(
  createCheckoutRequest: CreateCheckoutRequest,
): string {
  return JSON.stringify(
    CreateCheckoutRequest$outboundSchema.parse(createCheckoutRequest),
  );
}

export function createCheckoutRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCheckoutRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCheckoutRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCheckoutRequest' from JSON`,
  );
}
