/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateProductRequest = {
  xApiKey: string;
  createProductRequestEntity: components.CreateProductRequestEntity;
};

/** @internal */
export const CreateProductRequest$inboundSchema: z.ZodType<
  CreateProductRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-api-key": z.string(),
  CreateProductRequestEntity:
    components.CreateProductRequestEntity$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-api-key": "xApiKey",
    "CreateProductRequestEntity": "createProductRequestEntity",
  });
});

/** @internal */
export type CreateProductRequest$Outbound = {
  "x-api-key": string;
  CreateProductRequestEntity: components.CreateProductRequestEntity$Outbound;
};

/** @internal */
export const CreateProductRequest$outboundSchema: z.ZodType<
  CreateProductRequest$Outbound,
  z.ZodTypeDef,
  CreateProductRequest
> = z.object({
  xApiKey: z.string(),
  createProductRequestEntity:
    components.CreateProductRequestEntity$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xApiKey: "x-api-key",
    createProductRequestEntity: "CreateProductRequestEntity",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateProductRequest$ {
  /** @deprecated use `CreateProductRequest$inboundSchema` instead. */
  export const inboundSchema = CreateProductRequest$inboundSchema;
  /** @deprecated use `CreateProductRequest$outboundSchema` instead. */
  export const outboundSchema = CreateProductRequest$outboundSchema;
  /** @deprecated use `CreateProductRequest$Outbound` instead. */
  export type Outbound = CreateProductRequest$Outbound;
}

export function createProductRequestToJSON(
  createProductRequest: CreateProductRequest,
): string {
  return JSON.stringify(
    CreateProductRequest$outboundSchema.parse(createProductRequest),
  );
}

export function createProductRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateProductRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateProductRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateProductRequest' from JSON`,
  );
}
