/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import * as components from "../components/index.js";
/** @internal */
export const ValidateLicenseRequest$inboundSchema = z.object({
    "x-api-key": z.string(),
    ValidateLicenseRequestEntity: components.ValidateLicenseRequestEntity$inboundSchema,
}).transform((v) => {
    return remap$(v, {
        "x-api-key": "xApiKey",
        "ValidateLicenseRequestEntity": "validateLicenseRequestEntity",
    });
});
/** @internal */
export const ValidateLicenseRequest$outboundSchema = z.object({
    xApiKey: z.string(),
    validateLicenseRequestEntity: components.ValidateLicenseRequestEntity$outboundSchema,
}).transform((v) => {
    return remap$(v, {
        xApiKey: "x-api-key",
        validateLicenseRequestEntity: "ValidateLicenseRequestEntity",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ValidateLicenseRequest$;
(function (ValidateLicenseRequest$) {
    /** @deprecated use `ValidateLicenseRequest$inboundSchema` instead. */
    ValidateLicenseRequest$.inboundSchema = ValidateLicenseRequest$inboundSchema;
    /** @deprecated use `ValidateLicenseRequest$outboundSchema` instead. */
    ValidateLicenseRequest$.outboundSchema = ValidateLicenseRequest$outboundSchema;
})(ValidateLicenseRequest$ || (ValidateLicenseRequest$ = {}));
export function validateLicenseRequestToJSON(validateLicenseRequest) {
    return JSON.stringify(ValidateLicenseRequest$outboundSchema.parse(validateLicenseRequest));
}
export function validateLicenseRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ValidateLicenseRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ValidateLicenseRequest' from JSON`);
}
//# sourceMappingURL=validatelicense.js.map