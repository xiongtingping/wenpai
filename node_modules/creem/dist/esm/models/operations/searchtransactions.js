/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const SearchTransactionsRequest$inboundSchema = z.object({
    customer_id: z.string().optional(),
    order_id: z.string().optional(),
    product_id: z.string().optional(),
    page_number: z.number().optional(),
    page_size: z.number().optional(),
    "x-api-key": z.string(),
}).transform((v) => {
    return remap$(v, {
        "customer_id": "customerId",
        "order_id": "orderId",
        "product_id": "productId",
        "page_number": "pageNumber",
        "page_size": "pageSize",
        "x-api-key": "xApiKey",
    });
});
/** @internal */
export const SearchTransactionsRequest$outboundSchema = z.object({
    customerId: z.string().optional(),
    orderId: z.string().optional(),
    productId: z.string().optional(),
    pageNumber: z.number().optional(),
    pageSize: z.number().optional(),
    xApiKey: z.string(),
}).transform((v) => {
    return remap$(v, {
        customerId: "customer_id",
        orderId: "order_id",
        productId: "product_id",
        pageNumber: "page_number",
        pageSize: "page_size",
        xApiKey: "x-api-key",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SearchTransactionsRequest$;
(function (SearchTransactionsRequest$) {
    /** @deprecated use `SearchTransactionsRequest$inboundSchema` instead. */
    SearchTransactionsRequest$.inboundSchema = SearchTransactionsRequest$inboundSchema;
    /** @deprecated use `SearchTransactionsRequest$outboundSchema` instead. */
    SearchTransactionsRequest$.outboundSchema = SearchTransactionsRequest$outboundSchema;
})(SearchTransactionsRequest$ || (SearchTransactionsRequest$ = {}));
export function searchTransactionsRequestToJSON(searchTransactionsRequest) {
    return JSON.stringify(SearchTransactionsRequest$outboundSchema.parse(searchTransactionsRequest));
}
export function searchTransactionsRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SearchTransactionsRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SearchTransactionsRequest' from JSON`);
}
//# sourceMappingURL=searchtransactions.js.map