/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * The type of the discount, either "percentage" or "fixed".
 */
export const CreateDiscountRequestEntityType = {
    Percentage: "percentage",
    Fixed: "fixed",
};
/**
 * The duration type for the discount.
 */
export const CreateDiscountRequestEntityDuration = {
    Forever: "forever",
    Once: "once",
    Repeating: "repeating",
};
/** @internal */
export const CreateDiscountRequestEntityType$inboundSchema = z.nativeEnum(CreateDiscountRequestEntityType);
/** @internal */
export const CreateDiscountRequestEntityType$outboundSchema = CreateDiscountRequestEntityType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDiscountRequestEntityType$;
(function (CreateDiscountRequestEntityType$) {
    /** @deprecated use `CreateDiscountRequestEntityType$inboundSchema` instead. */
    CreateDiscountRequestEntityType$.inboundSchema = CreateDiscountRequestEntityType$inboundSchema;
    /** @deprecated use `CreateDiscountRequestEntityType$outboundSchema` instead. */
    CreateDiscountRequestEntityType$.outboundSchema = CreateDiscountRequestEntityType$outboundSchema;
})(CreateDiscountRequestEntityType$ || (CreateDiscountRequestEntityType$ = {}));
/** @internal */
export const CreateDiscountRequestEntityDuration$inboundSchema = z.nativeEnum(CreateDiscountRequestEntityDuration);
/** @internal */
export const CreateDiscountRequestEntityDuration$outboundSchema = CreateDiscountRequestEntityDuration$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDiscountRequestEntityDuration$;
(function (CreateDiscountRequestEntityDuration$) {
    /** @deprecated use `CreateDiscountRequestEntityDuration$inboundSchema` instead. */
    CreateDiscountRequestEntityDuration$.inboundSchema = CreateDiscountRequestEntityDuration$inboundSchema;
    /** @deprecated use `CreateDiscountRequestEntityDuration$outboundSchema` instead. */
    CreateDiscountRequestEntityDuration$.outboundSchema = CreateDiscountRequestEntityDuration$outboundSchema;
})(CreateDiscountRequestEntityDuration$ || (CreateDiscountRequestEntityDuration$ = {}));
/** @internal */
export const CreateDiscountRequestEntity$inboundSchema = z.object({
    name: z.string(),
    code: z.string().optional(),
    type: CreateDiscountRequestEntityType$inboundSchema,
    amount: z.number().optional(),
    currency: z.string().optional(),
    percentage: z.number().optional(),
    expiry_date: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    max_redemptions: z.number().optional(),
    duration: CreateDiscountRequestEntityDuration$inboundSchema,
    duration_in_months: z.number().optional(),
    applies_to_products: z.array(z.string()),
}).transform((v) => {
    return remap$(v, {
        "expiry_date": "expiryDate",
        "max_redemptions": "maxRedemptions",
        "duration_in_months": "durationInMonths",
        "applies_to_products": "appliesToProducts",
    });
});
/** @internal */
export const CreateDiscountRequestEntity$outboundSchema = z.object({
    name: z.string(),
    code: z.string().optional(),
    type: CreateDiscountRequestEntityType$outboundSchema,
    amount: z.number().optional(),
    currency: z.string().optional(),
    percentage: z.number().optional(),
    expiryDate: z.date().transform(v => v.toISOString()).optional(),
    maxRedemptions: z.number().optional(),
    duration: CreateDiscountRequestEntityDuration$outboundSchema,
    durationInMonths: z.number().optional(),
    appliesToProducts: z.array(z.string()),
}).transform((v) => {
    return remap$(v, {
        expiryDate: "expiry_date",
        maxRedemptions: "max_redemptions",
        durationInMonths: "duration_in_months",
        appliesToProducts: "applies_to_products",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CreateDiscountRequestEntity$;
(function (CreateDiscountRequestEntity$) {
    /** @deprecated use `CreateDiscountRequestEntity$inboundSchema` instead. */
    CreateDiscountRequestEntity$.inboundSchema = CreateDiscountRequestEntity$inboundSchema;
    /** @deprecated use `CreateDiscountRequestEntity$outboundSchema` instead. */
    CreateDiscountRequestEntity$.outboundSchema = CreateDiscountRequestEntity$outboundSchema;
})(CreateDiscountRequestEntity$ || (CreateDiscountRequestEntity$ = {}));
export function createDiscountRequestEntityToJSON(createDiscountRequestEntity) {
    return JSON.stringify(CreateDiscountRequestEntity$outboundSchema.parse(createDiscountRequestEntity));
}
export function createDiscountRequestEntityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CreateDiscountRequestEntity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CreateDiscountRequestEntity' from JSON`);
}
//# sourceMappingURL=creatediscountrequestentity.js.map