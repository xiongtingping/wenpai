/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Text$inboundSchema, Text$outboundSchema, } from "./text.js";
/** @internal */
export const CustomField$inboundSchema = z.object({
    type: z.string(),
    key: z.string(),
    label: z.string(),
    optional: z.boolean().optional(),
    text: Text$inboundSchema.optional(),
});
/** @internal */
export const CustomField$outboundSchema = z.object({
    type: z.string(),
    key: z.string(),
    label: z.string(),
    optional: z.boolean().optional(),
    text: Text$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CustomField$;
(function (CustomField$) {
    /** @deprecated use `CustomField$inboundSchema` instead. */
    CustomField$.inboundSchema = CustomField$inboundSchema;
    /** @deprecated use `CustomField$outboundSchema` instead. */
    CustomField$.outboundSchema = CustomField$outboundSchema;
})(CustomField$ || (CustomField$ = {}));
export function customFieldToJSON(customField) {
    return JSON.stringify(CustomField$outboundSchema.parse(customField));
}
export function customFieldFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CustomField$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomField' from JSON`);
}
//# sourceMappingURL=customfield.js.map