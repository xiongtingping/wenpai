/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * String representing the environment.
 */
export const LicenseEntityMode = {
    Test: "test",
    Prod: "prod",
    Sandbox: "sandbox",
};
/**
 * The current status of the license key.
 */
export const LicenseEntityStatus = {
    Inactive: "inactive",
    Active: "active",
    Expired: "expired",
    Disabled: "disabled",
};
/**
 * String representing the environment.
 */
export const LicenseEntityInstanceMode = {
    Test: "test",
    Prod: "prod",
    Sandbox: "sandbox",
};
/**
 * The status of the license instance.
 */
export const LicenseEntityInstanceStatus = {
    Active: "active",
    Deactivated: "deactivated",
};
/** @internal */
export const LicenseEntityMode$inboundSchema = z.nativeEnum(LicenseEntityMode);
/** @internal */
export const LicenseEntityMode$outboundSchema = LicenseEntityMode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LicenseEntityMode$;
(function (LicenseEntityMode$) {
    /** @deprecated use `LicenseEntityMode$inboundSchema` instead. */
    LicenseEntityMode$.inboundSchema = LicenseEntityMode$inboundSchema;
    /** @deprecated use `LicenseEntityMode$outboundSchema` instead. */
    LicenseEntityMode$.outboundSchema = LicenseEntityMode$outboundSchema;
})(LicenseEntityMode$ || (LicenseEntityMode$ = {}));
/** @internal */
export const LicenseEntityStatus$inboundSchema = z.nativeEnum(LicenseEntityStatus);
/** @internal */
export const LicenseEntityStatus$outboundSchema = LicenseEntityStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LicenseEntityStatus$;
(function (LicenseEntityStatus$) {
    /** @deprecated use `LicenseEntityStatus$inboundSchema` instead. */
    LicenseEntityStatus$.inboundSchema = LicenseEntityStatus$inboundSchema;
    /** @deprecated use `LicenseEntityStatus$outboundSchema` instead. */
    LicenseEntityStatus$.outboundSchema = LicenseEntityStatus$outboundSchema;
})(LicenseEntityStatus$ || (LicenseEntityStatus$ = {}));
/** @internal */
export const ActivationLimit$inboundSchema = z.object({});
/** @internal */
export const ActivationLimit$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ActivationLimit$;
(function (ActivationLimit$) {
    /** @deprecated use `ActivationLimit$inboundSchema` instead. */
    ActivationLimit$.inboundSchema = ActivationLimit$inboundSchema;
    /** @deprecated use `ActivationLimit$outboundSchema` instead. */
    ActivationLimit$.outboundSchema = ActivationLimit$outboundSchema;
})(ActivationLimit$ || (ActivationLimit$ = {}));
export function activationLimitToJSON(activationLimit) {
    return JSON.stringify(ActivationLimit$outboundSchema.parse(activationLimit));
}
export function activationLimitFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ActivationLimit$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivationLimit' from JSON`);
}
/** @internal */
export const ExpiresAt$inboundSchema = z.object({});
/** @internal */
export const ExpiresAt$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ExpiresAt$;
(function (ExpiresAt$) {
    /** @deprecated use `ExpiresAt$inboundSchema` instead. */
    ExpiresAt$.inboundSchema = ExpiresAt$inboundSchema;
    /** @deprecated use `ExpiresAt$outboundSchema` instead. */
    ExpiresAt$.outboundSchema = ExpiresAt$outboundSchema;
})(ExpiresAt$ || (ExpiresAt$ = {}));
export function expiresAtToJSON(expiresAt) {
    return JSON.stringify(ExpiresAt$outboundSchema.parse(expiresAt));
}
export function expiresAtFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ExpiresAt$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ExpiresAt' from JSON`);
}
/** @internal */
export const LicenseEntityInstanceMode$inboundSchema = z.nativeEnum(LicenseEntityInstanceMode);
/** @internal */
export const LicenseEntityInstanceMode$outboundSchema = LicenseEntityInstanceMode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LicenseEntityInstanceMode$;
(function (LicenseEntityInstanceMode$) {
    /** @deprecated use `LicenseEntityInstanceMode$inboundSchema` instead. */
    LicenseEntityInstanceMode$.inboundSchema = LicenseEntityInstanceMode$inboundSchema;
    /** @deprecated use `LicenseEntityInstanceMode$outboundSchema` instead. */
    LicenseEntityInstanceMode$.outboundSchema = LicenseEntityInstanceMode$outboundSchema;
})(LicenseEntityInstanceMode$ || (LicenseEntityInstanceMode$ = {}));
/** @internal */
export const LicenseEntityInstanceStatus$inboundSchema = z.nativeEnum(LicenseEntityInstanceStatus);
/** @internal */
export const LicenseEntityInstanceStatus$outboundSchema = LicenseEntityInstanceStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LicenseEntityInstanceStatus$;
(function (LicenseEntityInstanceStatus$) {
    /** @deprecated use `LicenseEntityInstanceStatus$inboundSchema` instead. */
    LicenseEntityInstanceStatus$.inboundSchema = LicenseEntityInstanceStatus$inboundSchema;
    /** @deprecated use `LicenseEntityInstanceStatus$outboundSchema` instead. */
    LicenseEntityInstanceStatus$.outboundSchema = LicenseEntityInstanceStatus$outboundSchema;
})(LicenseEntityInstanceStatus$ || (LicenseEntityInstanceStatus$ = {}));
/** @internal */
export const Instance$inboundSchema = z.object({
    id: z.string(),
    mode: LicenseEntityInstanceMode$inboundSchema,
    object: z.string(),
    name: z.string(),
    status: LicenseEntityInstanceStatus$inboundSchema,
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
    return remap$(v, {
        "created_at": "createdAt",
    });
});
/** @internal */
export const Instance$outboundSchema = z.object({
    id: z.string(),
    mode: LicenseEntityInstanceMode$outboundSchema,
    object: z.string(),
    name: z.string(),
    status: LicenseEntityInstanceStatus$outboundSchema,
    createdAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
    return remap$(v, {
        createdAt: "created_at",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Instance$;
(function (Instance$) {
    /** @deprecated use `Instance$inboundSchema` instead. */
    Instance$.inboundSchema = Instance$inboundSchema;
    /** @deprecated use `Instance$outboundSchema` instead. */
    Instance$.outboundSchema = Instance$outboundSchema;
})(Instance$ || (Instance$ = {}));
export function instanceToJSON(instance) {
    return JSON.stringify(Instance$outboundSchema.parse(instance));
}
export function instanceFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Instance$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Instance' from JSON`);
}
/** @internal */
export const LicenseEntity$inboundSchema = z.object({
    id: z.string(),
    mode: LicenseEntityMode$inboundSchema,
    object: z.string(),
    status: LicenseEntityStatus$inboundSchema,
    key: z.string(),
    activation: z.number(),
    activation_limit: z.nullable(z.lazy(() => ActivationLimit$inboundSchema))
        .optional(),
    expires_at: z.nullable(z.lazy(() => ExpiresAt$inboundSchema)).optional(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    instance: z.nullable(z.lazy(() => Instance$inboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        "activation_limit": "activationLimit",
        "expires_at": "expiresAt",
        "created_at": "createdAt",
    });
});
/** @internal */
export const LicenseEntity$outboundSchema = z.object({
    id: z.string(),
    mode: LicenseEntityMode$outboundSchema,
    object: z.string(),
    status: LicenseEntityStatus$outboundSchema,
    key: z.string(),
    activation: z.number(),
    activationLimit: z.nullable(z.lazy(() => ActivationLimit$outboundSchema))
        .optional(),
    expiresAt: z.nullable(z.lazy(() => ExpiresAt$outboundSchema)).optional(),
    createdAt: z.date().transform(v => v.toISOString()),
    instance: z.nullable(z.lazy(() => Instance$outboundSchema)).optional(),
}).transform((v) => {
    return remap$(v, {
        activationLimit: "activation_limit",
        expiresAt: "expires_at",
        createdAt: "created_at",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var LicenseEntity$;
(function (LicenseEntity$) {
    /** @deprecated use `LicenseEntity$inboundSchema` instead. */
    LicenseEntity$.inboundSchema = LicenseEntity$inboundSchema;
    /** @deprecated use `LicenseEntity$outboundSchema` instead. */
    LicenseEntity$.outboundSchema = LicenseEntity$outboundSchema;
})(LicenseEntity$ || (LicenseEntity$ = {}));
export function licenseEntityToJSON(licenseEntity) {
    return JSON.stringify(LicenseEntity$outboundSchema.parse(licenseEntity));
}
export function licenseEntityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => LicenseEntity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LicenseEntity' from JSON`);
}
//# sourceMappingURL=licenseentity.js.map