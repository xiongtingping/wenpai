/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/** @internal */
export const Text$inboundSchema = z
    .object({
    max_length: z.number().optional(),
    min_length: z.number().optional(),
}).transform((v) => {
    return remap$(v, {
        "max_length": "maxLength",
        "min_length": "minLength",
    });
});
/** @internal */
export const Text$outboundSchema = z.object({
    maxLength: z.number().optional(),
    minLength: z.number().optional(),
}).transform((v) => {
    return remap$(v, {
        maxLength: "max_length",
        minLength: "min_length",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Text$;
(function (Text$) {
    /** @deprecated use `Text$inboundSchema` instead. */
    Text$.inboundSchema = Text$inboundSchema;
    /** @deprecated use `Text$outboundSchema` instead. */
    Text$.outboundSchema = Text$outboundSchema;
})(Text$ || (Text$ = {}));
export function textToJSON(text) {
    return JSON.stringify(Text$outboundSchema.parse(text));
}
export function textFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Text$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Text' from JSON`);
}
//# sourceMappingURL=text.js.map