/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { CustomerEntity$inboundSchema, CustomerEntity$outboundSchema, } from "./customerentity.js";
import { CustomField$inboundSchema, CustomField$outboundSchema, } from "./customfield.js";
import { OrderEntity$inboundSchema, OrderEntity$outboundSchema, } from "./orderentity.js";
import { ProductEntity$inboundSchema, ProductEntity$outboundSchema, } from "./productentity.js";
import { ProductFeatureEntity$inboundSchema, ProductFeatureEntity$outboundSchema, } from "./productfeatureentity.js";
import { SubscriptionEntity$inboundSchema, SubscriptionEntity$outboundSchema, } from "./subscriptionentity.js";
/**
 * String representing the environment.
 */
export const CheckoutEntityMode = {
    Test: "test",
    Prod: "prod",
    Sandbox: "sandbox",
};
/** @internal */
export const CheckoutEntityMode$inboundSchema = z.nativeEnum(CheckoutEntityMode);
/** @internal */
export const CheckoutEntityMode$outboundSchema = CheckoutEntityMode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutEntityMode$;
(function (CheckoutEntityMode$) {
    /** @deprecated use `CheckoutEntityMode$inboundSchema` instead. */
    CheckoutEntityMode$.inboundSchema = CheckoutEntityMode$inboundSchema;
    /** @deprecated use `CheckoutEntityMode$outboundSchema` instead. */
    CheckoutEntityMode$.outboundSchema = CheckoutEntityMode$outboundSchema;
})(CheckoutEntityMode$ || (CheckoutEntityMode$ = {}));
/** @internal */
export const CheckoutEntityProduct$inboundSchema = z.union([ProductEntity$inboundSchema, z.string()]);
/** @internal */
export const CheckoutEntityProduct$outboundSchema = z.union([ProductEntity$outboundSchema, z.string()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutEntityProduct$;
(function (CheckoutEntityProduct$) {
    /** @deprecated use `CheckoutEntityProduct$inboundSchema` instead. */
    CheckoutEntityProduct$.inboundSchema = CheckoutEntityProduct$inboundSchema;
    /** @deprecated use `CheckoutEntityProduct$outboundSchema` instead. */
    CheckoutEntityProduct$.outboundSchema = CheckoutEntityProduct$outboundSchema;
})(CheckoutEntityProduct$ || (CheckoutEntityProduct$ = {}));
export function checkoutEntityProductToJSON(checkoutEntityProduct) {
    return JSON.stringify(CheckoutEntityProduct$outboundSchema.parse(checkoutEntityProduct));
}
export function checkoutEntityProductFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutEntityProduct$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutEntityProduct' from JSON`);
}
/** @internal */
export const Subscription$inboundSchema = z.union([SubscriptionEntity$inboundSchema, z.string()]);
/** @internal */
export const Subscription$outboundSchema = z.union([SubscriptionEntity$outboundSchema, z.string()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Subscription$;
(function (Subscription$) {
    /** @deprecated use `Subscription$inboundSchema` instead. */
    Subscription$.inboundSchema = Subscription$inboundSchema;
    /** @deprecated use `Subscription$outboundSchema` instead. */
    Subscription$.outboundSchema = Subscription$outboundSchema;
})(Subscription$ || (Subscription$ = {}));
export function subscriptionToJSON(subscription) {
    return JSON.stringify(Subscription$outboundSchema.parse(subscription));
}
export function subscriptionFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Subscription$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Subscription' from JSON`);
}
/** @internal */
export const CheckoutEntityCustomer$inboundSchema = z.union([CustomerEntity$inboundSchema, z.string()]);
/** @internal */
export const CheckoutEntityCustomer$outboundSchema = z.union([CustomerEntity$outboundSchema, z.string()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutEntityCustomer$;
(function (CheckoutEntityCustomer$) {
    /** @deprecated use `CheckoutEntityCustomer$inboundSchema` instead. */
    CheckoutEntityCustomer$.inboundSchema = CheckoutEntityCustomer$inboundSchema;
    /** @deprecated use `CheckoutEntityCustomer$outboundSchema` instead. */
    CheckoutEntityCustomer$.outboundSchema = CheckoutEntityCustomer$outboundSchema;
})(CheckoutEntityCustomer$ || (CheckoutEntityCustomer$ = {}));
export function checkoutEntityCustomerToJSON(checkoutEntityCustomer) {
    return JSON.stringify(CheckoutEntityCustomer$outboundSchema.parse(checkoutEntityCustomer));
}
export function checkoutEntityCustomerFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutEntityCustomer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutEntityCustomer' from JSON`);
}
/** @internal */
export const CheckoutEntity$inboundSchema = z.object({
    id: z.string(),
    mode: CheckoutEntityMode$inboundSchema,
    object: z.string(),
    status: z.string(),
    request_id: z.string().optional(),
    product: z.union([ProductEntity$inboundSchema, z.string()]),
    units: z.number().default(1),
    order: OrderEntity$inboundSchema.optional(),
    subscription: z.union([SubscriptionEntity$inboundSchema, z.string()])
        .optional(),
    customer: z.union([CustomerEntity$inboundSchema, z.string()]).optional(),
    custom_fields: z.array(CustomField$inboundSchema).optional(),
    checkout_url: z.string().optional(),
    success_url: z.nullable(z.string()).optional(),
    feature: z.array(ProductFeatureEntity$inboundSchema).optional(),
    metadata: z.record(z.any()).optional(),
}).transform((v) => {
    return remap$(v, {
        "request_id": "requestId",
        "custom_fields": "customFields",
        "checkout_url": "checkoutUrl",
        "success_url": "successUrl",
    });
});
/** @internal */
export const CheckoutEntity$outboundSchema = z.object({
    id: z.string(),
    mode: CheckoutEntityMode$outboundSchema,
    object: z.string(),
    status: z.string(),
    requestId: z.string().optional(),
    product: z.union([ProductEntity$outboundSchema, z.string()]),
    units: z.number().default(1),
    order: OrderEntity$outboundSchema.optional(),
    subscription: z.union([SubscriptionEntity$outboundSchema, z.string()])
        .optional(),
    customer: z.union([CustomerEntity$outboundSchema, z.string()]).optional(),
    customFields: z.array(CustomField$outboundSchema).optional(),
    checkoutUrl: z.string().optional(),
    successUrl: z.nullable(z.string()).optional(),
    feature: z.array(ProductFeatureEntity$outboundSchema).optional(),
    metadata: z.record(z.any()).optional(),
}).transform((v) => {
    return remap$(v, {
        requestId: "request_id",
        customFields: "custom_fields",
        checkoutUrl: "checkout_url",
        successUrl: "success_url",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var CheckoutEntity$;
(function (CheckoutEntity$) {
    /** @deprecated use `CheckoutEntity$inboundSchema` instead. */
    CheckoutEntity$.inboundSchema = CheckoutEntity$inboundSchema;
    /** @deprecated use `CheckoutEntity$outboundSchema` instead. */
    CheckoutEntity$.outboundSchema = CheckoutEntity$outboundSchema;
})(CheckoutEntity$ || (CheckoutEntity$ = {}));
export function checkoutEntityToJSON(checkoutEntity) {
    return JSON.stringify(CheckoutEntity$outboundSchema.parse(checkoutEntity));
}
export function checkoutEntityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => CheckoutEntity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CheckoutEntity' from JSON`);
}
//# sourceMappingURL=checkoutentity.js.map