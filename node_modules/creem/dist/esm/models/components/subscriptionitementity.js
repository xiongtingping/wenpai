/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * String representing the environment.
 */
export const SubscriptionItemEntityMode = {
    Test: "test",
    Prod: "prod",
    Sandbox: "sandbox",
};
/** @internal */
export const SubscriptionItemEntityMode$inboundSchema = z.nativeEnum(SubscriptionItemEntityMode);
/** @internal */
export const SubscriptionItemEntityMode$outboundSchema = SubscriptionItemEntityMode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SubscriptionItemEntityMode$;
(function (SubscriptionItemEntityMode$) {
    /** @deprecated use `SubscriptionItemEntityMode$inboundSchema` instead. */
    SubscriptionItemEntityMode$.inboundSchema = SubscriptionItemEntityMode$inboundSchema;
    /** @deprecated use `SubscriptionItemEntityMode$outboundSchema` instead. */
    SubscriptionItemEntityMode$.outboundSchema = SubscriptionItemEntityMode$outboundSchema;
})(SubscriptionItemEntityMode$ || (SubscriptionItemEntityMode$ = {}));
/** @internal */
export const SubscriptionItemEntity$inboundSchema = z.object({
    id: z.string(),
    mode: SubscriptionItemEntityMode$inboundSchema,
    object: z.string(),
    product_id: z.string().optional(),
    price_id: z.string().optional(),
    units: z.number().optional(),
}).transform((v) => {
    return remap$(v, {
        "product_id": "productId",
        "price_id": "priceId",
    });
});
/** @internal */
export const SubscriptionItemEntity$outboundSchema = z.object({
    id: z.string(),
    mode: SubscriptionItemEntityMode$outboundSchema,
    object: z.string(),
    productId: z.string().optional(),
    priceId: z.string().optional(),
    units: z.number().optional(),
}).transform((v) => {
    return remap$(v, {
        productId: "product_id",
        priceId: "price_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SubscriptionItemEntity$;
(function (SubscriptionItemEntity$) {
    /** @deprecated use `SubscriptionItemEntity$inboundSchema` instead. */
    SubscriptionItemEntity$.inboundSchema = SubscriptionItemEntity$inboundSchema;
    /** @deprecated use `SubscriptionItemEntity$outboundSchema` instead. */
    SubscriptionItemEntity$.outboundSchema = SubscriptionItemEntity$outboundSchema;
})(SubscriptionItemEntity$ || (SubscriptionItemEntity$ = {}));
export function subscriptionItemEntityToJSON(subscriptionItemEntity) {
    return JSON.stringify(SubscriptionItemEntity$outboundSchema.parse(subscriptionItemEntity));
}
export function subscriptionItemEntityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SubscriptionItemEntity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SubscriptionItemEntity' from JSON`);
}
//# sourceMappingURL=subscriptionitementity.js.map