/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { FeatureEntity$inboundSchema, FeatureEntity$outboundSchema, } from "./featureentity.js";
/**
 * String representing the environment.
 */
export const Mode = {
    Test: "test",
    Prod: "prod",
    Sandbox: "sandbox",
};
/** @internal */
export const Mode$inboundSchema = z.nativeEnum(Mode);
/** @internal */
export const Mode$outboundSchema = Mode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Mode$;
(function (Mode$) {
    /** @deprecated use `Mode$inboundSchema` instead. */
    Mode$.inboundSchema = Mode$inboundSchema;
    /** @deprecated use `Mode$outboundSchema` instead. */
    Mode$.outboundSchema = Mode$outboundSchema;
})(Mode$ || (Mode$ = {}));
/** @internal */
export const ProductEntity$inboundSchema = z.object({
    id: z.string(),
    mode: Mode$inboundSchema,
    object: z.string(),
    name: z.string(),
    description: z.string(),
    image_url: z.string().optional(),
    features: z.array(FeatureEntity$inboundSchema).optional(),
    price: z.number(),
    currency: z.string(),
    billing_type: z.string(),
    billing_period: z.string(),
    status: z.string(),
    tax_mode: z.string(),
    tax_category: z.string(),
    product_url: z.string().optional(),
    default_success_url: z.nullable(z.string()).optional(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
    return remap$(v, {
        "image_url": "imageUrl",
        "billing_type": "billingType",
        "billing_period": "billingPeriod",
        "tax_mode": "taxMode",
        "tax_category": "taxCategory",
        "product_url": "productUrl",
        "default_success_url": "defaultSuccessUrl",
        "created_at": "createdAt",
        "updated_at": "updatedAt",
    });
});
/** @internal */
export const ProductEntity$outboundSchema = z.object({
    id: z.string(),
    mode: Mode$outboundSchema,
    object: z.string(),
    name: z.string(),
    description: z.string(),
    imageUrl: z.string().optional(),
    features: z.array(FeatureEntity$outboundSchema).optional(),
    price: z.number(),
    currency: z.string(),
    billingType: z.string(),
    billingPeriod: z.string(),
    status: z.string(),
    taxMode: z.string(),
    taxCategory: z.string(),
    productUrl: z.string().optional(),
    defaultSuccessUrl: z.nullable(z.string()).optional(),
    createdAt: z.date().transform(v => v.toISOString()),
    updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
    return remap$(v, {
        imageUrl: "image_url",
        billingType: "billing_type",
        billingPeriod: "billing_period",
        taxMode: "tax_mode",
        taxCategory: "tax_category",
        productUrl: "product_url",
        defaultSuccessUrl: "default_success_url",
        createdAt: "created_at",
        updatedAt: "updated_at",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var ProductEntity$;
(function (ProductEntity$) {
    /** @deprecated use `ProductEntity$inboundSchema` instead. */
    ProductEntity$.inboundSchema = ProductEntity$inboundSchema;
    /** @deprecated use `ProductEntity$outboundSchema` instead. */
    ProductEntity$.outboundSchema = ProductEntity$outboundSchema;
})(ProductEntity$ || (ProductEntity$ = {}));
export function productEntityToJSON(productEntity) {
    return JSON.stringify(ProductEntity$outboundSchema.parse(productEntity));
}
export function productEntityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => ProductEntity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ProductEntity' from JSON`);
}
//# sourceMappingURL=productentity.js.map