/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
/**
 * The update behavior for the subscription (defaults to proration-charge-immediately)
 */
export const UpgradeSubscriptionRequestEntityUpdateBehavior = {
    ProrationChargeImmediately: "proration-charge-immediately",
    ProrationCharge: "proration-charge",
    ProrationNone: "proration-none",
};
/** @internal */
export const UpgradeSubscriptionRequestEntityUpdateBehavior$inboundSchema = z
    .nativeEnum(UpgradeSubscriptionRequestEntityUpdateBehavior);
/** @internal */
export const UpgradeSubscriptionRequestEntityUpdateBehavior$outboundSchema = UpgradeSubscriptionRequestEntityUpdateBehavior$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpgradeSubscriptionRequestEntityUpdateBehavior$;
(function (UpgradeSubscriptionRequestEntityUpdateBehavior$) {
    /** @deprecated use `UpgradeSubscriptionRequestEntityUpdateBehavior$inboundSchema` instead. */
    UpgradeSubscriptionRequestEntityUpdateBehavior$.inboundSchema = UpgradeSubscriptionRequestEntityUpdateBehavior$inboundSchema;
    /** @deprecated use `UpgradeSubscriptionRequestEntityUpdateBehavior$outboundSchema` instead. */
    UpgradeSubscriptionRequestEntityUpdateBehavior$.outboundSchema = UpgradeSubscriptionRequestEntityUpdateBehavior$outboundSchema;
})(UpgradeSubscriptionRequestEntityUpdateBehavior$ || (UpgradeSubscriptionRequestEntityUpdateBehavior$ = {}));
/** @internal */
export const UpgradeSubscriptionRequestEntity$inboundSchema = z.object({
    product_id: z.string(),
    update_behavior: UpgradeSubscriptionRequestEntityUpdateBehavior$inboundSchema
        .default("proration-charge-immediately"),
}).transform((v) => {
    return remap$(v, {
        "product_id": "productId",
        "update_behavior": "updateBehavior",
    });
});
/** @internal */
export const UpgradeSubscriptionRequestEntity$outboundSchema = z.object({
    productId: z.string(),
    updateBehavior: UpgradeSubscriptionRequestEntityUpdateBehavior$outboundSchema
        .default("proration-charge-immediately"),
}).transform((v) => {
    return remap$(v, {
        productId: "product_id",
        updateBehavior: "update_behavior",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var UpgradeSubscriptionRequestEntity$;
(function (UpgradeSubscriptionRequestEntity$) {
    /** @deprecated use `UpgradeSubscriptionRequestEntity$inboundSchema` instead. */
    UpgradeSubscriptionRequestEntity$.inboundSchema = UpgradeSubscriptionRequestEntity$inboundSchema;
    /** @deprecated use `UpgradeSubscriptionRequestEntity$outboundSchema` instead. */
    UpgradeSubscriptionRequestEntity$.outboundSchema = UpgradeSubscriptionRequestEntity$outboundSchema;
})(UpgradeSubscriptionRequestEntity$ || (UpgradeSubscriptionRequestEntity$ = {}));
export function upgradeSubscriptionRequestEntityToJSON(upgradeSubscriptionRequestEntity) {
    return JSON.stringify(UpgradeSubscriptionRequestEntity$outboundSchema.parse(upgradeSubscriptionRequestEntity));
}
export function upgradeSubscriptionRequestEntityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => UpgradeSubscriptionRequestEntity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'UpgradeSubscriptionRequestEntity' from JSON`);
}
//# sourceMappingURL=upgradesubscriptionrequestentity.js.map