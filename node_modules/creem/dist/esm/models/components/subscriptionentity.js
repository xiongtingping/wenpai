/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { CustomerEntity$inboundSchema, CustomerEntity$outboundSchema, } from "./customerentity.js";
import { ProductEntity$inboundSchema, ProductEntity$outboundSchema, } from "./productentity.js";
import { SubscriptionItemEntity$inboundSchema, SubscriptionItemEntity$outboundSchema, } from "./subscriptionitementity.js";
import { TransactionEntity$inboundSchema, TransactionEntity$outboundSchema, } from "./transactionentity.js";
/**
 * String representing the environment.
 */
export const SubscriptionEntityMode = {
    Test: "test",
    Prod: "prod",
    Sandbox: "sandbox",
};
/**
 * The current status of the subscription.
 */
export const Status = {
    Active: "active",
    Canceled: "canceled",
    Unpaid: "unpaid",
    Paused: "paused",
    Trialing: "trialing",
};
/** @internal */
export const SubscriptionEntityMode$inboundSchema = z.nativeEnum(SubscriptionEntityMode);
/** @internal */
export const SubscriptionEntityMode$outboundSchema = SubscriptionEntityMode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SubscriptionEntityMode$;
(function (SubscriptionEntityMode$) {
    /** @deprecated use `SubscriptionEntityMode$inboundSchema` instead. */
    SubscriptionEntityMode$.inboundSchema = SubscriptionEntityMode$inboundSchema;
    /** @deprecated use `SubscriptionEntityMode$outboundSchema` instead. */
    SubscriptionEntityMode$.outboundSchema = SubscriptionEntityMode$outboundSchema;
})(SubscriptionEntityMode$ || (SubscriptionEntityMode$ = {}));
/** @internal */
export const Product$inboundSchema = z.union([ProductEntity$inboundSchema, z.string()]);
/** @internal */
export const Product$outboundSchema = z.union([ProductEntity$outboundSchema, z.string()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Product$;
(function (Product$) {
    /** @deprecated use `Product$inboundSchema` instead. */
    Product$.inboundSchema = Product$inboundSchema;
    /** @deprecated use `Product$outboundSchema` instead. */
    Product$.outboundSchema = Product$outboundSchema;
})(Product$ || (Product$ = {}));
export function productToJSON(product) {
    return JSON.stringify(Product$outboundSchema.parse(product));
}
export function productFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Product$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Product' from JSON`);
}
/** @internal */
export const Customer$inboundSchema = z.union([CustomerEntity$inboundSchema, z.string()]);
/** @internal */
export const Customer$outboundSchema = z.union([CustomerEntity$outboundSchema, z.string()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Customer$;
(function (Customer$) {
    /** @deprecated use `Customer$inboundSchema` instead. */
    Customer$.inboundSchema = Customer$inboundSchema;
    /** @deprecated use `Customer$outboundSchema` instead. */
    Customer$.outboundSchema = Customer$outboundSchema;
})(Customer$ || (Customer$ = {}));
export function customerToJSON(customer) {
    return JSON.stringify(Customer$outboundSchema.parse(customer));
}
export function customerFromJSON(jsonString) {
    return safeParse(jsonString, (x) => Customer$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Customer' from JSON`);
}
/** @internal */
export const Status$inboundSchema = z
    .nativeEnum(Status);
/** @internal */
export const Status$outboundSchema = Status$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var Status$;
(function (Status$) {
    /** @deprecated use `Status$inboundSchema` instead. */
    Status$.inboundSchema = Status$inboundSchema;
    /** @deprecated use `Status$outboundSchema` instead. */
    Status$.outboundSchema = Status$outboundSchema;
})(Status$ || (Status$ = {}));
/** @internal */
export const SubscriptionEntity$inboundSchema = z.object({
    id: z.string(),
    mode: SubscriptionEntityMode$inboundSchema,
    object: z.string(),
    product: z.union([ProductEntity$inboundSchema, z.string()]),
    customer: z.union([CustomerEntity$inboundSchema, z.string()]),
    items: z.array(SubscriptionItemEntity$inboundSchema).optional(),
    collection_method: z.string(),
    status: Status$inboundSchema,
    last_transaction_id: z.string().optional(),
    last_transaction: TransactionEntity$inboundSchema.optional(),
    last_transaction_date: z.string().datetime({ offset: true }).transform(v => new Date(v)).optional(),
    next_transaction_date: z.string().datetime({ offset: true }).transform(v => new Date(v)).optional(),
    current_period_start_date: z.string().datetime({ offset: true }).transform(v => new Date(v)).optional(),
    current_period_end_date: z.string().datetime({ offset: true }).transform(v => new Date(v)).optional(),
    canceled_at: z.nullable(z.string().datetime({ offset: true }).transform(v => new Date(v))).optional(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
    return remap$(v, {
        "collection_method": "collectionMethod",
        "last_transaction_id": "lastTransactionId",
        "last_transaction": "lastTransaction",
        "last_transaction_date": "lastTransactionDate",
        "next_transaction_date": "nextTransactionDate",
        "current_period_start_date": "currentPeriodStartDate",
        "current_period_end_date": "currentPeriodEndDate",
        "canceled_at": "canceledAt",
        "created_at": "createdAt",
        "updated_at": "updatedAt",
    });
});
/** @internal */
export const SubscriptionEntity$outboundSchema = z.object({
    id: z.string(),
    mode: SubscriptionEntityMode$outboundSchema,
    object: z.string(),
    product: z.union([ProductEntity$outboundSchema, z.string()]),
    customer: z.union([CustomerEntity$outboundSchema, z.string()]),
    items: z.array(SubscriptionItemEntity$outboundSchema).optional(),
    collectionMethod: z.string(),
    status: Status$outboundSchema,
    lastTransactionId: z.string().optional(),
    lastTransaction: TransactionEntity$outboundSchema.optional(),
    lastTransactionDate: z.date().transform(v => v.toISOString()).optional(),
    nextTransactionDate: z.date().transform(v => v.toISOString()).optional(),
    currentPeriodStartDate: z.date().transform(v => v.toISOString()).optional(),
    currentPeriodEndDate: z.date().transform(v => v.toISOString()).optional(),
    canceledAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
    createdAt: z.date().transform(v => v.toISOString()),
    updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
    return remap$(v, {
        collectionMethod: "collection_method",
        lastTransactionId: "last_transaction_id",
        lastTransaction: "last_transaction",
        lastTransactionDate: "last_transaction_date",
        nextTransactionDate: "next_transaction_date",
        currentPeriodStartDate: "current_period_start_date",
        currentPeriodEndDate: "current_period_end_date",
        canceledAt: "canceled_at",
        createdAt: "created_at",
        updatedAt: "updated_at",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var SubscriptionEntity$;
(function (SubscriptionEntity$) {
    /** @deprecated use `SubscriptionEntity$inboundSchema` instead. */
    SubscriptionEntity$.inboundSchema = SubscriptionEntity$inboundSchema;
    /** @deprecated use `SubscriptionEntity$outboundSchema` instead. */
    SubscriptionEntity$.outboundSchema = SubscriptionEntity$outboundSchema;
})(SubscriptionEntity$ || (SubscriptionEntity$ = {}));
export function subscriptionEntityToJSON(subscriptionEntity) {
    return JSON.stringify(SubscriptionEntity$outboundSchema.parse(subscriptionEntity));
}
export function subscriptionEntityFromJSON(jsonString) {
    return safeParse(jsonString, (x) => SubscriptionEntity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'SubscriptionEntity' from JSON`);
}
//# sourceMappingURL=subscriptionentity.js.map