"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderEntity$ = exports.OrderEntity$outboundSchema = exports.OrderEntity$inboundSchema = exports.OrderEntityType$ = exports.OrderEntityType$outboundSchema = exports.OrderEntityType$inboundSchema = exports.OrderEntityStatus$ = exports.OrderEntityStatus$outboundSchema = exports.OrderEntityStatus$inboundSchema = exports.OrderEntityMode$ = exports.OrderEntityMode$outboundSchema = exports.OrderEntityMode$inboundSchema = exports.OrderEntityType = exports.OrderEntityStatus = exports.OrderEntityMode = void 0;
exports.orderEntityToJSON = orderEntityToJSON;
exports.orderEntityFromJSON = orderEntityFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * String representing the environment.
 */
exports.OrderEntityMode = {
    Test: "test",
    Prod: "prod",
    Sandbox: "sandbox",
};
/**
 * Current status of the order.
 */
exports.OrderEntityStatus = {
    Pending: "pending",
    Paid: "paid",
};
/**
 * The type of order. This can specify whether it's a regular purchase, subscription, etc.
 */
exports.OrderEntityType = {
    Recurring: "recurring",
    Onetime: "onetime",
};
/** @internal */
exports.OrderEntityMode$inboundSchema = z.nativeEnum(exports.OrderEntityMode);
/** @internal */
exports.OrderEntityMode$outboundSchema = exports.OrderEntityMode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OrderEntityMode$;
(function (OrderEntityMode$) {
    /** @deprecated use `OrderEntityMode$inboundSchema` instead. */
    OrderEntityMode$.inboundSchema = exports.OrderEntityMode$inboundSchema;
    /** @deprecated use `OrderEntityMode$outboundSchema` instead. */
    OrderEntityMode$.outboundSchema = exports.OrderEntityMode$outboundSchema;
})(OrderEntityMode$ || (exports.OrderEntityMode$ = OrderEntityMode$ = {}));
/** @internal */
exports.OrderEntityStatus$inboundSchema = z.nativeEnum(exports.OrderEntityStatus);
/** @internal */
exports.OrderEntityStatus$outboundSchema = exports.OrderEntityStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OrderEntityStatus$;
(function (OrderEntityStatus$) {
    /** @deprecated use `OrderEntityStatus$inboundSchema` instead. */
    OrderEntityStatus$.inboundSchema = exports.OrderEntityStatus$inboundSchema;
    /** @deprecated use `OrderEntityStatus$outboundSchema` instead. */
    OrderEntityStatus$.outboundSchema = exports.OrderEntityStatus$outboundSchema;
})(OrderEntityStatus$ || (exports.OrderEntityStatus$ = OrderEntityStatus$ = {}));
/** @internal */
exports.OrderEntityType$inboundSchema = z.nativeEnum(exports.OrderEntityType);
/** @internal */
exports.OrderEntityType$outboundSchema = exports.OrderEntityType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OrderEntityType$;
(function (OrderEntityType$) {
    /** @deprecated use `OrderEntityType$inboundSchema` instead. */
    OrderEntityType$.inboundSchema = exports.OrderEntityType$inboundSchema;
    /** @deprecated use `OrderEntityType$outboundSchema` instead. */
    OrderEntityType$.outboundSchema = exports.OrderEntityType$outboundSchema;
})(OrderEntityType$ || (exports.OrderEntityType$ = OrderEntityType$ = {}));
/** @internal */
exports.OrderEntity$inboundSchema = z.object({
    id: z.string(),
    mode: exports.OrderEntityMode$inboundSchema,
    object: z.string(),
    customer: z.string().optional(),
    product: z.string(),
    transaction: z.string().optional(),
    discount: z.string().optional(),
    amount: z.number(),
    sub_total: z.number().optional(),
    tax_amount: z.number().optional(),
    discount_amount: z.number().optional(),
    amount_due: z.number().optional(),
    amount_paid: z.number().optional(),
    currency: z.string(),
    fx_amount: z.number().optional(),
    fx_currency: z.string().optional(),
    fx_rate: z.number().optional(),
    status: exports.OrderEntityStatus$inboundSchema,
    type: exports.OrderEntityType$inboundSchema,
    affiliate: z.string().optional(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "sub_total": "subTotal",
        "tax_amount": "taxAmount",
        "discount_amount": "discountAmount",
        "amount_due": "amountDue",
        "amount_paid": "amountPaid",
        "fx_amount": "fxAmount",
        "fx_currency": "fxCurrency",
        "fx_rate": "fxRate",
        "created_at": "createdAt",
        "updated_at": "updatedAt",
    });
});
/** @internal */
exports.OrderEntity$outboundSchema = z.object({
    id: z.string(),
    mode: exports.OrderEntityMode$outboundSchema,
    object: z.string(),
    customer: z.string().optional(),
    product: z.string(),
    transaction: z.string().optional(),
    discount: z.string().optional(),
    amount: z.number(),
    subTotal: z.number().optional(),
    taxAmount: z.number().optional(),
    discountAmount: z.number().optional(),
    amountDue: z.number().optional(),
    amountPaid: z.number().optional(),
    currency: z.string(),
    fxAmount: z.number().optional(),
    fxCurrency: z.string().optional(),
    fxRate: z.number().optional(),
    status: exports.OrderEntityStatus$outboundSchema,
    type: exports.OrderEntityType$outboundSchema,
    affiliate: z.string().optional(),
    createdAt: z.date().transform(v => v.toISOString()),
    updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        subTotal: "sub_total",
        taxAmount: "tax_amount",
        discountAmount: "discount_amount",
        amountDue: "amount_due",
        amountPaid: "amount_paid",
        fxAmount: "fx_amount",
        fxCurrency: "fx_currency",
        fxRate: "fx_rate",
        createdAt: "created_at",
        updatedAt: "updated_at",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var OrderEntity$;
(function (OrderEntity$) {
    /** @deprecated use `OrderEntity$inboundSchema` instead. */
    OrderEntity$.inboundSchema = exports.OrderEntity$inboundSchema;
    /** @deprecated use `OrderEntity$outboundSchema` instead. */
    OrderEntity$.outboundSchema = exports.OrderEntity$outboundSchema;
})(OrderEntity$ || (exports.OrderEntity$ = OrderEntity$ = {}));
function orderEntityToJSON(orderEntity) {
    return JSON.stringify(exports.OrderEntity$outboundSchema.parse(orderEntity));
}
function orderEntityFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.OrderEntity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'OrderEntity' from JSON`);
}
//# sourceMappingURL=orderentity.js.map