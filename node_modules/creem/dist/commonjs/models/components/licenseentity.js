"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.LicenseEntity$ = exports.LicenseEntity$outboundSchema = exports.LicenseEntity$inboundSchema = exports.Instance$ = exports.Instance$outboundSchema = exports.Instance$inboundSchema = exports.LicenseEntityInstanceStatus$ = exports.LicenseEntityInstanceStatus$outboundSchema = exports.LicenseEntityInstanceStatus$inboundSchema = exports.LicenseEntityInstanceMode$ = exports.LicenseEntityInstanceMode$outboundSchema = exports.LicenseEntityInstanceMode$inboundSchema = exports.ExpiresAt$ = exports.ExpiresAt$outboundSchema = exports.ExpiresAt$inboundSchema = exports.ActivationLimit$ = exports.ActivationLimit$outboundSchema = exports.ActivationLimit$inboundSchema = exports.LicenseEntityStatus$ = exports.LicenseEntityStatus$outboundSchema = exports.LicenseEntityStatus$inboundSchema = exports.LicenseEntityMode$ = exports.LicenseEntityMode$outboundSchema = exports.LicenseEntityMode$inboundSchema = exports.LicenseEntityInstanceStatus = exports.LicenseEntityInstanceMode = exports.LicenseEntityStatus = exports.LicenseEntityMode = void 0;
exports.activationLimitToJSON = activationLimitToJSON;
exports.activationLimitFromJSON = activationLimitFromJSON;
exports.expiresAtToJSON = expiresAtToJSON;
exports.expiresAtFromJSON = expiresAtFromJSON;
exports.instanceToJSON = instanceToJSON;
exports.instanceFromJSON = instanceFromJSON;
exports.licenseEntityToJSON = licenseEntityToJSON;
exports.licenseEntityFromJSON = licenseEntityFromJSON;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * String representing the environment.
 */
exports.LicenseEntityMode = {
    Test: "test",
    Prod: "prod",
    Sandbox: "sandbox",
};
/**
 * The current status of the license key.
 */
exports.LicenseEntityStatus = {
    Inactive: "inactive",
    Active: "active",
    Expired: "expired",
    Disabled: "disabled",
};
/**
 * String representing the environment.
 */
exports.LicenseEntityInstanceMode = {
    Test: "test",
    Prod: "prod",
    Sandbox: "sandbox",
};
/**
 * The status of the license instance.
 */
exports.LicenseEntityInstanceStatus = {
    Active: "active",
    Deactivated: "deactivated",
};
/** @internal */
exports.LicenseEntityMode$inboundSchema = z.nativeEnum(exports.LicenseEntityMode);
/** @internal */
exports.LicenseEntityMode$outboundSchema = exports.LicenseEntityMode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LicenseEntityMode$;
(function (LicenseEntityMode$) {
    /** @deprecated use `LicenseEntityMode$inboundSchema` instead. */
    LicenseEntityMode$.inboundSchema = exports.LicenseEntityMode$inboundSchema;
    /** @deprecated use `LicenseEntityMode$outboundSchema` instead. */
    LicenseEntityMode$.outboundSchema = exports.LicenseEntityMode$outboundSchema;
})(LicenseEntityMode$ || (exports.LicenseEntityMode$ = LicenseEntityMode$ = {}));
/** @internal */
exports.LicenseEntityStatus$inboundSchema = z.nativeEnum(exports.LicenseEntityStatus);
/** @internal */
exports.LicenseEntityStatus$outboundSchema = exports.LicenseEntityStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LicenseEntityStatus$;
(function (LicenseEntityStatus$) {
    /** @deprecated use `LicenseEntityStatus$inboundSchema` instead. */
    LicenseEntityStatus$.inboundSchema = exports.LicenseEntityStatus$inboundSchema;
    /** @deprecated use `LicenseEntityStatus$outboundSchema` instead. */
    LicenseEntityStatus$.outboundSchema = exports.LicenseEntityStatus$outboundSchema;
})(LicenseEntityStatus$ || (exports.LicenseEntityStatus$ = LicenseEntityStatus$ = {}));
/** @internal */
exports.ActivationLimit$inboundSchema = z.object({});
/** @internal */
exports.ActivationLimit$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ActivationLimit$;
(function (ActivationLimit$) {
    /** @deprecated use `ActivationLimit$inboundSchema` instead. */
    ActivationLimit$.inboundSchema = exports.ActivationLimit$inboundSchema;
    /** @deprecated use `ActivationLimit$outboundSchema` instead. */
    ActivationLimit$.outboundSchema = exports.ActivationLimit$outboundSchema;
})(ActivationLimit$ || (exports.ActivationLimit$ = ActivationLimit$ = {}));
function activationLimitToJSON(activationLimit) {
    return JSON.stringify(exports.ActivationLimit$outboundSchema.parse(activationLimit));
}
function activationLimitFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ActivationLimit$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ActivationLimit' from JSON`);
}
/** @internal */
exports.ExpiresAt$inboundSchema = z.object({});
/** @internal */
exports.ExpiresAt$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ExpiresAt$;
(function (ExpiresAt$) {
    /** @deprecated use `ExpiresAt$inboundSchema` instead. */
    ExpiresAt$.inboundSchema = exports.ExpiresAt$inboundSchema;
    /** @deprecated use `ExpiresAt$outboundSchema` instead. */
    ExpiresAt$.outboundSchema = exports.ExpiresAt$outboundSchema;
})(ExpiresAt$ || (exports.ExpiresAt$ = ExpiresAt$ = {}));
function expiresAtToJSON(expiresAt) {
    return JSON.stringify(exports.ExpiresAt$outboundSchema.parse(expiresAt));
}
function expiresAtFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ExpiresAt$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ExpiresAt' from JSON`);
}
/** @internal */
exports.LicenseEntityInstanceMode$inboundSchema = z.nativeEnum(exports.LicenseEntityInstanceMode);
/** @internal */
exports.LicenseEntityInstanceMode$outboundSchema = exports.LicenseEntityInstanceMode$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LicenseEntityInstanceMode$;
(function (LicenseEntityInstanceMode$) {
    /** @deprecated use `LicenseEntityInstanceMode$inboundSchema` instead. */
    LicenseEntityInstanceMode$.inboundSchema = exports.LicenseEntityInstanceMode$inboundSchema;
    /** @deprecated use `LicenseEntityInstanceMode$outboundSchema` instead. */
    LicenseEntityInstanceMode$.outboundSchema = exports.LicenseEntityInstanceMode$outboundSchema;
})(LicenseEntityInstanceMode$ || (exports.LicenseEntityInstanceMode$ = LicenseEntityInstanceMode$ = {}));
/** @internal */
exports.LicenseEntityInstanceStatus$inboundSchema = z.nativeEnum(exports.LicenseEntityInstanceStatus);
/** @internal */
exports.LicenseEntityInstanceStatus$outboundSchema = exports.LicenseEntityInstanceStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LicenseEntityInstanceStatus$;
(function (LicenseEntityInstanceStatus$) {
    /** @deprecated use `LicenseEntityInstanceStatus$inboundSchema` instead. */
    LicenseEntityInstanceStatus$.inboundSchema = exports.LicenseEntityInstanceStatus$inboundSchema;
    /** @deprecated use `LicenseEntityInstanceStatus$outboundSchema` instead. */
    LicenseEntityInstanceStatus$.outboundSchema = exports.LicenseEntityInstanceStatus$outboundSchema;
})(LicenseEntityInstanceStatus$ || (exports.LicenseEntityInstanceStatus$ = LicenseEntityInstanceStatus$ = {}));
/** @internal */
exports.Instance$inboundSchema = z.object({
    id: z.string(),
    mode: exports.LicenseEntityInstanceMode$inboundSchema,
    object: z.string(),
    name: z.string(),
    status: exports.LicenseEntityInstanceStatus$inboundSchema,
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "created_at": "createdAt",
    });
});
/** @internal */
exports.Instance$outboundSchema = z.object({
    id: z.string(),
    mode: exports.LicenseEntityInstanceMode$outboundSchema,
    object: z.string(),
    name: z.string(),
    status: exports.LicenseEntityInstanceStatus$outboundSchema,
    createdAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        createdAt: "created_at",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Instance$;
(function (Instance$) {
    /** @deprecated use `Instance$inboundSchema` instead. */
    Instance$.inboundSchema = exports.Instance$inboundSchema;
    /** @deprecated use `Instance$outboundSchema` instead. */
    Instance$.outboundSchema = exports.Instance$outboundSchema;
})(Instance$ || (exports.Instance$ = Instance$ = {}));
function instanceToJSON(instance) {
    return JSON.stringify(exports.Instance$outboundSchema.parse(instance));
}
function instanceFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Instance$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Instance' from JSON`);
}
/** @internal */
exports.LicenseEntity$inboundSchema = z.object({
    id: z.string(),
    mode: exports.LicenseEntityMode$inboundSchema,
    object: z.string(),
    status: exports.LicenseEntityStatus$inboundSchema,
    key: z.string(),
    activation: z.number(),
    activation_limit: z.nullable(z.lazy(() => exports.ActivationLimit$inboundSchema))
        .optional(),
    expires_at: z.nullable(z.lazy(() => exports.ExpiresAt$inboundSchema)).optional(),
    created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    instance: z.nullable(z.lazy(() => exports.Instance$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "activation_limit": "activationLimit",
        "expires_at": "expiresAt",
        "created_at": "createdAt",
    });
});
/** @internal */
exports.LicenseEntity$outboundSchema = z.object({
    id: z.string(),
    mode: exports.LicenseEntityMode$outboundSchema,
    object: z.string(),
    status: exports.LicenseEntityStatus$outboundSchema,
    key: z.string(),
    activation: z.number(),
    activationLimit: z.nullable(z.lazy(() => exports.ActivationLimit$outboundSchema))
        .optional(),
    expiresAt: z.nullable(z.lazy(() => exports.ExpiresAt$outboundSchema)).optional(),
    createdAt: z.date().transform(v => v.toISOString()),
    instance: z.nullable(z.lazy(() => exports.Instance$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        activationLimit: "activation_limit",
        expiresAt: "expires_at",
        createdAt: "created_at",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var LicenseEntity$;
(function (LicenseEntity$) {
    /** @deprecated use `LicenseEntity$inboundSchema` instead. */
    LicenseEntity$.inboundSchema = exports.LicenseEntity$inboundSchema;
    /** @deprecated use `LicenseEntity$outboundSchema` instead. */
    LicenseEntity$.outboundSchema = exports.LicenseEntity$outboundSchema;
})(LicenseEntity$ || (exports.LicenseEntity$ = LicenseEntity$ = {}));
function licenseEntityToJSON(licenseEntity) {
    return JSON.stringify(exports.LicenseEntity$outboundSchema.parse(licenseEntity));
}
function licenseEntityFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.LicenseEntity$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'LicenseEntity' from JSON`);
}
//# sourceMappingURL=licenseentity.js.map