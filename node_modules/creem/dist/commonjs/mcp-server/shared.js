"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.consumeStream = consumeStream;
exports.isAsyncIterable = isAsyncIterable;
exports.isBinaryData = isBinaryData;
exports.valueToBase64 = valueToBase64;
const z = __importStar(require("zod"));
const base64_js_1 = require("../lib/base64.js");
async function consumeStream(stream) {
    const reader = stream.getReader();
    const chunks = [];
    try {
        while (true) {
            const { done, value } = await reader.read();
            if (value != null)
                chunks.push(value);
            if (done)
                break;
        }
    }
    finally {
        reader.releaseLock();
    }
    return new Uint8Array(await new Blob(chunks).arrayBuffer());
}
function isAsyncIterable(value) {
    return (typeof value === "object" && value != null && Symbol.asyncIterator in value);
}
function isBinaryData(value) {
    return (value instanceof Uint8Array
        || value instanceof ArrayBuffer
        || value instanceof Blob
        || value instanceof ReadableStream
        || value instanceof Response
        || typeof value === "string");
}
const base64Schema = z.string().base64();
async function valueToBase64(value) {
    if (value == null) {
        return null;
    }
    else if (value instanceof Uint8Array) {
        return (0, base64_js_1.bytesToBase64)(value);
    }
    else if (value instanceof ArrayBuffer) {
        return (0, base64_js_1.bytesToBase64)(new Uint8Array(value));
    }
    else if (value instanceof Response || value instanceof Blob) {
        return (0, base64_js_1.bytesToBase64)(new Uint8Array(await value.arrayBuffer()));
    }
    else if (value instanceof ReadableStream) {
        return (0, base64_js_1.bytesToBase64)(await consumeStream(value));
    }
    else if (typeof value === "string") {
        return base64Schema.parse(value);
    }
    else {
        value;
        throw new Error(`Unsupported image value type: ${typeof value}`);
    }
}
//# sourceMappingURL=shared.js.map