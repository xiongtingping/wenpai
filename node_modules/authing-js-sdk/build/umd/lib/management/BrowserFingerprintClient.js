var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BrowserFingerprintClient = void 0;
    var BrowserFingerprintClient = /** @class */ (function () {
        function BrowserFingerprintClient(options, httpClient, tokenProvider) {
            this.options = options;
            this.tokenProvider = tokenProvider;
            this.httpClient = httpClient;
        }
        /**
         * 设备管理 - 列表
         * @param options
         * @returns
         */
        BrowserFingerprintClient.prototype.getDeviceList = function (options) {
            if (options === void 0) { options = {
                page: 1,
                limit: 10
            }; }
            return __awaiter(this, void 0, void 0, function () {
                var page, limit, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            page = options.page, limit = options.limit;
                            return [4 /*yield*/, this.httpClient.request({
                                    method: 'POST',
                                    url: "".concat(this.options.host, "/api/v3/metadata/filter"),
                                    data: {
                                        "modelId": "device",
                                        "showFieldId": false,
                                        "previewRelation": true,
                                        page: page,
                                        limit: limit
                                    }
                                })];
                        case 1:
                            data = _a.sent();
                            return [2 /*return*/, {
                                    data: data.list,
                                    totalCount: data.totalCount,
                                }];
                    }
                });
            });
        };
        /**
         * 设备管理 - 详情
         * @param id
         * @returns
         */
        BrowserFingerprintClient.prototype.getDeviceDetails = function (id) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.httpClient.request({
                                method: 'GET',
                                url: "".concat(this.options.host, "/api/v3/metadata/get-row?modelId=device&rowId=").concat(id, "&showFieldId=false"),
                            })];
                        case 1:
                            data = _a.sent();
                            return [2 /*return*/, data];
                    }
                });
            });
        };
        /**
         * 设备管理 - 设备状态
         * @param id
         * @returns
         */
        BrowserFingerprintClient.prototype.getDeviceStatus = function (id) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.httpClient.request({
                                method: 'POST',
                                url: "".concat(this.options.host, "/api/v3/device-status"),
                                data: { id: id }
                            })];
                        case 1:
                            data = _a.sent();
                            return [2 /*return*/, data];
                    }
                });
            });
        };
        /**
         * 设备管理 - 移除设备
         * @param id
         * @returns
         */
        BrowserFingerprintClient.prototype.delDevice = function (id) {
            return __awaiter(this, void 0, void 0, function () {
                var error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.httpClient.request({
                                    method: 'POST',
                                    url: "".concat(this.options.host, "/api/v3/delete-device"),
                                    data: { id: id }
                                })];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, true];
                        case 2:
                            error_1 = _a.sent();
                            return [2 /*return*/, false];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * 设备管理 - 禁用设备
         * @param id
         * @returns
         */
        BrowserFingerprintClient.prototype.disableDevice = function (id) {
            return __awaiter(this, void 0, void 0, function () {
                var error_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.httpClient.request({
                                    method: 'POST',
                                    url: "".concat(this.options.host, "/api/v3/disable-device"),
                                    data: { id: id }
                                })];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, true];
                        case 2:
                            error_2 = _a.sent();
                            return [2 /*return*/, false];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * 设备管理 - 启用设备
         * @param id
         * @returns
         */
        BrowserFingerprintClient.prototype.enableDevice = function (id) {
            return __awaiter(this, void 0, void 0, function () {
                var error_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.httpClient.request({
                                    method: 'POST',
                                    url: "".concat(this.options.host, "/api/v3/enable-device"),
                                    data: { id: id }
                                })];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, true];
                        case 2:
                            error_3 = _a.sent();
                            return [2 /*return*/, false];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * 设备管理 - 挂起设备
         * @param id
         * @param endTime
         * @returns
         */
        BrowserFingerprintClient.prototype.suspendDevice = function (id, endTime) {
            return __awaiter(this, void 0, void 0, function () {
                var error_4;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.httpClient.request({
                                    method: 'POST',
                                    url: "".concat(this.options.host, "/api/v3/suspend-device"),
                                    data: { id: id, endTime: endTime }
                                })];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, true];
                        case 2:
                            error_4 = _a.sent();
                            return [2 /*return*/, false];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * 用户中心 - 列表
         * @param options
         * @returns
         */
        BrowserFingerprintClient.prototype.getDeviceUserList = function (options) {
            if (options === void 0) { options = {
                page: 1,
                limit: 10
            }; }
            return __awaiter(this, void 0, void 0, function () {
                var userId, page, limit, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            userId = options.userId, page = options.page, limit = options.limit;
                            return [4 /*yield*/, this.httpClient.request({
                                    method: 'POST',
                                    url: "".concat(this.options.host, "/api/v3/get-user-devices?userId=").concat(userId),
                                    data: {
                                        "modelId": "device_rely",
                                        "showFieldId": false,
                                        "previewRelation": true,
                                        // userId,
                                        page: page,
                                        limit: limit
                                    }
                                })];
                        case 1:
                            data = _a.sent();
                            return [2 /*return*/, {
                                    data: data.list,
                                    totalCount: data.totalCount,
                                }];
                    }
                });
            });
        };
        /**
         * 用户中心 - 移除设备
         * @param id
         * @returns
         */
        BrowserFingerprintClient.prototype.delDeviceUser = function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var userId, id, error_5;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            userId = options.userId, id = options.id;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.httpClient.request({
                                    method: 'POST',
                                    url: "".concat(this.options.host, "/api/v3/delete-device-by-user"),
                                    data: { id: id, userId: userId }
                                })];
                        case 2:
                            _a.sent();
                            return [2 /*return*/, true];
                        case 3:
                            error_5 = _a.sent();
                            return [2 /*return*/, false];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * 用户中心 - 禁用设备
         * @param id
         * @returns
         */
        BrowserFingerprintClient.prototype.disableDeviceUser = function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var userId, id, error_6;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            userId = options.userId, id = options.id;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.httpClient.request({
                                    method: 'POST',
                                    url: "".concat(this.options.host, "/api/v3/disable-device-by-user"),
                                    data: { id: id, userId: userId }
                                })];
                        case 2:
                            _a.sent();
                            return [2 /*return*/, true];
                        case 3:
                            error_6 = _a.sent();
                            return [2 /*return*/, false];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * 用户中心 - 启用设备
         * @param id
         * @returns
         */
        BrowserFingerprintClient.prototype.enableDeviceUser = function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var userId, id, error_7;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            userId = options.userId, id = options.id;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.httpClient.request({
                                    method: 'POST',
                                    url: "".concat(this.options.host, "/api/v3/enable-device-by-user"),
                                    data: { id: id, userId: userId }
                                })];
                        case 2:
                            _a.sent();
                            return [2 /*return*/, true];
                        case 3:
                            error_7 = _a.sent();
                            return [2 /*return*/, false];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * 用户中心 - 挂起设备
         * @param userId
         * @param id
         * @param endTime
         * @returns
         */
        BrowserFingerprintClient.prototype.suspendDeviceUser = function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var userId, id, endTime, error_8;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            userId = options.userId, id = options.id, endTime = options.endTime;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.httpClient.request({
                                    method: 'POST',
                                    url: "".concat(this.options.host, "/api/v3/suspend-device-by-user"),
                                    data: { id: id, endTime: endTime, userId: userId }
                                })];
                        case 2:
                            _a.sent();
                            return [2 /*return*/, true];
                        case 3:
                            error_8 = _a.sent();
                            return [2 /*return*/, false];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        return BrowserFingerprintClient;
    }());
    exports.BrowserFingerprintClient = BrowserFingerprintClient;
});
//# sourceMappingURL=BrowserFingerprintClient.js.map