var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@fingerprintjs/fingerprintjs"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getWebGLValues = exports.getBrowserInfo = exports.handleFingerprint = exports.getAppCodeName = exports.getBrowserVersion = exports.getUserOsInfo = exports.getScreenHeight = exports.getScreenWidth = exports.getScreenColorDepth = exports.getMimeTypeCount = exports.getBrowserMimeTypeCount = exports.getBrowserProductSub = exports.getBrowserProduct = exports.getInstalledPlugins = exports.getBrowserVendor = exports.getBrowserOnline = exports.getBrowserCookieEnabled = exports.getBrowserMimeTypesLength = exports.getBrowserMimeTypes = exports.BrowserInfoFun = void 0;
    var fingerprintjs_1 = __importDefault(require("@fingerprintjs/fingerprintjs"));
    var BrowserInfoFun = function () { return __awaiter(void 0, void 0, void 0, function () {
        var _a, pluginCount, pluginList;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, (0, exports.getInstalledPlugins)()];
                case 1:
                    _a = _b.sent(), pluginCount = _a.pluginCount, pluginList = _a.pluginList;
                    return [2 /*return*/, {
                            //客户端系统
                            os: getUserOsInfo(),
                            //浏览器版本信息
                            version: getBrowserVersion(),
                            //浏览器代码名称
                            appCodeName: getAppCodeName(),
                            //浏览器厂家信息
                            vendor: getBrowserVendor(),
                            //显示器高度
                            screenHeight: getScreenHeight(),
                            //显示器宽度
                            screenWidth: getScreenWidth(),
                            //屏幕设置色彩位数
                            colorDepth: getScreenColorDepth(),
                            //浏览器产品名称
                            product: getBrowserProduct(),
                            //浏览器默认语言
                            language: navigator.language,
                            //浏览器是否连接到网络
                            onLine: getBrowserOnline(),
                            //浏览器MIME支持类型列表
                            mimeTypes: getBrowserMimeTypes(),
                            //浏览器的MIME类型数量
                            mimeTypesLength: getBrowserMimeTypesLength(),
                            //浏览器产品其他信息
                            productSub: getBrowserProductSub(),
                            //浏览器是否开启cookie
                            cookie: getBrowserCookieEnabled(),
                            //浏览器安装插件数量
                            pluginsLength: pluginCount,
                            //浏览器安装插件信息列表
                            plugins: pluginList,
                            //浏览器 userAgent
                            userAgent: navigator.userAgent,
                            //设备类型
                            type: 'Browser',
                        }];
            }
        });
    }); };
    exports.BrowserInfoFun = BrowserInfoFun;
    /**
     * 浏览器MIME支持类型列表
     * @returns
     */
    function getBrowserMimeTypes() {
        var mimeTypes = navigator.mimeTypes;
        var supportedTypes = [];
        for (var i = 0; i < mimeTypes.length; i++) {
            var mimeType = mimeTypes[i];
            supportedTypes.push({
                type: mimeType.type,
                description: mimeType.description,
                suffixes: mimeType.suffixes
            });
        }
        return JSON.stringify(supportedTypes);
    }
    exports.getBrowserMimeTypes = getBrowserMimeTypes;
    /**
     * 浏览器的MIME类型数量
     * @returns
     */
    function getBrowserMimeTypesLength() {
        if (navigator.mimeTypes.length) {
            return navigator.mimeTypes.length;
        }
        return 0;
    }
    exports.getBrowserMimeTypesLength = getBrowserMimeTypesLength;
    /**
     * 浏览器是否开启cookie
     * @returns
     */
    function getBrowserCookieEnabled() {
        if (navigator.cookieEnabled) {
            return navigator.cookieEnabled;
        }
        document.cookie = '__testAuthingCookie=1';
        var cookieEnabled = document.cookie.indexOf('__testAuthingCookie=') !== -1;
        document.cookie =
            '__testAuthingCookie=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
        return cookieEnabled;
    }
    exports.getBrowserCookieEnabled = getBrowserCookieEnabled;
    /**
     * 浏览器是否连接到网络
     * @returns
     */
    function getBrowserOnline() {
        if (navigator.onLine) {
            return navigator.onLine;
        }
        return true;
    }
    exports.getBrowserOnline = getBrowserOnline;
    /**
     * 浏览器产品其他信息
     * @returns
     */
    function getBrowserVendor() {
        var userAgent = navigator.userAgent;
        var browserVendor = 'Unknown';
        if (userAgent.includes('Chrome')) {
            browserVendor = 'Google';
        }
        else if (userAgent.includes('Firefox')) {
            browserVendor = 'Mozilla';
        }
        else if (userAgent.includes('Trident') || userAgent.includes('MSIE')) {
            browserVendor = 'Microsoft';
        }
        else if (userAgent.includes('Edge')) {
            browserVendor = 'Microsoft (EdgeHTML)';
        }
        else if (userAgent.includes('Edg')) {
            browserVendor = 'Microsoft (Chromium)';
        }
        else if (userAgent.includes('Safari')) {
            browserVendor = 'Apple';
        }
        return browserVendor;
    }
    exports.getBrowserVendor = getBrowserVendor;
    /**
     * 浏览器产品其他信息
     * @returns
     */
    var getInstalledPlugins = function () {
        return new Promise(function (resolve) { return __awaiter(void 0, void 0, void 0, function () {
            var fp, result, pluginCount, pluginList;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fingerprintjs_1.default.load()];
                    case 1:
                        fp = _a.sent();
                        return [4 /*yield*/, fp.get()];
                    case 2:
                        result = _a.sent();
                        pluginCount = result.components.plugins.value.length;
                        pluginList = result.components.plugins.value;
                        resolve({ pluginCount: pluginCount, pluginList: JSON.stringify(pluginList) });
                        return [2 /*return*/];
                }
            });
        }); });
    };
    exports.getInstalledPlugins = getInstalledPlugins;
    /**
     * 浏览器产品名称
     * @returns
     */
    function getBrowserProduct() {
        var userAgent = navigator.userAgent;
        var browserProduct = 'Unknown';
        if (userAgent.indexOf('Trident') !== -1) {
            browserProduct = 'Trident';
        }
        else if (userAgent.indexOf('Gecko') !== -1 &&
            userAgent.indexOf('KHTML') === -1) {
            browserProduct = 'Gecko';
        }
        else if (userAgent.indexOf('WebKit') !== -1) {
            browserProduct = 'WebKit';
        }
        else if (userAgent.indexOf('Blink') !== -1) {
            browserProduct = 'Blink';
        }
        return browserProduct;
    }
    exports.getBrowserProduct = getBrowserProduct;
    /**
     * 浏览器产品其他信息
     * @returns
     */
    function getBrowserProductSub() {
        var userAgent = navigator.userAgent;
        if (userAgent.includes('Firefox')) {
            return "20030107";
        }
        else if (userAgent.includes('Chrome')) {
            return "20030107";
        }
        else if (userAgent.includes('Trident') || userAgent.includes('MSIE')) {
            return "20000101";
        }
        else {
            return "0";
        }
    }
    exports.getBrowserProductSub = getBrowserProductSub;
    // 根据不同浏览器类型返回MIME类型数量
    function getBrowserMimeTypeCount() {
        var userAgent = navigator.userAgent.toLowerCase();
        if (userAgent.indexOf('msie') !== -1 || userAgent.indexOf('trident') !== -1) {
            return 0;
        }
        else if (userAgent.indexOf('firefox') !== -1) {
            var mimeTypeCount = getMimeTypeCount();
            return mimeTypeCount;
        }
        else if (userAgent.indexOf('chrome') !== -1 ||
            userAgent.indexOf('crios') !== -1) {
            var mimeTypeCount = getMimeTypeCount();
            return mimeTypeCount;
        }
        else if (userAgent.indexOf('safari') !== -1) {
            var mimeTypeCount = getMimeTypeCount();
            return mimeTypeCount;
        }
        else {
            return 0;
        }
    }
    exports.getBrowserMimeTypeCount = getBrowserMimeTypeCount;
    // 获取浏览器的MIME类型数量
    function getMimeTypeCount() {
        if (typeof navigator.mimeTypes === 'undefined') {
            return 0;
        }
        navigator.mimeTypes.length;
        return navigator.mimeTypes.length;
    }
    exports.getMimeTypeCount = getMimeTypeCount;
    /**
     * 显示器宽度
     * @returns
     */
    function getScreenColorDepth() {
        var colorDepth = window.screen.colorDepth || window.screen.pixelDepth;
        if (navigator.userAgent.indexOf('Chrome') !== -1) {
            return colorDepth * window.devicePixelRatio;
        }
        else if (navigator.userAgent.indexOf('Firefox') !== -1) {
            return colorDepth;
        }
        else if (navigator.userAgent.indexOf('Trident') !== -1) {
            // @ts-ignore
            return screen.deviceXDPI;
        }
        else {
            return colorDepth;
        }
    }
    exports.getScreenColorDepth = getScreenColorDepth;
    /**
     * 显示器宽度
     * @returns
     */
    function getScreenWidth() {
        var screenWidth = 0;
        if (typeof window.innerWidth === 'number') {
            screenWidth = window.innerWidth;
        }
        else if (document.documentElement && document.documentElement.clientWidth) {
            screenWidth = document.documentElement.clientWidth;
        }
        else if (document.body && document.body.clientWidth) {
            screenWidth = document.body.clientWidth;
        }
        return screenWidth;
    }
    exports.getScreenWidth = getScreenWidth;
    /**
     * 显示器高度
     * @returns
     */
    function getScreenHeight() {
        if (navigator.userAgent.indexOf('Chrome') !== -1) {
            return window.screen.height;
        }
        else if (navigator.userAgent.indexOf('Firefox') !== -1) {
            return window.screen.height;
        }
        else if (navigator.userAgent.indexOf('Trident') !== -1 ||
            navigator.userAgent.indexOf('MSIE') !== -1) {
            return screen.height;
        }
        else {
            return window.innerHeight;
        }
    }
    exports.getScreenHeight = getScreenHeight;
    /**
     * 客户端系统
     * @returns
     */
    function getUserOsInfo() {
        var userAgent = navigator.userAgent;
        if (userAgent.indexOf('Windows NT 10.0') !== -1)
            return 'Windows 10';
        if (userAgent.indexOf('Windows NT 6.2') !== -1)
            return 'Windows 8';
        if (userAgent.indexOf('Windows NT 6.1') !== -1)
            return 'Windows 7';
        if (userAgent.indexOf('Windows NT 6.0') !== -1)
            return 'Windows Vista';
        if (userAgent.indexOf('Windows NT 5.1') !== -1)
            return 'Windows XP';
        if (userAgent.indexOf('Windows NT 5.0') !== -1)
            return 'Windows 2000';
        if (userAgent.indexOf('Mac') !== -1)
            return 'Mac OS';
        if (userAgent.indexOf('X11') !== -1)
            return 'UNIX';
        if (userAgent.indexOf('Linux') !== -1)
            return 'Linux';
        return 'Other';
    }
    exports.getUserOsInfo = getUserOsInfo;
    /**
     * 设备系统版本
     * @returns
     */
    function getBrowserVersion() {
        var userAgent = navigator.userAgent;
        var version = 'Unknown';
        if (/Chrome\/([\d.]+)/.test(userAgent)) {
            version = userAgent.match(/Chrome\/([\d.]+)/)[1];
        }
        else if (/Firefox\/([\d.]+)/.test(userAgent)) {
            version = userAgent.match(/Firefox\/([\d.]+)/)[1];
        }
        else if (/MSIE ([\d.]+)/.test(userAgent)) {
            version = userAgent.match(/MSIE ([\d.]+)/)[1];
        }
        else if (/Trident\/[\d](?:[\d.]+)?; rv:([0-9.]+)/.test(userAgent)) {
            version = userAgent.match(/Trident\/[\d](?:[\d.]+)?; rv:([0-9.]+)/)[1];
        }
        return version;
    }
    exports.getBrowserVersion = getBrowserVersion;
    /**
     * 浏览器代码名称
     * @returns
     */
    function getAppCodeName() {
        var userAgent = navigator.userAgent;
        var browserCodeName = 'Unknown';
        if (userAgent.indexOf('Chrome') !== -1) {
            browserCodeName = 'Chrome';
        }
        else if (userAgent.indexOf('Firefox') !== -1) {
            browserCodeName = 'Firefox';
        }
        else if (userAgent.indexOf('Safari') !== -1) {
            browserCodeName = 'Safari';
        }
        else if (userAgent.indexOf('Edge') !== -1) {
            browserCodeName = 'Edge';
        }
        else if (userAgent.indexOf('Trident') !== -1) {
            browserCodeName = 'Internet Explorer';
        }
        return browserCodeName;
    }
    exports.getAppCodeName = getAppCodeName;
    var handleFingerprint = function (localDeviceFingersObj) {
        var fingerObj = {
            userAgentFingerprint: localDeviceFingersObj.userAgent,
            audioFingerprint: localDeviceFingersObj.audio,
            canvasFingerprint: localDeviceFingersObj.canvas,
            screenResolutionFingerprint: localDeviceFingersObj.screenResolution,
            webglFingerprint: localDeviceFingersObj.webgl,
            fontsFingerprint: localDeviceFingersObj.fonts,
            pluginsFingerprint: localDeviceFingersObj.plugins
        };
        return fingerObj;
    };
    exports.handleFingerprint = handleFingerprint;
    var getBrowserInfo = function () {
        var agent = navigator.userAgent.toLowerCase(); // 获取浏览器信息
        var regStr_ie = /msie [\d.]+;/gi; // 处理IE浏览器   msie IE浏览器简称MSIE
        var regStr_ff = /firefox\/[\d.]+/gi; // 处理火狐浏览器
        var regStr_chrome = /chrome\/[\d.]+/gi; // 处理谷歌浏览器
        var regStr_Edg = /edg\/[\d.]+/gi; // 处理Edg浏览器
        var regStr_saf = /safari\/[\d.]+/gi; // 处理safari浏览器
        var regStr_safVersion = /version\/[\d.]+/gi; // 处理safari浏览器
        //IE浏览器
        if (agent.indexOf('msie') > 0) {
            return agent.match(regStr_ie);
        }
        //firefox浏览器
        if (agent.indexOf('firefox') > 0) {
            return agent.match(regStr_ff);
        }
        //Edg浏览器
        if (agent.indexOf('edg') > 0) {
            return agent.match(regStr_Edg);
        }
        //Chrome浏览器
        if (agent.indexOf('chrome') > 0) {
            return agent.match(regStr_chrome);
        }
        //Safari浏览器
        if (agent.indexOf('safari') > 0 && agent.indexOf('chrome') < 0) {
            var bro = agent.match(regStr_saf)[0].split('/')[0];
            var ver = agent.match(regStr_safVersion)[0].split('/')[1];
            var user = bro + '/' + ver;
            return [user];
        }
    };
    exports.getBrowserInfo = getBrowserInfo;
    var getWebGLValues = function () {
        var canvas = document.createElement('canvas');
        var gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
        if (!gl) {
            return '';
        }
        var webGLValues = {
            // @ts-ignore
            renderer: gl.getParameter(gl.RENDERER),
            // @ts-ignore
            vendor: gl.getParameter(gl.VENDOR),
            // @ts-ignore
            version: gl.getParameter(gl.VERSION),
            // @ts-ignore
            shadingLanguageVersion: gl.getParameter(gl.SHADING_LANGUAGE_VERSION),
            // @ts-ignore
            maxVertexAttributes: gl.getParameter(gl.MAX_VERTEX_ATTRIBS),
            // @ts-ignore
            maxTextureSize: gl.getParameter(gl.MAX_TEXTURE_SIZE),
            // 可根据需要添加其他属性
        };
        return webGLValues;
    };
    exports.getWebGLValues = getWebGLValues;
});
//# sourceMappingURL=browserInfo.js.map