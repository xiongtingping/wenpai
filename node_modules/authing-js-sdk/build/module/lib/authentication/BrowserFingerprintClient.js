var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { createFingerprint } from '../utils';
import { handleFingerprint, BrowserInfoFun, getBrowserInfo } from '../browserInfo';
import { BaseAuthenticationClient } from './BaseAuthenticationClient';
var BrowserFingerprintClient = /** @class */ (function () {
    function BrowserFingerprintClient(options, httpClient) {
        this.baseClient = new BaseAuthenticationClient(options);
        this.options = options;
        this.httpClient = httpClient;
    }
    /**
     *
     *获取浏览器指纹信息
     * @returns 返回浏览器的各种指纹信息
     * @memberof BrowserFingerprintClient
     */
    BrowserFingerprintClient.prototype.getBrowserFingers = function () {
        return __awaiter(this, void 0, void 0, function () {
            var localBrowserId, localDeviceFingers, localDeviceFingersObj, _a, browserId, deviceFingers;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        localBrowserId = localStorage.getItem('browserId');
                        localDeviceFingers = localStorage.getItem('deviceFingers');
                        localDeviceFingersObj = localDeviceFingers && JSON.parse(localDeviceFingers);
                        if (!(!localBrowserId || !localDeviceFingers)) return [3 /*break*/, 2];
                        return [4 /*yield*/, createFingerprint()];
                    case 1:
                        _a = _b.sent(), browserId = _a.browserId, deviceFingers = _a.deviceFingers;
                        localBrowserId = browserId;
                        localDeviceFingersObj = deviceFingers;
                        _b.label = 2;
                    case 2: return [2 /*return*/, { browserId: localBrowserId, deviceFingers: handleFingerprint(localDeviceFingersObj) }];
                }
            });
        });
    };
    /**
     * 获取设备信息，汇总指纹及Navigator上的信息
     * @returns 返回带有设备信息的Promise
     */
    BrowserFingerprintClient.prototype.getDeviceInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            var browserFingers;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBrowserFingers()];
                    case 1:
                        browserFingers = _a.sent();
                        return [2 /*return*/, __assign({}, browserFingers)];
                }
            });
        });
    };
    /**
     * 上报设备信息
     * @returns
     */
    BrowserFingerprintClient.prototype.createDevice = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var _b, browserId, deviceFingers, browserFingers, BrowserInfo, error_1;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _c.trys.push([0, 4, , 5]);
                        return [4 /*yield*/, this.getBrowserFingers()];
                    case 1:
                        _b = _c.sent(), browserId = _b.browserId, deviceFingers = _b.deviceFingers;
                        browserFingers = __assign({ browserId: browserId }, deviceFingers);
                        return [4 /*yield*/, BrowserInfoFun()];
                    case 2:
                        BrowserInfo = _c.sent();
                        return [4 /*yield*/, this.httpClient.request({
                                method: 'POST',
                                url: "".concat(this.baseClient.appHost, "/api/v3/create-device"),
                                data: __assign(__assign({ deviceUniqueId: browserFingers.browserId, name: (_a = getBrowserInfo()) === null || _a === void 0 ? void 0 : _a.toString() }, BrowserInfo), browserFingers)
                            })];
                    case 3:
                        _c.sent();
                        return [2 /*return*/, true];
                    case 4:
                        error_1 = _c.sent();
                        return [2 /*return*/, false];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 用户中心 - 列表
     * @returns {Promise<MyDevicesList[]>}
     */
    BrowserFingerprintClient.prototype.myDevicesList = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.httpClient.request({
                            method: 'GET',
                            url: "".concat(this.baseClient.appHost, "/api/v3/mydevices/list"),
                        })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * 用户中心 - 移除设备
     * @param deviceId
     * @returns {Promise<boolean>}
     */
    BrowserFingerprintClient.prototype.myDevicesUnbind = function (deviceId) {
        return __awaiter(this, void 0, void 0, function () {
            var error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.httpClient.request({
                                method: 'POST',
                                url: "".concat(this.baseClient.appHost, "/api/v3/mydevices/unbind"),
                                data: { deviceId: deviceId }
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, true];
                    case 2:
                        error_2 = _a.sent();
                        return [2 /*return*/, false];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 用户中心 - 登出设备
     * @param deviceId
     * @returns {Promise<boolean>}
     */
    BrowserFingerprintClient.prototype.myDevicesLogout = function (deviceId) {
        return __awaiter(this, void 0, void 0, function () {
            var error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.httpClient.request({
                                method: 'POST',
                                url: "".concat(this.baseClient.appHost, "/api/v3/mydevices/revoke-session"),
                                data: { deviceId: deviceId }
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, true];
                    case 2:
                        error_3 = _a.sent();
                        return [2 /*return*/, false];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return BrowserFingerprintClient;
}());
export { BrowserFingerprintClient };
//# sourceMappingURL=BrowserFingerprintClient.js.map