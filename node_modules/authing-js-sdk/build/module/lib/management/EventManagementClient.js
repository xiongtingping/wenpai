var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { SDK_VERSION } from '../version';
// import { buildAuthorization, buildStringToSign } from "../buildSignature";
var EventManagementClient = /** @class */ (function () {
    function EventManagementClient(options, 
    // graphqlClient: GraphqlClient,
    httpClient, tokenProvider) {
        this.options = options;
        // this.graphqlClient = graphqlClient;
        this.tokenProvider = tokenProvider;
        this.httpClient = httpClient;
        this.wsMap = {};
        this.eventBus = {};
    }
    EventManagementClient.prototype.reconnect = function (eventName) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.options.retryTimes && _this.wsMap[eventName].timeConnect < _this.options.retryTimes) {
                if (!_this.wsMap[eventName].lockConnect) {
                    _this.wsMap[eventName].lockConnect = true;
                    _this.wsMap[eventName].timeConnect++;
                    setTimeout(function () {
                        _this.wsMap[eventName].lockConnect = false;
                        _this.initWebSocket(eventName, true).then(function () {
                            resolve(true);
                        }).catch(function (e) {
                            reject(e);
                        });
                    }, 2000);
                }
            }
            else {
                reject("socket \u670D\u52A1\u5668\u8FDE\u63A5\u8D85\u65F6");
            }
        });
    };
    EventManagementClient.prototype.initWebSocket = function (eventName, retry) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var token;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(!this.wsMap[eventName] || retry)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.tokenProvider.getToken()];
                    case 1:
                        token = _a.sent();
                        this.wsMap[eventName] = {
                            socket: new WebSocket("".concat(this.options.socketUri, "/events/v1/management/sub?code=").concat(eventName, "&token=").concat(token)),
                            timeConnect: retry ? this.wsMap[eventName].timeConnect : 0,
                            lockConnect: false
                        };
                        this.wsMap[eventName].socket.onopen = function () {
                            resolve(true);
                        };
                        this.wsMap[eventName].socket.addEventListener('message', function (event) {
                            try {
                                if (_this.eventBus[eventName]) {
                                    _this.eventBus[eventName].forEach(function (callback) {
                                        callback[0](event.data.toString("utf8"));
                                    });
                                }
                                else {
                                    // 未订阅事件
                                    console.warn("未订阅的事件：", eventName);
                                }
                            }
                            catch (error) {
                                return reject("\u6570\u636E\u683C\u5F0F\u5316\u9519\u8BEF\uFF0C\u68C0\u67E5\u4F20\u8F93\u6570\u636E\u683C\u5F0F\uFF01\uFF01\uFF01 ".concat(error));
                            }
                        });
                        this.wsMap[eventName].socket.addEventListener('error', function (e) { return __awaiter(_this, void 0, void 0, function () {
                            var error_1;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        _a.trys.push([0, 2, , 3]);
                                        return [4 /*yield*/, this.reconnect(eventName)];
                                    case 1:
                                        _a.sent();
                                        resolve(true);
                                        return [3 /*break*/, 3];
                                    case 2:
                                        error_1 = _a.sent();
                                        return [2 /*return*/, reject("socket \u8FDE\u63A5\u5F02\u5E38\uFF1A".concat(JSON.stringify(e)))];
                                    case 3: return [2 /*return*/];
                                }
                            });
                        }); });
                        this.wsMap[eventName].socket.onclose = function () { return __awaiter(_this, void 0, void 0, function () {
                            var error_2;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        _a.trys.push([0, 2, , 3]);
                                        return [4 /*yield*/, this.reconnect(eventName)];
                                    case 1:
                                        _a.sent();
                                        resolve(true);
                                        return [3 /*break*/, 3];
                                    case 2:
                                        error_2 = _a.sent();
                                        return [2 /*return*/, reject('socket 服务器连接超时')];
                                    case 3: return [2 /*return*/];
                                }
                            });
                        }); };
                        return [3 /*break*/, 3];
                    case 2:
                        resolve(true);
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        }); });
    };
    EventManagementClient.prototype.sub = function (eventName, callback, errCallback) {
        var _this = this;
        /**
         * 1. 判断是否连接 socket
         * 2. 获取 socket 实例
         * 3. 订阅
         */
        if (typeof eventName !== 'string') {
            throw new Error("订阅事件名称为 string 类型！！！");
        }
        if (typeof callback !== 'function') {
            throw new Error("订阅事件回调函数需要为 function 类型！！！");
        }
        if (!this.options.socketUri) {
            throw new Error("订阅事件需要添加 socketUri 连接地址！！！");
        }
        this.initWebSocket(eventName).catch(function (e) {
            _this.eventBus[eventName].forEach(function (item) {
                var _a;
                (_a = item[1]) === null || _a === void 0 ? void 0 : _a.call(item, e);
            });
        });
        if (this.eventBus[eventName]) {
            this.eventBus[eventName].push([callback, errCallback]);
        }
        else {
            this.eventBus[eventName] = [[callback, errCallback]];
        }
    };
    EventManagementClient.prototype.pub = function (eventName, data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (typeof eventName !== 'string') {
                            throw new Error("事件名称为 string 类型！！！");
                        }
                        if (typeof data !== 'string') {
                            throw new Error("发布数据为 string 类型！！！");
                        }
                        return [4 /*yield*/, this.httpClient.request({
                                method: "POST",
                                url: "".concat(this.options.host, "/api/v3/pub-event"),
                                data: {
                                    eventType: eventName,
                                    source: "authing-js-sdk: ".concat(SDK_VERSION),
                                    eventData: data
                                },
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return EventManagementClient;
}());
export { EventManagementClient };
//# sourceMappingURL=EventManagementClient.js.map