{
  "version": 3,
  "sources": ["../../creem/src/lib/url.ts", "../../creem/src/lib/config.ts", "../../creem/src/lib/files.ts", "../../creem/src/lib/base64.ts", "../../creem/src/lib/is-plain-object.ts", "../../creem/src/lib/encodings.ts", "../../creem/src/models/errors/apierror.ts", "../../creem/src/lib/http.ts", "../../creem/src/models/errors/sdkvalidationerror.ts", "../../creem/src/types/fp.ts", "../../creem/src/lib/schemas.ts", "../../creem/src/lib/matchers.ts", "../../creem/src/lib/primitives.ts", "../../creem/src/models/components/activatelicenserequestentity.ts", "../../creem/src/models/components/customerentity.ts", "../../creem/src/models/components/text.ts", "../../creem/src/models/components/customfield.ts", "../../creem/src/models/components/orderentity.ts", "../../creem/src/models/components/featureentity.ts", "../../creem/src/models/components/productentity.ts", "../../creem/src/models/components/licenseentity.ts", "../../creem/src/models/components/productfeatureentity.ts", "../../creem/src/models/components/subscriptionitementity.ts", "../../creem/src/models/components/transactionentity.ts", "../../creem/src/models/components/subscriptionentity.ts", "../../creem/src/models/components/checkoutentity.ts", "../../creem/src/models/components/customerrequestentity.ts", "../../creem/src/models/components/customfieldrequestentity.ts", "../../creem/src/models/components/createcheckoutrequest.ts", "../../creem/src/models/components/createcustomerportallinkrequestentity.ts", "../../creem/src/models/components/creatediscountrequestentity.ts", "../../creem/src/models/components/createproductrequestentity.ts", "../../creem/src/models/components/customerlinksentity.ts", "../../creem/src/models/components/deactivatelicenserequestentity.ts", "../../creem/src/models/components/discountentity.ts", "../../creem/src/models/components/paginationentity.ts", "../../creem/src/models/components/productlistentity.ts", "../../creem/src/models/components/transactionlistentity.ts", "../../creem/src/models/components/upsertsubscriptionitementity.ts", "../../creem/src/models/components/updatesubscriptionrequestentity.ts", "../../creem/src/models/components/upgradesubscriptionrequestentity.ts", "../../creem/src/models/components/validatelicenserequestentity.ts", "../../creem/src/models/operations/activatelicense.ts", "../../creem/src/models/operations/cancelsubscription.ts", "../../creem/src/models/operations/createcheckout.ts", "../../creem/src/models/operations/creatediscount.ts", "../../creem/src/models/operations/createproduct.ts", "../../creem/src/models/operations/deactivatelicense.ts", "../../creem/src/models/operations/deletediscount.ts", "../../creem/src/models/operations/generatecustomerlinks.ts", "../../creem/src/models/operations/retrievecheckout.ts", "../../creem/src/models/operations/retrievecustomer.ts", "../../creem/src/models/operations/retrievediscount.ts", "../../creem/src/models/operations/retrieveproduct.ts", "../../creem/src/models/operations/retrievesubscription.ts", "../../creem/src/models/operations/searchproducts.ts", "../../creem/src/models/operations/searchtransactions.ts", "../../creem/src/models/operations/updatesubscription.ts", "../../creem/src/models/operations/upgradesubscription.ts", "../../creem/src/models/operations/validatelicense.ts", "../../creem/src/types/async.ts", "../../creem/src/funcs/activateLicense.ts", "../../creem/src/funcs/cancelSubscription.ts", "../../creem/src/funcs/createCheckout.ts", "../../creem/src/funcs/createDiscount.ts", "../../creem/src/funcs/createProduct.ts", "../../creem/src/funcs/deactivateLicense.ts", "../../creem/src/funcs/deleteDiscount.ts", "../../creem/src/funcs/generateCustomerLinks.ts", "../../creem/src/funcs/retrieveCheckout.ts", "../../creem/src/funcs/retrieveCustomer.ts", "../../creem/src/funcs/retrieveDiscount.ts", "../../creem/src/funcs/retrieveProduct.ts", "../../creem/src/funcs/retrieveSubscription.ts", "../../creem/src/funcs/searchProducts.ts", "../../creem/src/funcs/searchTransactions.ts", "../../creem/src/funcs/updateSubscription.ts", "../../creem/src/funcs/upgradeSubscription.ts", "../../creem/src/funcs/validateLicense.ts", "../../creem/src/hooks/hooks.ts", "../../creem/src/models/errors/httpclienterrors.ts", "../../creem/src/lib/dlv.ts", "../../creem/src/lib/env.ts", "../../creem/src/lib/retries.ts", "../../creem/src/lib/sdks.ts", "../../creem/src/sdk/sdk.ts"],
  "sourcesContent": ["/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nexport type Params = Partial<Record<string, string | number>>;\n\nexport function pathToFunc(\n  pathPattern: string,\n  options?: { charEncoding?: \"percent\" | \"none\" },\n): (params?: Params) => string {\n  const paramRE = /\\{([a-zA-Z0-9_]+?)\\}/g;\n\n  return function buildURLPath(params: Record<string, unknown> = {}): string {\n    return pathPattern.replace(paramRE, function (_, placeholder) {\n      if (!hasOwn.call(params, placeholder)) {\n        throw new Error(`Parameter '${placeholder}' is required`);\n      }\n\n      const value = params[placeholder];\n      if (typeof value !== \"string\" && typeof value !== \"number\") {\n        throw new Error(\n          `Parameter '${placeholder}' must be a string or number`,\n        );\n      }\n\n      return options?.charEncoding === \"percent\"\n        ? encodeURIComponent(`${value}`)\n        : `${value}`;\n    });\n  };\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport { HTTPClient } from \"./http.js\";\nimport { Logger } from \"./logger.js\";\nimport { RetryConfig } from \"./retries.js\";\nimport { Params, pathToFunc } from \"./url.js\";\n\n/**\n * Contains the list of servers available to the SDK\n */\nexport const ServerList = [\n  \"https://api.creem.io\",\n  \"https://test-api.creem.io\",\n  \"http://localhost:8000\",\n] as const;\n\nexport type SDKOptions = {\n  httpClient?: HTTPClient;\n  /**\n   * Allows overriding the default server used by the SDK\n   */\n  serverIdx?: number | undefined;\n  /**\n   * Allows overriding the default server URL used by the SDK\n   */\n  serverURL?: string | undefined;\n  /**\n   * Allows overriding the default retry config used by the SDK\n   */\n  retryConfig?: RetryConfig;\n  timeoutMs?: number;\n  debugLogger?: Logger;\n};\n\nexport function serverURLFromOptions(options: SDKOptions): URL | null {\n  let serverURL = options.serverURL;\n\n  const params: Params = {};\n\n  if (!serverURL) {\n    const serverIdx = options.serverIdx ?? 0;\n    if (serverIdx < 0 || serverIdx >= ServerList.length) {\n      throw new Error(`Invalid server index ${serverIdx}`);\n    }\n    serverURL = ServerList[serverIdx] || \"\";\n  }\n\n  const u = pathToFunc(serverURL)(params);\n  return new URL(u);\n}\n\nexport const SDK_METADATA = {\n  language: \"typescript\",\n  openapiDocVersion: \"v1\",\n  sdkVersion: \"0.3.37\",\n  genVersion: \"2.599.0\",\n  userAgent: \"speakeasy-sdk/typescript 0.3.37 2.599.0 v1 creem\",\n} as const;\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\n/**\n * Consumes a stream and returns a concatenated array buffer. Useful in\n * situations where we need to read the whole file because it forms part of a\n * larger payload containing other fields, and we can't modify the underlying\n * request structure.\n */\nexport async function readableStreamToArrayBuffer(\n  readable: ReadableStream<Uint8Array>,\n): Promise<ArrayBuffer> {\n  const reader = readable.getReader();\n  const chunks: Uint8Array[] = [];\n\n  let totalLength = 0;\n  let done = false;\n\n  while (!done) {\n    const { value, done: doneReading } = await reader.read();\n\n    if (doneReading) {\n      done = true;\n    } else {\n      chunks.push(value);\n      totalLength += value.length;\n    }\n  }\n\n  const concatenatedChunks = new Uint8Array(totalLength);\n  let offset = 0;\n\n  for (const chunk of chunks) {\n    concatenatedChunks.set(chunk, offset);\n    offset += chunk.length;\n  }\n\n  return concatenatedChunks.buffer as ArrayBuffer;\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\n\nexport function bytesToBase64(u8arr: Uint8Array): string {\n  return btoa(String.fromCodePoint(...u8arr));\n}\n\nexport function bytesFromBase64(encoded: string): Uint8Array {\n  return Uint8Array.from(atob(encoded), (c) => c.charCodeAt(0));\n}\n\nexport function stringToBytes(str: string): Uint8Array {\n  return new TextEncoder().encode(str);\n}\n\nexport function stringFromBytes(u8arr: Uint8Array): string {\n  return new TextDecoder().decode(u8arr);\n}\n\nexport function stringToBase64(str: string): string {\n  return bytesToBase64(stringToBytes(str));\n}\n\nexport function stringFromBase64(b64str: string): string {\n  return stringFromBytes(bytesFromBase64(b64str));\n}\n\nexport const zodOutbound = z\n  .instanceof(Uint8Array)\n  .or(z.string().transform(stringToBytes));\n\nexport const zodInbound = z\n  .instanceof(Uint8Array)\n  .or(z.string().transform(bytesFromBase64));\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\n/*\nMIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n// Taken from https://github.com/sindresorhus/is-plain-obj/blob/97f38e8836f86a642cce98fc6ab3058bc36df181/index.js\n\nexport function isPlainObject(value: unknown): value is object {\n  if (typeof value !== \"object\" || value === null) {\n    return false;\n  }\n\n  const prototype = Object.getPrototypeOf(value);\n  return (\n    (prototype === null ||\n      prototype === Object.prototype ||\n      Object.getPrototypeOf(prototype) === null) &&\n    !(Symbol.toStringTag in value) &&\n    !(Symbol.iterator in value)\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport { bytesToBase64 } from \"./base64.js\";\nimport { isPlainObject } from \"./is-plain-object.js\";\n\nexport class EncodingError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"EncodingError\";\n  }\n}\n\nexport function encodeMatrix(\n  key: string,\n  value: unknown,\n  options?: { explode?: boolean; charEncoding?: \"percent\" | \"none\" },\n): string | undefined {\n  let out = \"\";\n  const pairs: [string, unknown][] = options?.explode\n    ? explode(key, value)\n    : [[key, value]];\n\n  if (pairs.every(([_, v]) => v == null)) {\n    return;\n  }\n\n  const encodeString = (v: string) => {\n    return options?.charEncoding === \"percent\" ? encodeURIComponent(v) : v;\n  };\n  const encodeValue = (v: unknown) => encodeString(serializeValue(v));\n\n  pairs.forEach(([pk, pv]) => {\n    let tmp = \"\";\n    let encValue: string | null | undefined = null;\n\n    if (pv == null) {\n      return;\n    } else if (Array.isArray(pv)) {\n      encValue = mapDefined(pv, (v) => `${encodeValue(v)}`)?.join(\",\");\n    } else if (isPlainObject(pv)) {\n      const mapped = mapDefinedEntries(Object.entries(pv), ([k, v]) => {\n        return `,${encodeString(k)},${encodeValue(v)}`;\n      });\n      encValue = mapped?.join(\"\").slice(1);\n    } else {\n      encValue = `${encodeValue(pv)}`;\n    }\n\n    if (encValue == null) {\n      return;\n    }\n\n    const keyPrefix = encodeString(pk);\n    tmp = `${keyPrefix}=${encValue}`;\n    // trim trailing '=' if value was empty\n    if (tmp === `${keyPrefix}=`) {\n      tmp = tmp.slice(0, -1);\n    }\n\n    // If we end up with the nothing then skip forward\n    if (!tmp) {\n      return;\n    }\n\n    out += `;${tmp}`;\n  });\n\n  return out;\n}\n\nexport function encodeLabel(\n  key: string,\n  value: unknown,\n  options?: { explode?: boolean; charEncoding?: \"percent\" | \"none\" },\n): string | undefined {\n  let out = \"\";\n  const pairs: [string, unknown][] = options?.explode\n    ? explode(key, value)\n    : [[key, value]];\n\n  if (pairs.every(([_, v]) => v == null)) {\n    return;\n  }\n\n  const encodeString = (v: string) => {\n    return options?.charEncoding === \"percent\" ? encodeURIComponent(v) : v;\n  };\n  const encodeValue = (v: unknown) => encodeString(serializeValue(v));\n\n  pairs.forEach(([pk, pv]) => {\n    let encValue: string | null | undefined = \"\";\n\n    if (pv == null) {\n      return;\n    } else if (Array.isArray(pv)) {\n      encValue = mapDefined(pv, (v) => `${encodeValue(v)}`)?.join(\".\");\n    } else if (isPlainObject(pv)) {\n      const mapped = mapDefinedEntries(Object.entries(pv), ([k, v]) => {\n        return `.${encodeString(k)}.${encodeValue(v)}`;\n      });\n      encValue = mapped?.join(\"\").slice(1);\n    } else {\n      const k =\n        options?.explode && isPlainObject(value) ? `${encodeString(pk)}=` : \"\";\n      encValue = `${k}${encodeValue(pv)}`;\n    }\n\n    out += encValue == null ? \"\" : `.${encValue}`;\n  });\n\n  return out;\n}\n\ntype FormEncoder = (\n  key: string,\n  value: unknown,\n  options?: { explode?: boolean; charEncoding?: \"percent\" | \"none\" },\n) => string | undefined;\n\nfunction formEncoder(sep: string): FormEncoder {\n  return (\n    key: string,\n    value: unknown,\n    options?: { explode?: boolean; charEncoding?: \"percent\" | \"none\" },\n  ) => {\n    let out = \"\";\n    const pairs: [string, unknown][] = options?.explode\n      ? explode(key, value)\n      : [[key, value]];\n\n    if (pairs.every(([_, v]) => v == null)) {\n      return;\n    }\n\n    const encodeString = (v: string) => {\n      return options?.charEncoding === \"percent\" ? encodeURIComponent(v) : v;\n    };\n\n    const encodeValue = (v: unknown) => encodeString(serializeValue(v));\n\n    const encodedSep = encodeString(sep);\n\n    pairs.forEach(([pk, pv]) => {\n      let tmp = \"\";\n      let encValue: string | null | undefined = null;\n\n      if (pv == null) {\n        return;\n      } else if (Array.isArray(pv)) {\n        encValue = mapDefined(pv, (v) => `${encodeValue(v)}`)?.join(encodedSep);\n      } else if (isPlainObject(pv)) {\n        encValue = mapDefinedEntries(Object.entries(pv), ([k, v]) => {\n          return `${encodeString(k)}${encodedSep}${encodeValue(v)}`;\n        })?.join(encodedSep);\n      } else {\n        encValue = `${encodeValue(pv)}`;\n      }\n\n      if (encValue == null) {\n        return;\n      }\n\n      tmp = `${encodeString(pk)}=${encValue}`;\n\n      // If we end up with the nothing then skip forward\n      if (!tmp || tmp === \"=\") {\n        return;\n      }\n\n      out += `&${tmp}`;\n    });\n\n    return out.slice(1);\n  };\n}\n\nexport const encodeForm = formEncoder(\",\");\nexport const encodeSpaceDelimited = formEncoder(\" \");\nexport const encodePipeDelimited = formEncoder(\"|\");\n\nexport function encodeBodyForm(\n  key: string,\n  value: unknown,\n  options?: { explode?: boolean; charEncoding?: \"percent\" | \"none\" },\n): string {\n  let out = \"\";\n  const pairs: [string, unknown][] = options?.explode\n    ? explode(key, value)\n    : [[key, value]];\n\n  const encodeString = (v: string) => {\n    return options?.charEncoding === \"percent\" ? encodeURIComponent(v) : v;\n  };\n\n  const encodeValue = (v: unknown) => encodeString(serializeValue(v));\n\n  pairs.forEach(([pk, pv]) => {\n    let tmp = \"\";\n    let encValue = \"\";\n\n    if (pv == null) {\n      return;\n    } else if (Array.isArray(pv)) {\n      encValue = JSON.stringify(pv, jsonReplacer);\n    } else if (isPlainObject(pv)) {\n      encValue = JSON.stringify(pv, jsonReplacer);\n    } else {\n      encValue = `${encodeValue(pv)}`;\n    }\n\n    tmp = `${encodeString(pk)}=${encValue}`;\n\n    // If we end up with the nothing then skip forward\n    if (!tmp || tmp === \"=\") {\n      return;\n    }\n\n    out += `&${tmp}`;\n  });\n\n  return out.slice(1);\n}\n\nexport function encodeDeepObject(\n  key: string,\n  value: unknown,\n  options?: { charEncoding?: \"percent\" | \"none\" },\n): string | undefined {\n  if (value == null) {\n    return;\n  }\n\n  if (!isPlainObject(value)) {\n    throw new EncodingError(\n      `Value of parameter '${key}' which uses deepObject encoding must be an object or null`,\n    );\n  }\n\n  return encodeDeepObjectObject(key, value, options);\n}\n\nexport function encodeDeepObjectObject(\n  key: string,\n  value: unknown,\n  options?: { charEncoding?: \"percent\" | \"none\" },\n): string | undefined {\n  if (value == null) {\n    return;\n  }\n\n  let out = \"\";\n\n  const encodeString = (v: string) => {\n    return options?.charEncoding === \"percent\" ? encodeURIComponent(v) : v;\n  };\n\n  if (!isPlainObject(value)) {\n    throw new EncodingError(`Expected parameter '${key}' to be an object.`);\n  }\n\n  Object.entries(value).forEach(([ck, cv]) => {\n    if (cv == null) {\n      return;\n    }\n\n    const pk = `${key}[${ck}]`;\n\n    if (isPlainObject(cv)) {\n      const objOut = encodeDeepObjectObject(pk, cv, options);\n\n      out += objOut == null ? \"\" : `&${objOut}`;\n\n      return;\n    }\n\n    const pairs: unknown[] = Array.isArray(cv) ? cv : [cv];\n    const encoded = mapDefined(pairs, (v) => {\n      return `${encodeString(pk)}=${encodeString(serializeValue(v))}`;\n    })?.join(\"&\");\n\n    out += encoded == null ? \"\" : `&${encoded}`;\n  });\n\n  return out.slice(1);\n}\n\nexport function encodeJSON(\n  key: string,\n  value: unknown,\n  options?: { explode?: boolean; charEncoding?: \"percent\" | \"none\" },\n): string | undefined {\n  if (typeof value === \"undefined\") {\n    return;\n  }\n\n  const encodeString = (v: string) => {\n    return options?.charEncoding === \"percent\" ? encodeURIComponent(v) : v;\n  };\n\n  const encVal = encodeString(JSON.stringify(value, jsonReplacer));\n\n  return options?.explode ? encVal : `${encodeString(key)}=${encVal}`;\n}\n\nexport const encodeSimple = (\n  key: string,\n  value: unknown,\n  options?: { explode?: boolean; charEncoding?: \"percent\" | \"none\" },\n): string | undefined => {\n  let out = \"\";\n  const pairs: [string, unknown][] = options?.explode\n    ? explode(key, value)\n    : [[key, value]];\n\n  if (pairs.every(([_, v]) => v == null)) {\n    return;\n  }\n\n  const encodeString = (v: string) => {\n    return options?.charEncoding === \"percent\" ? encodeURIComponent(v) : v;\n  };\n  const encodeValue = (v: unknown) => encodeString(serializeValue(v));\n\n  pairs.forEach(([pk, pv]) => {\n    let tmp: string | null | undefined = \"\";\n\n    if (pv == null) {\n      return;\n    } else if (Array.isArray(pv)) {\n      tmp = mapDefined(pv, (v) => `${encodeValue(v)}`)?.join(\",\");\n    } else if (isPlainObject(pv)) {\n      const mapped = mapDefinedEntries(Object.entries(pv), ([k, v]) => {\n        return `,${encodeString(k)},${encodeValue(v)}`;\n      });\n      tmp = mapped?.join(\"\").slice(1);\n    } else {\n      const k = options?.explode && isPlainObject(value) ? `${pk}=` : \"\";\n      tmp = `${k}${encodeValue(pv)}`;\n    }\n\n    out += tmp ? `,${tmp}` : \"\";\n  });\n\n  return out.slice(1);\n};\n\nfunction explode(key: string, value: unknown): [string, unknown][] {\n  if (Array.isArray(value)) {\n    return value.map((v) => [key, v]);\n  } else if (isPlainObject(value)) {\n    const o = value ?? {};\n    return Object.entries(o).map(([k, v]) => [k, v]);\n  } else {\n    return [[key, value]];\n  }\n}\n\nfunction serializeValue(value: unknown): string {\n  if (value == null) {\n    return \"\";\n  } else if (value instanceof Date) {\n    return value.toISOString();\n  } else if (value instanceof Uint8Array) {\n    return bytesToBase64(value);\n  } else if (typeof value === \"object\") {\n    return JSON.stringify(value, jsonReplacer);\n  }\n\n  return `${value}`;\n}\n\nfunction jsonReplacer(_: string, value: unknown): unknown {\n  if (value instanceof Uint8Array) {\n    return bytesToBase64(value);\n  } else {\n    return value;\n  }\n}\n\nfunction mapDefined<T, R>(inp: T[], mapper: (v: T) => R): R[] | null {\n  const res = inp.reduce<R[]>((acc, v) => {\n    if (v == null) {\n      return acc;\n    }\n\n    const m = mapper(v);\n    if (m == null) {\n      return acc;\n    }\n\n    acc.push(m);\n\n    return acc;\n  }, []);\n\n  return res.length ? res : null;\n}\n\nfunction mapDefinedEntries<K, V, R>(\n  inp: Iterable<[K, V]>,\n  mapper: (v: [K, V]) => R,\n): R[] | null {\n  const acc: R[] = [];\n  for (const [k, v] of inp) {\n    if (v == null) {\n      continue;\n    }\n\n    const m = mapper([k, v]);\n    if (m == null) {\n      continue;\n    }\n\n    acc.push(m);\n  }\n\n  return acc.length ? acc : null;\n}\n\nexport function queryJoin(...args: (string | undefined)[]): string {\n  return args.filter(Boolean).join(\"&\");\n}\n\ntype QueryEncoderOptions = {\n  explode?: boolean;\n  charEncoding?: \"percent\" | \"none\";\n};\n\ntype QueryEncoder = (\n  key: string,\n  value: unknown,\n  options?: QueryEncoderOptions,\n) => string | undefined;\n\ntype BulkQueryEncoder = (\n  values: Record<string, unknown>,\n  options?: QueryEncoderOptions,\n) => string;\n\nexport function queryEncoder(f: QueryEncoder): BulkQueryEncoder {\n  const bulkEncode = function (\n    values: Record<string, unknown>,\n    options?: QueryEncoderOptions,\n  ): string {\n    const opts: QueryEncoderOptions = {\n      ...options,\n      explode: options?.explode ?? true,\n      charEncoding: options?.charEncoding ?? \"percent\",\n    };\n\n    const encoded = Object.entries(values).map(([key, value]) => {\n      return f(key, value, opts);\n    });\n    return queryJoin(...encoded);\n  };\n\n  return bulkEncode;\n}\n\nexport const encodeJSONQuery = queryEncoder(encodeJSON);\nexport const encodeFormQuery = queryEncoder(encodeForm);\nexport const encodeSpaceDelimitedQuery = queryEncoder(encodeSpaceDelimited);\nexport const encodePipeDelimitedQuery = queryEncoder(encodePipeDelimited);\nexport const encodeDeepObjectQuery = queryEncoder(encodeDeepObject);\n\nexport function appendForm(\n  fd: FormData,\n  key: string,\n  value: unknown,\n  fileName?: string,\n): void {\n  if (value == null) {\n    return;\n  } else if (value instanceof Blob && fileName) {\n    fd.append(key, value, fileName);\n  } else if (value instanceof Blob) {\n    fd.append(key, value);\n  } else {\n    fd.append(key, String(value));\n  }\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nexport class APIError extends Error {\n  public readonly statusCode: number;\n  public readonly contentType: string;\n\n  constructor(\n    message: string,\n    public readonly rawResponse: Response,\n    public readonly body: string = \"\",\n  ) {\n    const statusCode = rawResponse.status;\n    const contentType = rawResponse.headers.get(\"content-type\") || \"\";\n    const bodyString = body.length > 0 ? `\\n${body}` : \"\";\n\n    super(\n      `${message}: Status ${statusCode} Content-Type ${contentType} Body ${bodyString}`,\n    );\n\n    this.statusCode = statusCode;\n    this.contentType = contentType;\n\n    this.name = \"APIError\";\n  }\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nexport type Fetcher = (\n  input: RequestInfo | URL,\n  init?: RequestInit,\n) => Promise<Response>;\n\nexport type Awaitable<T> = T | Promise<T>;\n\nconst DEFAULT_FETCHER: Fetcher = (input, init) => {\n  // If input is a Request and init is undefined, Bun will discard the method,\n  // headers, body and other options that were set on the request object.\n  // Node.js and browers would ignore an undefined init value. This check is\n  // therefore needed for interop with Bun.\n  if (init == null) {\n    return fetch(input);\n  } else {\n    return fetch(input, init);\n  }\n};\n\nexport type RequestInput = {\n  /**\n   * The URL the request will use.\n   */\n  url: URL;\n  /**\n   * Options used to create a [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request/Request).\n   */\n  options?: RequestInit | undefined;\n};\n\nexport interface HTTPClientOptions {\n  fetcher?: Fetcher;\n}\n\nexport type BeforeRequestHook = (req: Request) => Awaitable<Request | void>;\nexport type RequestErrorHook = (err: unknown, req: Request) => Awaitable<void>;\nexport type ResponseHook = (res: Response, req: Request) => Awaitable<void>;\n\nexport class HTTPClient {\n  private fetcher: Fetcher;\n  private requestHooks: BeforeRequestHook[] = [];\n  private requestErrorHooks: RequestErrorHook[] = [];\n  private responseHooks: ResponseHook[] = [];\n\n  constructor(private options: HTTPClientOptions = {}) {\n    this.fetcher = options.fetcher || DEFAULT_FETCHER;\n  }\n\n  async request(request: Request): Promise<Response> {\n    let req = request;\n    for (const hook of this.requestHooks) {\n      const nextRequest = await hook(req);\n      if (nextRequest) {\n        req = nextRequest;\n      }\n    }\n\n    try {\n      const res = await this.fetcher(req);\n\n      for (const hook of this.responseHooks) {\n        await hook(res, req);\n      }\n\n      return res;\n    } catch (err) {\n      for (const hook of this.requestErrorHooks) {\n        await hook(err, req);\n      }\n\n      throw err;\n    }\n  }\n\n  /**\n   * Registers a hook that is called before a request is made. The hook function\n   * can mutate the request or return a new request. This may be useful to add\n   * additional information to request such as request IDs and tracing headers.\n   */\n  addHook(hook: \"beforeRequest\", fn: BeforeRequestHook): this;\n  /**\n   * Registers a hook that is called when a request cannot be made due to a\n   * network error.\n   */\n  addHook(hook: \"requestError\", fn: RequestErrorHook): this;\n  /**\n   * Registers a hook that is called when a response has been received from the\n   * server.\n   */\n  addHook(hook: \"response\", fn: ResponseHook): this;\n  addHook(\n    ...args:\n      | [hook: \"beforeRequest\", fn: BeforeRequestHook]\n      | [hook: \"requestError\", fn: RequestErrorHook]\n      | [hook: \"response\", fn: ResponseHook]\n  ) {\n    if (args[0] === \"beforeRequest\") {\n      this.requestHooks.push(args[1]);\n    } else if (args[0] === \"requestError\") {\n      this.requestErrorHooks.push(args[1]);\n    } else if (args[0] === \"response\") {\n      this.responseHooks.push(args[1]);\n    } else {\n      throw new Error(`Invalid hook type: ${args[0]}`);\n    }\n    return this;\n  }\n\n  /** Removes a hook that was previously registered with `addHook`. */\n  removeHook(hook: \"beforeRequest\", fn: BeforeRequestHook): this;\n  /** Removes a hook that was previously registered with `addHook`. */\n  removeHook(hook: \"requestError\", fn: RequestErrorHook): this;\n  /** Removes a hook that was previously registered with `addHook`. */\n  removeHook(hook: \"response\", fn: ResponseHook): this;\n  removeHook(\n    ...args:\n      | [hook: \"beforeRequest\", fn: BeforeRequestHook]\n      | [hook: \"requestError\", fn: RequestErrorHook]\n      | [hook: \"response\", fn: ResponseHook]\n  ): this {\n    let target: unknown[];\n    if (args[0] === \"beforeRequest\") {\n      target = this.requestHooks;\n    } else if (args[0] === \"requestError\") {\n      target = this.requestErrorHooks;\n    } else if (args[0] === \"response\") {\n      target = this.responseHooks;\n    } else {\n      throw new Error(`Invalid hook type: ${args[0]}`);\n    }\n\n    const index = target.findIndex((v) => v === args[1]);\n    if (index >= 0) {\n      target.splice(index, 1);\n    }\n\n    return this;\n  }\n\n  clone(): HTTPClient {\n    const child = new HTTPClient(this.options);\n    child.requestHooks = this.requestHooks.slice();\n    child.requestErrorHooks = this.requestErrorHooks.slice();\n    child.responseHooks = this.responseHooks.slice();\n\n    return child;\n  }\n}\n\nexport type StatusCodePredicate = number | string | (number | string)[];\n\n// A semicolon surrounded by optional whitespace characters is used to separate\n// segments in a media type string.\nconst mediaParamSeparator = /\\s*;\\s*/g;\n\nexport function matchContentType(response: Response, pattern: string): boolean {\n  // `*` is a special case which means anything is acceptable.\n  if (pattern === \"*\") {\n    return true;\n  }\n\n  let contentType =\n    response.headers.get(\"content-type\")?.trim() || \"application/octet-stream\";\n  contentType = contentType.toLowerCase();\n\n  const wantParts = pattern.toLowerCase().trim().split(mediaParamSeparator);\n  const [wantType = \"\", ...wantParams] = wantParts;\n\n  if (wantType.split(\"/\").length !== 2) {\n    return false;\n  }\n\n  const gotParts = contentType.split(mediaParamSeparator);\n  const [gotType = \"\", ...gotParams] = gotParts;\n\n  const [type = \"\", subtype = \"\"] = gotType.split(\"/\");\n  if (!type || !subtype) {\n    return false;\n  }\n\n  if (\n    wantType !== \"*/*\" &&\n    gotType !== wantType &&\n    `${type}/*` !== wantType &&\n    `*/${subtype}` !== wantType\n  ) {\n    return false;\n  }\n\n  if (gotParams.length < wantParams.length) {\n    return false;\n  }\n\n  const params = new Set(gotParams);\n  for (const wantParam of wantParams) {\n    if (!params.has(wantParam)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nconst codeRangeRE = new RegExp(\"^[0-9]xx$\", \"i\");\n\nexport function matchStatusCode(\n  response: Response,\n  codes: StatusCodePredicate,\n): boolean {\n  const actual = `${response.status}`;\n  const expectedCodes = Array.isArray(codes) ? codes : [codes];\n  if (!expectedCodes.length) {\n    return false;\n  }\n\n  return expectedCodes.some((ec) => {\n    const code = `${ec}`;\n\n    if (code === \"default\") {\n      return true;\n    }\n\n    if (!codeRangeRE.test(`${code}`)) {\n      return code === actual;\n    }\n\n    const expectFamily = code.charAt(0);\n    if (!expectFamily) {\n      throw new Error(\"Invalid status code range\");\n    }\n\n    const actualFamily = actual.charAt(0);\n    if (!actualFamily) {\n      throw new Error(`Invalid response status code: ${actual}`);\n    }\n\n    return actualFamily === expectFamily;\n  });\n}\n\nexport function matchResponse(\n  response: Response,\n  code: StatusCodePredicate,\n  contentTypePattern: string,\n): boolean {\n  return (\n    matchStatusCode(response, code) &&\n    matchContentType(response, contentTypePattern)\n  );\n}\n\n/**\n * Uses various heurisitics to determine if an error is a connection error.\n */\nexport function isConnectionError(err: unknown): boolean {\n  if (typeof err !== \"object\" || err == null) {\n    return false;\n  }\n\n  // Covers fetch in Deno as well\n  const isBrowserErr =\n    err instanceof TypeError &&\n    err.message.toLowerCase().startsWith(\"failed to fetch\");\n\n  const isNodeErr =\n    err instanceof TypeError &&\n    err.message.toLowerCase().startsWith(\"fetch failed\");\n\n  const isBunErr = \"name\" in err && err.name === \"ConnectionError\";\n\n  const isGenericErr =\n    \"code\" in err &&\n    typeof err.code === \"string\" &&\n    err.code.toLowerCase() === \"econnreset\";\n\n  return isBrowserErr || isNodeErr || isGenericErr || isBunErr;\n}\n\n/**\n * Uses various heurisitics to determine if an error is a timeout error.\n */\nexport function isTimeoutError(err: unknown): boolean {\n  if (typeof err !== \"object\" || err == null) {\n    return false;\n  }\n\n  // Fetch in browser, Node.js, Bun, Deno\n  const isNative = \"name\" in err && err.name === \"TimeoutError\";\n  const isLegacyNative = \"code\" in err && err.code === 23;\n\n  // Node.js HTTP client and Axios\n  const isGenericErr =\n    \"code\" in err &&\n    typeof err.code === \"string\" &&\n    err.code.toLowerCase() === \"econnaborted\";\n\n  return isNative || isLegacyNative || isGenericErr;\n}\n\n/**\n * Uses various heurisitics to determine if an error is a abort error.\n */\nexport function isAbortError(err: unknown): boolean {\n  if (typeof err !== \"object\" || err == null) {\n    return false;\n  }\n\n  // Fetch in browser, Node.js, Bun, Deno\n  const isNative = \"name\" in err && err.name === \"AbortError\";\n  const isLegacyNative = \"code\" in err && err.code === 20;\n\n  // Node.js HTTP client and Axios\n  const isGenericErr =\n    \"code\" in err &&\n    typeof err.code === \"string\" &&\n    err.code.toLowerCase() === \"econnaborted\";\n\n  return isNative || isLegacyNative || isGenericErr;\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\n\nexport class SDKValidationError extends Error {\n  /**\n   * The raw value that failed validation.\n   */\n  public readonly rawValue: unknown;\n\n  /**\n   * The raw message that failed validation.\n   */\n  public readonly rawMessage: unknown;\n\n  constructor(message: string, cause: unknown, rawValue: unknown) {\n    super(`${message}: ${cause}`);\n    this.name = \"SDKValidationError\";\n    this.cause = cause;\n    this.rawValue = rawValue;\n    this.rawMessage = message;\n  }\n\n  /**\n   * Return a pretty-formatted error message if the underlying validation error\n   * is a ZodError or some other recognized error type, otherwise return the\n   * default error message.\n   */\n  public pretty(): string {\n    if (this.cause instanceof z.ZodError) {\n      return `${this.rawMessage}\\n${formatZodError(this.cause)}`;\n    } else {\n      return this.toString();\n    }\n  }\n}\n\nexport function formatZodError(err: z.ZodError, level = 0): string {\n  let pre = \"  \".repeat(level);\n  pre = level > 0 ? `│${pre}` : pre;\n  pre += \" \".repeat(level);\n\n  let message = \"\";\n  const append = (str: string) => (message += `\\n${pre}${str}`);\n\n  const len = err.issues.length;\n  const headline = len === 1 ? `${len} issue found` : `${len} issues found`;\n\n  if (len) {\n    append(`┌ ${headline}:`);\n  }\n\n  for (const issue of err.issues) {\n    let path = issue.path.join(\".\");\n    path = path ? `<root>.${path}` : \"<root>\";\n    append(`│ • [${path}]: ${issue.message} (${issue.code})`);\n    switch (issue.code) {\n      case \"invalid_literal\":\n      case \"invalid_type\": {\n        append(`│     Want: ${issue.expected}`);\n        append(`│      Got: ${issue.received}`);\n        break;\n      }\n      case \"unrecognized_keys\": {\n        append(`│     Keys: ${issue.keys.join(\", \")}`);\n        break;\n      }\n      case \"invalid_enum_value\": {\n        append(`│     Allowed: ${issue.options.join(\", \")}`);\n        append(`│         Got: ${issue.received}`);\n        break;\n      }\n      case \"invalid_union_discriminator\": {\n        append(`│     Allowed: ${issue.options.join(\", \")}`);\n        break;\n      }\n      case \"invalid_union\": {\n        const len = issue.unionErrors.length;\n        append(\n          `│   ✖︎ Attemped to deserialize into one of ${len} union members:`,\n        );\n        issue.unionErrors.forEach((err, i) => {\n          append(`│   ✖︎ Member ${i + 1} of ${len}`);\n          append(`${formatZodError(err, level + 1)}`);\n        });\n      }\n    }\n  }\n\n  if (err.issues.length) {\n    append(`└─*`);\n  }\n\n  return message.slice(1);\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\n/**\n * A monad that captures the result of a function call or an error if it was not\n * successful. Railway programming, enabled by this type, can be a nicer\n * alternative to traditional exception throwing because it allows functions to\n * declare all _known_ errors with static types and then check for them\n * exhaustively in application code. Thrown exception have a type of `unknown`\n * and break out of regular control flow of programs making them harder to\n * inspect and more verbose work with due to try-catch blocks.\n */\nexport type Result<T, E = unknown> =\n  | { ok: true; value: T; error?: never }\n  | { ok: false; value?: never; error: E };\n\nexport function OK<V>(value: V): Result<V, never> {\n  return { ok: true, value };\n}\n\nexport function ERR<E>(error: E): Result<never, E> {\n  return { ok: false, error };\n}\n\n/**\n * unwrap is a convenience function for extracting a value from a result or\n * throwing if there was an error.\n */\nexport function unwrap<T>(r: Result<T, unknown>): T {\n  if (!r.ok) {\n    throw r.error;\n  }\n  return r.value;\n}\n\n/**\n * unwrapAsync is a convenience function for resolving a value from a Promise\n * of a result or rejecting if an error occurred.\n */\nexport async function unwrapAsync<T>(\n  pr: Promise<Result<T, unknown>>,\n): Promise<T> {\n  const r = await pr;\n  if (!r.ok) {\n    throw r.error;\n  }\n\n  return r.value;\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport {\n  output,\n  ZodEffects,\n  ZodError,\n  ZodObject,\n  ZodRawShape,\n  ZodTypeAny,\n} from \"zod\";\nimport { SDKValidationError } from \"../models/errors/sdkvalidationerror.js\";\nimport { ERR, OK, Result } from \"../types/fp.js\";\n\n/**\n * Utility function that executes some code which may throw a ZodError. It\n * intercepts this error and converts it to an SDKValidationError so as to not\n * leak Zod implementation details to user code.\n */\nexport function parse<Inp, Out>(\n  rawValue: Inp,\n  fn: (value: Inp) => Out,\n  errorMessage: string,\n): Out {\n  try {\n    return fn(rawValue);\n  } catch (err) {\n    if (err instanceof ZodError) {\n      throw new SDKValidationError(errorMessage, err, rawValue);\n    }\n    throw err;\n  }\n}\n\n/**\n * Utility function that executes some code which may result in a ZodError. It\n * intercepts this error and converts it to an SDKValidationError so as to not\n * leak Zod implementation details to user code.\n */\nexport function safeParse<Inp, Out>(\n  rawValue: Inp,\n  fn: (value: Inp) => Out,\n  errorMessage: string,\n): Result<Out, SDKValidationError> {\n  try {\n    return OK(fn(rawValue));\n  } catch (err) {\n    return ERR(new SDKValidationError(errorMessage, err, rawValue));\n  }\n}\n\nexport function collectExtraKeys<\n  Shape extends ZodRawShape,\n  Catchall extends ZodTypeAny,\n  K extends string,\n>(\n  obj: ZodObject<Shape, \"strip\", Catchall>,\n  extrasKey: K,\n  optional: boolean,\n): ZodEffects<\n  typeof obj,\n  & output<ZodObject<Shape, \"strict\">>\n  & {\n    [k in K]: Record<string, output<Catchall>>;\n  }\n> {\n  return obj.transform((val) => {\n    const extras: Record<string, output<Catchall>> = {};\n    const { shape } = obj;\n    for (const [key] of Object.entries(val)) {\n      if (key in shape) {\n        continue;\n      }\n\n      const v = val[key];\n      if (typeof v === \"undefined\") {\n        continue;\n      }\n\n      extras[key] = v;\n      delete val[key];\n    }\n\n    if (optional && Object.keys(extras).length === 0) {\n      return val;\n    }\n\n    return { ...val, [extrasKey]: extras };\n  });\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport { APIError } from \"../models/errors/apierror.js\";\nimport { SDKValidationError } from \"../models/errors/sdkvalidationerror.js\";\nimport { Result } from \"../types/fp.js\";\nimport { matchResponse, matchStatusCode, StatusCodePredicate } from \"./http.js\";\nimport { isPlainObject } from \"./is-plain-object.js\";\nimport { safeParse } from \"./schemas.js\";\n\nexport type Encoding =\n  | \"jsonl\"\n  | \"json\"\n  | \"text\"\n  | \"bytes\"\n  | \"stream\"\n  | \"sse\"\n  | \"nil\"\n  | \"fail\";\n\nconst DEFAULT_CONTENT_TYPES: Record<Encoding, string> = {\n  jsonl: \"application/jsonl\",\n  json: \"application/json\",\n  text: \"text/plain\",\n  bytes: \"application/octet-stream\",\n  stream: \"application/octet-stream\",\n  sse: \"text/event-stream\",\n  nil: \"*\",\n  fail: \"*\",\n};\n\ntype Schema<T> = { parse(raw: unknown): T };\n\ntype MatchOptions = {\n  ctype?: string;\n  hdrs?: boolean;\n  key?: string;\n  sseSentinel?: string;\n};\n\nexport type ValueMatcher<V> = MatchOptions & {\n  enc: Encoding;\n  codes: StatusCodePredicate;\n  schema: Schema<V>;\n};\n\nexport type ErrorMatcher<E> = MatchOptions & {\n  enc: Encoding;\n  codes: StatusCodePredicate;\n  schema: Schema<E>;\n  err: true;\n};\n\nexport type FailMatcher = {\n  enc: \"fail\";\n  codes: StatusCodePredicate;\n};\n\nexport type Matcher<T, E> = ValueMatcher<T> | ErrorMatcher<E> | FailMatcher;\n\nexport function jsonErr<E>(\n  codes: StatusCodePredicate,\n  schema: Schema<E>,\n  options?: MatchOptions,\n): ErrorMatcher<E> {\n  return { ...options, err: true, enc: \"json\", codes, schema };\n}\nexport function json<T>(\n  codes: StatusCodePredicate,\n  schema: Schema<T>,\n  options?: MatchOptions,\n): ValueMatcher<T> {\n  return { ...options, enc: \"json\", codes, schema };\n}\n\nexport function jsonl<T>(\n  codes: StatusCodePredicate,\n  schema: Schema<T>,\n  options?: MatchOptions,\n): ValueMatcher<T> {\n  return { ...options, enc: \"jsonl\", codes, schema };\n}\n\nexport function jsonlErr<E>(\n  codes: StatusCodePredicate,\n  schema: Schema<E>,\n  options?: MatchOptions,\n): ErrorMatcher<E> {\n  return { ...options, err: true, enc: \"jsonl\", codes, schema };\n}\nexport function textErr<E>(\n  codes: StatusCodePredicate,\n  schema: Schema<E>,\n  options?: MatchOptions,\n): ErrorMatcher<E> {\n  return { ...options, err: true, enc: \"text\", codes, schema };\n}\nexport function text<T>(\n  codes: StatusCodePredicate,\n  schema: Schema<T>,\n  options?: MatchOptions,\n): ValueMatcher<T> {\n  return { ...options, enc: \"text\", codes, schema };\n}\n\nexport function bytesErr<E>(\n  codes: StatusCodePredicate,\n  schema: Schema<E>,\n  options?: MatchOptions,\n): ErrorMatcher<E> {\n  return { ...options, err: true, enc: \"bytes\", codes, schema };\n}\nexport function bytes<T>(\n  codes: StatusCodePredicate,\n  schema: Schema<T>,\n  options?: MatchOptions,\n): ValueMatcher<T> {\n  return { ...options, enc: \"bytes\", codes, schema };\n}\n\nexport function streamErr<E>(\n  codes: StatusCodePredicate,\n  schema: Schema<E>,\n  options?: MatchOptions,\n): ErrorMatcher<E> {\n  return { ...options, err: true, enc: \"stream\", codes, schema };\n}\nexport function stream<T>(\n  codes: StatusCodePredicate,\n  schema: Schema<T>,\n  options?: MatchOptions,\n): ValueMatcher<T> {\n  return { ...options, enc: \"stream\", codes, schema };\n}\n\nexport function sseErr<E>(\n  codes: StatusCodePredicate,\n  schema: Schema<E>,\n  options?: MatchOptions,\n): ErrorMatcher<E> {\n  return { ...options, err: true, enc: \"sse\", codes, schema };\n}\nexport function sse<T>(\n  codes: StatusCodePredicate,\n  schema: Schema<T>,\n  options?: MatchOptions,\n): ValueMatcher<T> {\n  return { ...options, enc: \"sse\", codes, schema };\n}\n\nexport function nilErr<E>(\n  codes: StatusCodePredicate,\n  schema: Schema<E>,\n  options?: MatchOptions,\n): ErrorMatcher<E> {\n  return { ...options, err: true, enc: \"nil\", codes, schema };\n}\nexport function nil<T>(\n  codes: StatusCodePredicate,\n  schema: Schema<T>,\n  options?: MatchOptions,\n): ValueMatcher<T> {\n  return { ...options, enc: \"nil\", codes, schema };\n}\n\nexport function fail(codes: StatusCodePredicate): FailMatcher {\n  return { enc: \"fail\", codes };\n}\n\nexport type MatchedValue<Matchers> = Matchers extends Matcher<infer T, any>[]\n  ? T\n  : never;\nexport type MatchedError<Matchers> = Matchers extends Matcher<any, infer E>[]\n  ? E\n  : never;\nexport type MatchFunc<T, E> = (\n  response: Response,\n  options?: { resultKey?: string; extraFields?: Record<string, unknown> },\n) => Promise<[result: Result<T, E>, raw: unknown]>;\n\nexport function match<T, E>(\n  ...matchers: Array<Matcher<T, E>>\n): MatchFunc<T, E | APIError | SDKValidationError> {\n  return async function matchFunc(\n    response: Response,\n    options?: { resultKey?: string; extraFields?: Record<string, unknown> },\n  ): Promise<\n    [result: Result<T, E | APIError | SDKValidationError>, raw: unknown]\n  > {\n    let raw: unknown;\n    let matcher: Matcher<T, E> | undefined;\n    for (const match of matchers) {\n      const { codes } = match;\n      const ctpattern = \"ctype\" in match\n        ? match.ctype\n        : DEFAULT_CONTENT_TYPES[match.enc];\n      if (ctpattern && matchResponse(response, codes, ctpattern)) {\n        matcher = match;\n        break;\n      } else if (!ctpattern && matchStatusCode(response, codes)) {\n        matcher = match;\n        break;\n      }\n    }\n\n    if (!matcher) {\n      const responseBody = await response.text();\n      return [{\n        ok: false,\n        error: new APIError(\n          \"Unexpected API response status or content-type\",\n          response,\n          responseBody,\n        ),\n      }, responseBody];\n    }\n\n    const encoding = matcher.enc;\n    switch (encoding) {\n      case \"json\":\n        raw = await response.json();\n        break;\n      case \"jsonl\":\n        raw = response.body;\n        break;\n      case \"bytes\":\n        raw = new Uint8Array(await response.arrayBuffer());\n        break;\n      case \"stream\":\n        raw = response.body;\n        break;\n      case \"text\":\n        raw = await response.text();\n        break;\n      case \"sse\":\n        raw = response.body;\n        break;\n      case \"nil\":\n        raw = await discardResponseBody(response);\n        break;\n      case \"fail\":\n        raw = await response.text();\n        break;\n      default:\n        encoding satisfies never;\n        throw new Error(`Unsupported response type: ${encoding}`);\n    }\n\n    if (matcher.enc === \"fail\") {\n      return [{\n        ok: false,\n        error: new APIError(\n          \"API error occurred\",\n          response,\n          typeof raw === \"string\" ? raw : \"\",\n        ),\n      }, raw];\n    }\n\n    const resultKey = matcher.key || options?.resultKey;\n    let data: unknown;\n\n    if (\"err\" in matcher) {\n      data = {\n        ...options?.extraFields,\n        ...(matcher.hdrs ? { Headers: unpackHeaders(response.headers) } : null),\n        ...(isPlainObject(raw) ? raw : null),\n      };\n    } else if (resultKey) {\n      data = {\n        ...options?.extraFields,\n        ...(matcher.hdrs ? { Headers: unpackHeaders(response.headers) } : null),\n        [resultKey]: raw,\n      };\n    } else if (matcher.hdrs) {\n      data = {\n        ...options?.extraFields,\n        ...(matcher.hdrs ? { Headers: unpackHeaders(response.headers) } : null),\n        ...(isPlainObject(raw) ? raw : null),\n      };\n    } else {\n      data = raw;\n    }\n\n    if (\"err\" in matcher) {\n      const result = safeParse(\n        data,\n        (v: unknown) => matcher.schema.parse(v),\n        \"Response validation failed\",\n      );\n      return [result.ok ? { ok: false, error: result.value } : result, raw];\n    } else {\n      return [\n        safeParse(\n          data,\n          (v: unknown) => matcher.schema.parse(v),\n          \"Response validation failed\",\n        ),\n        raw,\n      ];\n    }\n  };\n}\n\nconst headerValRE = /, */;\n/**\n * Iterates over a Headers object and returns an object with all the header\n * entries. Values are represented as an array to account for repeated headers.\n */\nexport function unpackHeaders(headers: Headers): Record<string, string[]> {\n  const out: Record<string, string[]> = {};\n\n  for (const [k, v] of headers.entries()) {\n    out[k] = v.split(headerValRE);\n  }\n\n  return out;\n}\n\n/**\n * Discards the response body to free up resources.\n *\n * To learn why this is need, see the undici docs:\n * https://undici.nodejs.org/#/?id=garbage-collection\n */\nexport async function discardResponseBody(res: Response) {\n  const reader = res.body?.getReader();\n  if (reader == null) {\n    return;\n  }\n\n  try {\n    let done = false;\n    while (!done) {\n      const res = await reader.read();\n      done = res.done;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nclass InvariantError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"InvariantError\";\n  }\n}\n\nexport function invariant(\n  condition: unknown,\n  message: string,\n): asserts condition {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\n\nexport type ExactPartial<T> = {\n  [P in keyof T]?: T[P] | undefined;\n};\n\nexport type Remap<Inp, Mapping extends { [k in keyof Inp]?: string | null }> = {\n  [k in keyof Inp as Mapping[k] extends string /* if we have a string mapping for this key then use it */\n    ? Mapping[k]\n    : Mapping[k] extends null /* if the mapping is to `null` then drop the key */\n    ? never\n    : k /* otherwise keep the key as-is */]: Inp[k];\n};\n\n/**\n * Converts or omits an object's keys according to a mapping.\n *\n * @param inp An object whose keys will be remapped\n * @param mappings A mapping of original keys to new keys. If a key is not present in the mapping, it will be left as is. If a key is mapped to `null`, it will be removed in the resulting object.\n * @returns A new object with keys remapped or omitted according to the mappings\n */\nexport function remap<\n  Inp extends Record<string, unknown>,\n  const Mapping extends { [k in keyof Inp]?: string | null },\n>(inp: Inp, mappings: Mapping): Remap<Inp, Mapping> {\n  let out: any = {};\n\n  if (!Object.keys(mappings).length) {\n    out = inp;\n    return out;\n  }\n\n  for (const [k, v] of Object.entries(inp)) {\n    const j = mappings[k];\n    if (j === null) {\n      continue;\n    }\n    out[j ?? k] = v;\n  }\n\n  return out;\n}\n\nexport function combineSignals(\n  ...signals: Array<AbortSignal | null | undefined>\n): AbortSignal | null {\n  const filtered: AbortSignal[] = [];\n  for (const signal of signals) {\n    if (signal) {\n      filtered.push(signal);\n    }\n  }\n\n  switch (filtered.length) {\n    case 0:\n    case 1:\n      return filtered[0] || null;\n    default:\n      if (\"any\" in AbortSignal && typeof AbortSignal.any === \"function\") {\n        return AbortSignal.any(filtered);\n      }\n      return abortSignalAny(filtered);\n  }\n}\n\nexport function abortSignalAny(signals: AbortSignal[]): AbortSignal {\n  const controller = new AbortController();\n  const result = controller.signal;\n  if (!signals.length) {\n    return controller.signal;\n  }\n\n  if (signals.length === 1) {\n    return signals[0] || controller.signal;\n  }\n\n  for (const signal of signals) {\n    if (signal.aborted) {\n      return signal;\n    }\n  }\n\n  function abort(this: AbortSignal) {\n    controller.abort(this.reason);\n    clean();\n  }\n\n  const signalRefs: WeakRef<AbortSignal>[] = [];\n  function clean() {\n    for (const signalRef of signalRefs) {\n      const signal = signalRef.deref();\n      if (signal) {\n        signal.removeEventListener(\"abort\", abort);\n      }\n    }\n  }\n\n  for (const signal of signals) {\n    signalRefs.push(new WeakRef(signal));\n    signal.addEventListener(\"abort\", abort);\n  }\n\n  return result;\n}\n\nexport function compactMap<T>(\n  values: Record<string, T | undefined>,\n): Record<string, T> {\n  const out: Record<string, T> = {};\n\n  for (const [k, v] of Object.entries(values)) {\n    if (typeof v !== \"undefined\") {\n      out[k] = v;\n    }\n  }\n\n  return out;\n}\n\nexport function allRequired<V extends Record<string, unknown>>(\n  v: V,\n):\n  | {\n      [K in keyof V]: NonNullable<V[K]>;\n    }\n  | undefined {\n  if (Object.values(v).every((x) => x == null)) {\n    return void 0;\n  }\n\n  return v as ReturnType<typeof allRequired<V>>;\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\nexport type ActivateLicenseRequestEntity = {\n  /**\n   * The license key to activate.\n   */\n  key: string;\n  /**\n   * A label for the new instance to identify it in Creem.\n   */\n  instanceName: string;\n};\n\n/** @internal */\nexport const ActivateLicenseRequestEntity$inboundSchema: z.ZodType<\n  ActivateLicenseRequestEntity,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  key: z.string(),\n  instance_name: z.string(),\n}).transform((v) => {\n  return remap$(v, {\n    \"instance_name\": \"instanceName\",\n  });\n});\n\n/** @internal */\nexport type ActivateLicenseRequestEntity$Outbound = {\n  key: string;\n  instance_name: string;\n};\n\n/** @internal */\nexport const ActivateLicenseRequestEntity$outboundSchema: z.ZodType<\n  ActivateLicenseRequestEntity$Outbound,\n  z.ZodTypeDef,\n  ActivateLicenseRequestEntity\n> = z.object({\n  key: z.string(),\n  instanceName: z.string(),\n}).transform((v) => {\n  return remap$(v, {\n    instanceName: \"instance_name\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace ActivateLicenseRequestEntity$ {\n  /** @deprecated use `ActivateLicenseRequestEntity$inboundSchema` instead. */\n  export const inboundSchema = ActivateLicenseRequestEntity$inboundSchema;\n  /** @deprecated use `ActivateLicenseRequestEntity$outboundSchema` instead. */\n  export const outboundSchema = ActivateLicenseRequestEntity$outboundSchema;\n  /** @deprecated use `ActivateLicenseRequestEntity$Outbound` instead. */\n  export type Outbound = ActivateLicenseRequestEntity$Outbound;\n}\n\nexport function activateLicenseRequestEntityToJSON(\n  activateLicenseRequestEntity: ActivateLicenseRequestEntity,\n): string {\n  return JSON.stringify(\n    ActivateLicenseRequestEntity$outboundSchema.parse(\n      activateLicenseRequestEntity,\n    ),\n  );\n}\n\nexport function activateLicenseRequestEntityFromJSON(\n  jsonString: string,\n): SafeParseResult<ActivateLicenseRequestEntity, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => ActivateLicenseRequestEntity$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'ActivateLicenseRequestEntity' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { ClosedEnum } from \"../../types/enums.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\n/**\n * String representing the environment.\n */\nexport const CustomerEntityMode = {\n  Test: \"test\",\n  Prod: \"prod\",\n  Sandbox: \"sandbox\",\n} as const;\n/**\n * String representing the environment.\n */\nexport type CustomerEntityMode = ClosedEnum<typeof CustomerEntityMode>;\n\nexport type CustomerEntity = {\n  /**\n   * Unique identifier for the object.\n   */\n  id: string;\n  /**\n   * String representing the environment.\n   */\n  mode: CustomerEntityMode;\n  /**\n   * String representing the object’s type. Objects of the same type share the same value.\n   */\n  object: string;\n  /**\n   * Customer email address.\n   */\n  email: string;\n  /**\n   * Customer name.\n   */\n  name?: string | undefined;\n  /**\n   * The ISO alpha-2 country code for the customer.\n   */\n  country: string;\n  /**\n   * Creation date of the product\n   */\n  createdAt: Date;\n  /**\n   * Last updated date of the product\n   */\n  updatedAt: Date;\n};\n\n/** @internal */\nexport const CustomerEntityMode$inboundSchema: z.ZodNativeEnum<\n  typeof CustomerEntityMode\n> = z.nativeEnum(CustomerEntityMode);\n\n/** @internal */\nexport const CustomerEntityMode$outboundSchema: z.ZodNativeEnum<\n  typeof CustomerEntityMode\n> = CustomerEntityMode$inboundSchema;\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace CustomerEntityMode$ {\n  /** @deprecated use `CustomerEntityMode$inboundSchema` instead. */\n  export const inboundSchema = CustomerEntityMode$inboundSchema;\n  /** @deprecated use `CustomerEntityMode$outboundSchema` instead. */\n  export const outboundSchema = CustomerEntityMode$outboundSchema;\n}\n\n/** @internal */\nexport const CustomerEntity$inboundSchema: z.ZodType<\n  CustomerEntity,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  id: z.string(),\n  mode: CustomerEntityMode$inboundSchema,\n  object: z.string(),\n  email: z.string(),\n  name: z.string().optional(),\n  country: z.string(),\n  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),\n  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),\n}).transform((v) => {\n  return remap$(v, {\n    \"created_at\": \"createdAt\",\n    \"updated_at\": \"updatedAt\",\n  });\n});\n\n/** @internal */\nexport type CustomerEntity$Outbound = {\n  id: string;\n  mode: string;\n  object: string;\n  email: string;\n  name?: string | undefined;\n  country: string;\n  created_at: string;\n  updated_at: string;\n};\n\n/** @internal */\nexport const CustomerEntity$outboundSchema: z.ZodType<\n  CustomerEntity$Outbound,\n  z.ZodTypeDef,\n  CustomerEntity\n> = z.object({\n  id: z.string(),\n  mode: CustomerEntityMode$outboundSchema,\n  object: z.string(),\n  email: z.string(),\n  name: z.string().optional(),\n  country: z.string(),\n  createdAt: z.date().transform(v => v.toISOString()),\n  updatedAt: z.date().transform(v => v.toISOString()),\n}).transform((v) => {\n  return remap$(v, {\n    createdAt: \"created_at\",\n    updatedAt: \"updated_at\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace CustomerEntity$ {\n  /** @deprecated use `CustomerEntity$inboundSchema` instead. */\n  export const inboundSchema = CustomerEntity$inboundSchema;\n  /** @deprecated use `CustomerEntity$outboundSchema` instead. */\n  export const outboundSchema = CustomerEntity$outboundSchema;\n  /** @deprecated use `CustomerEntity$Outbound` instead. */\n  export type Outbound = CustomerEntity$Outbound;\n}\n\nexport function customerEntityToJSON(customerEntity: CustomerEntity): string {\n  return JSON.stringify(CustomerEntity$outboundSchema.parse(customerEntity));\n}\n\nexport function customerEntityFromJSON(\n  jsonString: string,\n): SafeParseResult<CustomerEntity, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => CustomerEntity$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'CustomerEntity' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\nexport type Text = {\n  /**\n   * Maximum character length constraint for the input.\n   */\n  maxLength?: number | undefined;\n  /**\n   * Minimum character length requirement for the input.\n   */\n  minLength?: number | undefined;\n};\n\n/** @internal */\nexport const Text$inboundSchema: z.ZodType<Text, z.ZodTypeDef, unknown> = z\n  .object({\n    max_length: z.number().optional(),\n    min_length: z.number().optional(),\n  }).transform((v) => {\n    return remap$(v, {\n      \"max_length\": \"maxLength\",\n      \"min_length\": \"minLength\",\n    });\n  });\n\n/** @internal */\nexport type Text$Outbound = {\n  max_length?: number | undefined;\n  min_length?: number | undefined;\n};\n\n/** @internal */\nexport const Text$outboundSchema: z.ZodType<Text$Outbound, z.ZodTypeDef, Text> =\n  z.object({\n    maxLength: z.number().optional(),\n    minLength: z.number().optional(),\n  }).transform((v) => {\n    return remap$(v, {\n      maxLength: \"max_length\",\n      minLength: \"min_length\",\n    });\n  });\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace Text$ {\n  /** @deprecated use `Text$inboundSchema` instead. */\n  export const inboundSchema = Text$inboundSchema;\n  /** @deprecated use `Text$outboundSchema` instead. */\n  export const outboundSchema = Text$outboundSchema;\n  /** @deprecated use `Text$Outbound` instead. */\n  export type Outbound = Text$Outbound;\n}\n\nexport function textToJSON(text: Text): string {\n  return JSON.stringify(Text$outboundSchema.parse(text));\n}\n\nexport function textFromJSON(\n  jsonString: string,\n): SafeParseResult<Text, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => Text$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'Text' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\nimport {\n  Text,\n  Text$inboundSchema,\n  Text$Outbound,\n  Text$outboundSchema,\n} from \"./text.js\";\n\nexport type CustomField = {\n  /**\n   * The type of the field.\n   */\n  type: string;\n  /**\n   * Unique key for custom field. Must be unique to this field, alphanumeric, and up to 200 characters.\n   */\n  key: string;\n  /**\n   * The label for the field, displayed to the customer, up to 50 characters\n   */\n  label: string;\n  /**\n   * Whether the customer is required to complete the field. Defaults to `false`.\n   */\n  optional?: boolean | undefined;\n  /**\n   * Whether the customer is required to complete the field. Defaults to `false`.\n   */\n  text?: Text | undefined;\n};\n\n/** @internal */\nexport const CustomField$inboundSchema: z.ZodType<\n  CustomField,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  type: z.string(),\n  key: z.string(),\n  label: z.string(),\n  optional: z.boolean().optional(),\n  text: Text$inboundSchema.optional(),\n});\n\n/** @internal */\nexport type CustomField$Outbound = {\n  type: string;\n  key: string;\n  label: string;\n  optional?: boolean | undefined;\n  text?: Text$Outbound | undefined;\n};\n\n/** @internal */\nexport const CustomField$outboundSchema: z.ZodType<\n  CustomField$Outbound,\n  z.ZodTypeDef,\n  CustomField\n> = z.object({\n  type: z.string(),\n  key: z.string(),\n  label: z.string(),\n  optional: z.boolean().optional(),\n  text: Text$outboundSchema.optional(),\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace CustomField$ {\n  /** @deprecated use `CustomField$inboundSchema` instead. */\n  export const inboundSchema = CustomField$inboundSchema;\n  /** @deprecated use `CustomField$outboundSchema` instead. */\n  export const outboundSchema = CustomField$outboundSchema;\n  /** @deprecated use `CustomField$Outbound` instead. */\n  export type Outbound = CustomField$Outbound;\n}\n\nexport function customFieldToJSON(customField: CustomField): string {\n  return JSON.stringify(CustomField$outboundSchema.parse(customField));\n}\n\nexport function customFieldFromJSON(\n  jsonString: string,\n): SafeParseResult<CustomField, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => CustomField$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'CustomField' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { ClosedEnum } from \"../../types/enums.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\n/**\n * String representing the environment.\n */\nexport const OrderEntityMode = {\n  Test: \"test\",\n  Prod: \"prod\",\n  Sandbox: \"sandbox\",\n} as const;\n/**\n * String representing the environment.\n */\nexport type OrderEntityMode = ClosedEnum<typeof OrderEntityMode>;\n\n/**\n * Current status of the order.\n */\nexport const OrderEntityStatus = {\n  Pending: \"pending\",\n  Paid: \"paid\",\n} as const;\n/**\n * Current status of the order.\n */\nexport type OrderEntityStatus = ClosedEnum<typeof OrderEntityStatus>;\n\n/**\n * The type of order. This can specify whether it's a regular purchase, subscription, etc.\n */\nexport const OrderEntityType = {\n  Recurring: \"recurring\",\n  Onetime: \"onetime\",\n} as const;\n/**\n * The type of order. This can specify whether it's a regular purchase, subscription, etc.\n */\nexport type OrderEntityType = ClosedEnum<typeof OrderEntityType>;\n\nexport type OrderEntity = {\n  /**\n   * Unique identifier for the object.\n   */\n  id: string;\n  /**\n   * String representing the environment.\n   */\n  mode: OrderEntityMode;\n  /**\n   * String representing the object's type. Objects of the same type share the same value.\n   */\n  object: string;\n  /**\n   * The customer who placed the order.\n   */\n  customer?: string | undefined;\n  /**\n   * The product associated with the order.\n   */\n  product: string;\n  /**\n   * The transaction ID of the order\n   */\n  transaction?: string | undefined;\n  /**\n   * The discount ID of the order\n   */\n  discount?: string | undefined;\n  /**\n   * The total amount of the order in cents. 1000 = $10.00\n   */\n  amount: number;\n  /**\n   * The subtotal of the order in cents. 1000 = $10.00\n   */\n  subTotal?: number | undefined;\n  /**\n   * The tax amount of the order in cents. 1000 = $10.00\n   */\n  taxAmount?: number | undefined;\n  /**\n   * The discount amount of the order in cents. 1000 = $10.00\n   */\n  discountAmount?: number | undefined;\n  /**\n   * The amount due for the order in cents. 1000 = $10.00\n   */\n  amountDue?: number | undefined;\n  /**\n   * The amount paid for the order in cents. 1000 = $10.00\n   */\n  amountPaid?: number | undefined;\n  /**\n   * Three-letter ISO currency code, in uppercase. Must be a supported currency.\n   */\n  currency: string;\n  /**\n   * The amount in the foreign currency, if applicable.\n   */\n  fxAmount?: number | undefined;\n  /**\n   * Three-letter ISO code of the foreign currency, if applicable.\n   */\n  fxCurrency?: string | undefined;\n  /**\n   * The exchange rate used for converting between currencies, if applicable.\n   */\n  fxRate?: number | undefined;\n  /**\n   * Current status of the order.\n   */\n  status: OrderEntityStatus;\n  /**\n   * The type of order. This can specify whether it's a regular purchase, subscription, etc.\n   */\n  type: OrderEntityType;\n  /**\n   * The affiliate associated with the order, if applicable.\n   */\n  affiliate?: string | undefined;\n  /**\n   * Creation date of the order\n   */\n  createdAt: Date;\n  /**\n   * Last updated date of the order\n   */\n  updatedAt: Date;\n};\n\n/** @internal */\nexport const OrderEntityMode$inboundSchema: z.ZodNativeEnum<\n  typeof OrderEntityMode\n> = z.nativeEnum(OrderEntityMode);\n\n/** @internal */\nexport const OrderEntityMode$outboundSchema: z.ZodNativeEnum<\n  typeof OrderEntityMode\n> = OrderEntityMode$inboundSchema;\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace OrderEntityMode$ {\n  /** @deprecated use `OrderEntityMode$inboundSchema` instead. */\n  export const inboundSchema = OrderEntityMode$inboundSchema;\n  /** @deprecated use `OrderEntityMode$outboundSchema` instead. */\n  export const outboundSchema = OrderEntityMode$outboundSchema;\n}\n\n/** @internal */\nexport const OrderEntityStatus$inboundSchema: z.ZodNativeEnum<\n  typeof OrderEntityStatus\n> = z.nativeEnum(OrderEntityStatus);\n\n/** @internal */\nexport const OrderEntityStatus$outboundSchema: z.ZodNativeEnum<\n  typeof OrderEntityStatus\n> = OrderEntityStatus$inboundSchema;\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace OrderEntityStatus$ {\n  /** @deprecated use `OrderEntityStatus$inboundSchema` instead. */\n  export const inboundSchema = OrderEntityStatus$inboundSchema;\n  /** @deprecated use `OrderEntityStatus$outboundSchema` instead. */\n  export const outboundSchema = OrderEntityStatus$outboundSchema;\n}\n\n/** @internal */\nexport const OrderEntityType$inboundSchema: z.ZodNativeEnum<\n  typeof OrderEntityType\n> = z.nativeEnum(OrderEntityType);\n\n/** @internal */\nexport const OrderEntityType$outboundSchema: z.ZodNativeEnum<\n  typeof OrderEntityType\n> = OrderEntityType$inboundSchema;\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace OrderEntityType$ {\n  /** @deprecated use `OrderEntityType$inboundSchema` instead. */\n  export const inboundSchema = OrderEntityType$inboundSchema;\n  /** @deprecated use `OrderEntityType$outboundSchema` instead. */\n  export const outboundSchema = OrderEntityType$outboundSchema;\n}\n\n/** @internal */\nexport const OrderEntity$inboundSchema: z.ZodType<\n  OrderEntity,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  id: z.string(),\n  mode: OrderEntityMode$inboundSchema,\n  object: z.string(),\n  customer: z.string().optional(),\n  product: z.string(),\n  transaction: z.string().optional(),\n  discount: z.string().optional(),\n  amount: z.number(),\n  sub_total: z.number().optional(),\n  tax_amount: z.number().optional(),\n  discount_amount: z.number().optional(),\n  amount_due: z.number().optional(),\n  amount_paid: z.number().optional(),\n  currency: z.string(),\n  fx_amount: z.number().optional(),\n  fx_currency: z.string().optional(),\n  fx_rate: z.number().optional(),\n  status: OrderEntityStatus$inboundSchema,\n  type: OrderEntityType$inboundSchema,\n  affiliate: z.string().optional(),\n  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),\n  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),\n}).transform((v) => {\n  return remap$(v, {\n    \"sub_total\": \"subTotal\",\n    \"tax_amount\": \"taxAmount\",\n    \"discount_amount\": \"discountAmount\",\n    \"amount_due\": \"amountDue\",\n    \"amount_paid\": \"amountPaid\",\n    \"fx_amount\": \"fxAmount\",\n    \"fx_currency\": \"fxCurrency\",\n    \"fx_rate\": \"fxRate\",\n    \"created_at\": \"createdAt\",\n    \"updated_at\": \"updatedAt\",\n  });\n});\n\n/** @internal */\nexport type OrderEntity$Outbound = {\n  id: string;\n  mode: string;\n  object: string;\n  customer?: string | undefined;\n  product: string;\n  transaction?: string | undefined;\n  discount?: string | undefined;\n  amount: number;\n  sub_total?: number | undefined;\n  tax_amount?: number | undefined;\n  discount_amount?: number | undefined;\n  amount_due?: number | undefined;\n  amount_paid?: number | undefined;\n  currency: string;\n  fx_amount?: number | undefined;\n  fx_currency?: string | undefined;\n  fx_rate?: number | undefined;\n  status: string;\n  type: string;\n  affiliate?: string | undefined;\n  created_at: string;\n  updated_at: string;\n};\n\n/** @internal */\nexport const OrderEntity$outboundSchema: z.ZodType<\n  OrderEntity$Outbound,\n  z.ZodTypeDef,\n  OrderEntity\n> = z.object({\n  id: z.string(),\n  mode: OrderEntityMode$outboundSchema,\n  object: z.string(),\n  customer: z.string().optional(),\n  product: z.string(),\n  transaction: z.string().optional(),\n  discount: z.string().optional(),\n  amount: z.number(),\n  subTotal: z.number().optional(),\n  taxAmount: z.number().optional(),\n  discountAmount: z.number().optional(),\n  amountDue: z.number().optional(),\n  amountPaid: z.number().optional(),\n  currency: z.string(),\n  fxAmount: z.number().optional(),\n  fxCurrency: z.string().optional(),\n  fxRate: z.number().optional(),\n  status: OrderEntityStatus$outboundSchema,\n  type: OrderEntityType$outboundSchema,\n  affiliate: z.string().optional(),\n  createdAt: z.date().transform(v => v.toISOString()),\n  updatedAt: z.date().transform(v => v.toISOString()),\n}).transform((v) => {\n  return remap$(v, {\n    subTotal: \"sub_total\",\n    taxAmount: \"tax_amount\",\n    discountAmount: \"discount_amount\",\n    amountDue: \"amount_due\",\n    amountPaid: \"amount_paid\",\n    fxAmount: \"fx_amount\",\n    fxCurrency: \"fx_currency\",\n    fxRate: \"fx_rate\",\n    createdAt: \"created_at\",\n    updatedAt: \"updated_at\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace OrderEntity$ {\n  /** @deprecated use `OrderEntity$inboundSchema` instead. */\n  export const inboundSchema = OrderEntity$inboundSchema;\n  /** @deprecated use `OrderEntity$outboundSchema` instead. */\n  export const outboundSchema = OrderEntity$outboundSchema;\n  /** @deprecated use `OrderEntity$Outbound` instead. */\n  export type Outbound = OrderEntity$Outbound;\n}\n\nexport function orderEntityToJSON(orderEntity: OrderEntity): string {\n  return JSON.stringify(OrderEntity$outboundSchema.parse(orderEntity));\n}\n\nexport function orderEntityFromJSON(\n  jsonString: string,\n): SafeParseResult<OrderEntity, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => OrderEntity$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'OrderEntity' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\nexport type FeatureEntity = {\n  /**\n   * Unique identifier for the feature.\n   */\n  id: string;\n  /**\n   * The feature type.\n   */\n  type: string;\n  /**\n   * A brief description of the feature\n   */\n  description: string;\n};\n\n/** @internal */\nexport const FeatureEntity$inboundSchema: z.ZodType<\n  FeatureEntity,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  id: z.string(),\n  type: z.string(),\n  description: z.string(),\n});\n\n/** @internal */\nexport type FeatureEntity$Outbound = {\n  id: string;\n  type: string;\n  description: string;\n};\n\n/** @internal */\nexport const FeatureEntity$outboundSchema: z.ZodType<\n  FeatureEntity$Outbound,\n  z.ZodTypeDef,\n  FeatureEntity\n> = z.object({\n  id: z.string(),\n  type: z.string(),\n  description: z.string(),\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace FeatureEntity$ {\n  /** @deprecated use `FeatureEntity$inboundSchema` instead. */\n  export const inboundSchema = FeatureEntity$inboundSchema;\n  /** @deprecated use `FeatureEntity$outboundSchema` instead. */\n  export const outboundSchema = FeatureEntity$outboundSchema;\n  /** @deprecated use `FeatureEntity$Outbound` instead. */\n  export type Outbound = FeatureEntity$Outbound;\n}\n\nexport function featureEntityToJSON(featureEntity: FeatureEntity): string {\n  return JSON.stringify(FeatureEntity$outboundSchema.parse(featureEntity));\n}\n\nexport function featureEntityFromJSON(\n  jsonString: string,\n): SafeParseResult<FeatureEntity, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => FeatureEntity$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'FeatureEntity' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { ClosedEnum } from \"../../types/enums.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\nimport {\n  FeatureEntity,\n  FeatureEntity$inboundSchema,\n  FeatureEntity$Outbound,\n  FeatureEntity$outboundSchema,\n} from \"./featureentity.js\";\n\n/**\n * String representing the environment.\n */\nexport const Mode = {\n  Test: \"test\",\n  Prod: \"prod\",\n  Sandbox: \"sandbox\",\n} as const;\n/**\n * String representing the environment.\n */\nexport type Mode = ClosedEnum<typeof Mode>;\n\nexport type ProductEntity = {\n  /**\n   * Unique identifier for the object.\n   */\n  id: string;\n  /**\n   * String representing the environment.\n   */\n  mode: Mode;\n  /**\n   * String representing the object's type. Objects of the same type share the same value.\n   */\n  object: string;\n  /**\n   * The name of the product\n   */\n  name: string;\n  /**\n   * A brief description of the product\n   */\n  description: string;\n  /**\n   * URL of the product image. Only png as jpg are supported\n   */\n  imageUrl?: string | undefined;\n  /**\n   * Features of the product.\n   */\n  features?: Array<FeatureEntity> | undefined;\n  /**\n   * The price of the product in cents. 1000 = $10.00\n   */\n  price: number;\n  /**\n   * Three-letter ISO currency code, in uppercase. Must be a supported currency.\n   */\n  currency: string;\n  /**\n   * Indicates the billing method for the customer. It can either be a `recurring` billing cycle or a `onetime` payment.\n   */\n  billingType: string;\n  /**\n   * Billing period\n   */\n  billingPeriod: string;\n  /**\n   * Status of the product\n   */\n  status: string;\n  /**\n   * Specifies the tax calculation mode for the transaction. If set to \"inclusive,\" the tax is included in the price. If set to \"exclusive,\" the tax is added on top of the price.\n   */\n  taxMode: string;\n  /**\n   * Categorizes the type of product or service for tax purposes. This helps determine the applicable tax rules based on the nature of the item or service.\n   */\n  taxCategory: string;\n  /**\n   * The product page you can redirect your customers to for express checkout.\n   */\n  productUrl?: string | undefined;\n  /**\n   * The URL to which the user will be redirected after successfull payment.\n   */\n  defaultSuccessUrl?: string | null | undefined;\n  /**\n   * Creation date of the product\n   */\n  createdAt: Date;\n  /**\n   * Last updated date of the product\n   */\n  updatedAt: Date;\n};\n\n/** @internal */\nexport const Mode$inboundSchema: z.ZodNativeEnum<typeof Mode> = z.nativeEnum(\n  Mode,\n);\n\n/** @internal */\nexport const Mode$outboundSchema: z.ZodNativeEnum<typeof Mode> =\n  Mode$inboundSchema;\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace Mode$ {\n  /** @deprecated use `Mode$inboundSchema` instead. */\n  export const inboundSchema = Mode$inboundSchema;\n  /** @deprecated use `Mode$outboundSchema` instead. */\n  export const outboundSchema = Mode$outboundSchema;\n}\n\n/** @internal */\nexport const ProductEntity$inboundSchema: z.ZodType<\n  ProductEntity,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  id: z.string(),\n  mode: Mode$inboundSchema,\n  object: z.string(),\n  name: z.string(),\n  description: z.string(),\n  image_url: z.string().optional(),\n  features: z.array(FeatureEntity$inboundSchema).optional(),\n  price: z.number(),\n  currency: z.string(),\n  billing_type: z.string(),\n  billing_period: z.string(),\n  status: z.string(),\n  tax_mode: z.string(),\n  tax_category: z.string(),\n  product_url: z.string().optional(),\n  default_success_url: z.nullable(z.string()).optional(),\n  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),\n  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),\n}).transform((v) => {\n  return remap$(v, {\n    \"image_url\": \"imageUrl\",\n    \"billing_type\": \"billingType\",\n    \"billing_period\": \"billingPeriod\",\n    \"tax_mode\": \"taxMode\",\n    \"tax_category\": \"taxCategory\",\n    \"product_url\": \"productUrl\",\n    \"default_success_url\": \"defaultSuccessUrl\",\n    \"created_at\": \"createdAt\",\n    \"updated_at\": \"updatedAt\",\n  });\n});\n\n/** @internal */\nexport type ProductEntity$Outbound = {\n  id: string;\n  mode: string;\n  object: string;\n  name: string;\n  description: string;\n  image_url?: string | undefined;\n  features?: Array<FeatureEntity$Outbound> | undefined;\n  price: number;\n  currency: string;\n  billing_type: string;\n  billing_period: string;\n  status: string;\n  tax_mode: string;\n  tax_category: string;\n  product_url?: string | undefined;\n  default_success_url?: string | null | undefined;\n  created_at: string;\n  updated_at: string;\n};\n\n/** @internal */\nexport const ProductEntity$outboundSchema: z.ZodType<\n  ProductEntity$Outbound,\n  z.ZodTypeDef,\n  ProductEntity\n> = z.object({\n  id: z.string(),\n  mode: Mode$outboundSchema,\n  object: z.string(),\n  name: z.string(),\n  description: z.string(),\n  imageUrl: z.string().optional(),\n  features: z.array(FeatureEntity$outboundSchema).optional(),\n  price: z.number(),\n  currency: z.string(),\n  billingType: z.string(),\n  billingPeriod: z.string(),\n  status: z.string(),\n  taxMode: z.string(),\n  taxCategory: z.string(),\n  productUrl: z.string().optional(),\n  defaultSuccessUrl: z.nullable(z.string()).optional(),\n  createdAt: z.date().transform(v => v.toISOString()),\n  updatedAt: z.date().transform(v => v.toISOString()),\n}).transform((v) => {\n  return remap$(v, {\n    imageUrl: \"image_url\",\n    billingType: \"billing_type\",\n    billingPeriod: \"billing_period\",\n    taxMode: \"tax_mode\",\n    taxCategory: \"tax_category\",\n    productUrl: \"product_url\",\n    defaultSuccessUrl: \"default_success_url\",\n    createdAt: \"created_at\",\n    updatedAt: \"updated_at\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace ProductEntity$ {\n  /** @deprecated use `ProductEntity$inboundSchema` instead. */\n  export const inboundSchema = ProductEntity$inboundSchema;\n  /** @deprecated use `ProductEntity$outboundSchema` instead. */\n  export const outboundSchema = ProductEntity$outboundSchema;\n  /** @deprecated use `ProductEntity$Outbound` instead. */\n  export type Outbound = ProductEntity$Outbound;\n}\n\nexport function productEntityToJSON(productEntity: ProductEntity): string {\n  return JSON.stringify(ProductEntity$outboundSchema.parse(productEntity));\n}\n\nexport function productEntityFromJSON(\n  jsonString: string,\n): SafeParseResult<ProductEntity, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => ProductEntity$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'ProductEntity' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { ClosedEnum } from \"../../types/enums.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\n/**\n * String representing the environment.\n */\nexport const LicenseEntityMode = {\n  Test: \"test\",\n  Prod: \"prod\",\n  Sandbox: \"sandbox\",\n} as const;\n/**\n * String representing the environment.\n */\nexport type LicenseEntityMode = ClosedEnum<typeof LicenseEntityMode>;\n\n/**\n * The current status of the license key.\n */\nexport const LicenseEntityStatus = {\n  Inactive: \"inactive\",\n  Active: \"active\",\n  Expired: \"expired\",\n  Disabled: \"disabled\",\n} as const;\n/**\n * The current status of the license key.\n */\nexport type LicenseEntityStatus = ClosedEnum<typeof LicenseEntityStatus>;\n\n/**\n * The activation limit. Null if activations are unlimited.\n */\nexport type ActivationLimit = {};\n\n/**\n * The date the license key expires. Null if it does not have an expiration date.\n */\nexport type ExpiresAt = {};\n\n/**\n * String representing the environment.\n */\nexport const LicenseEntityInstanceMode = {\n  Test: \"test\",\n  Prod: \"prod\",\n  Sandbox: \"sandbox\",\n} as const;\n/**\n * String representing the environment.\n */\nexport type LicenseEntityInstanceMode = ClosedEnum<\n  typeof LicenseEntityInstanceMode\n>;\n\n/**\n * The status of the license instance.\n */\nexport const LicenseEntityInstanceStatus = {\n  Active: \"active\",\n  Deactivated: \"deactivated\",\n} as const;\n/**\n * The status of the license instance.\n */\nexport type LicenseEntityInstanceStatus = ClosedEnum<\n  typeof LicenseEntityInstanceStatus\n>;\n\n/**\n * Associated license instances.\n */\nexport type Instance = {\n  /**\n   * Unique identifier for the object.\n   */\n  id: string;\n  /**\n   * String representing the environment.\n   */\n  mode: LicenseEntityInstanceMode;\n  /**\n   * A string representing the object’s type. Objects of the same type share the same value.\n   */\n  object: string;\n  /**\n   * The name of the license instance.\n   */\n  name: string;\n  /**\n   * The status of the license instance.\n   */\n  status: LicenseEntityInstanceStatus;\n  /**\n   * The creation date of the license instance.\n   */\n  createdAt: Date;\n};\n\nexport type LicenseEntity = {\n  /**\n   * Unique identifier for the object.\n   */\n  id: string;\n  /**\n   * String representing the environment.\n   */\n  mode: LicenseEntityMode;\n  /**\n   * A string representing the object’s type. Objects of the same type share the same value.\n   */\n  object: string;\n  /**\n   * The current status of the license key.\n   */\n  status: LicenseEntityStatus;\n  /**\n   * The license key.\n   */\n  key: string;\n  /**\n   * The number of instances that this license key was activated.\n   */\n  activation: number;\n  /**\n   * The activation limit. Null if activations are unlimited.\n   */\n  activationLimit?: ActivationLimit | null | undefined;\n  /**\n   * The date the license key expires. Null if it does not have an expiration date.\n   */\n  expiresAt?: ExpiresAt | null | undefined;\n  /**\n   * The creation date of the license key.\n   */\n  createdAt: Date;\n  /**\n   * Associated license instances.\n   */\n  instance?: Instance | null | undefined;\n};\n\n/** @internal */\nexport const LicenseEntityMode$inboundSchema: z.ZodNativeEnum<\n  typeof LicenseEntityMode\n> = z.nativeEnum(LicenseEntityMode);\n\n/** @internal */\nexport const LicenseEntityMode$outboundSchema: z.ZodNativeEnum<\n  typeof LicenseEntityMode\n> = LicenseEntityMode$inboundSchema;\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace LicenseEntityMode$ {\n  /** @deprecated use `LicenseEntityMode$inboundSchema` instead. */\n  export const inboundSchema = LicenseEntityMode$inboundSchema;\n  /** @deprecated use `LicenseEntityMode$outboundSchema` instead. */\n  export const outboundSchema = LicenseEntityMode$outboundSchema;\n}\n\n/** @internal */\nexport const LicenseEntityStatus$inboundSchema: z.ZodNativeEnum<\n  typeof LicenseEntityStatus\n> = z.nativeEnum(LicenseEntityStatus);\n\n/** @internal */\nexport const LicenseEntityStatus$outboundSchema: z.ZodNativeEnum<\n  typeof LicenseEntityStatus\n> = LicenseEntityStatus$inboundSchema;\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace LicenseEntityStatus$ {\n  /** @deprecated use `LicenseEntityStatus$inboundSchema` instead. */\n  export const inboundSchema = LicenseEntityStatus$inboundSchema;\n  /** @deprecated use `LicenseEntityStatus$outboundSchema` instead. */\n  export const outboundSchema = LicenseEntityStatus$outboundSchema;\n}\n\n/** @internal */\nexport const ActivationLimit$inboundSchema: z.ZodType<\n  ActivationLimit,\n  z.ZodTypeDef,\n  unknown\n> = z.object({});\n\n/** @internal */\nexport type ActivationLimit$Outbound = {};\n\n/** @internal */\nexport const ActivationLimit$outboundSchema: z.ZodType<\n  ActivationLimit$Outbound,\n  z.ZodTypeDef,\n  ActivationLimit\n> = z.object({});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace ActivationLimit$ {\n  /** @deprecated use `ActivationLimit$inboundSchema` instead. */\n  export const inboundSchema = ActivationLimit$inboundSchema;\n  /** @deprecated use `ActivationLimit$outboundSchema` instead. */\n  export const outboundSchema = ActivationLimit$outboundSchema;\n  /** @deprecated use `ActivationLimit$Outbound` instead. */\n  export type Outbound = ActivationLimit$Outbound;\n}\n\nexport function activationLimitToJSON(\n  activationLimit: ActivationLimit,\n): string {\n  return JSON.stringify(ActivationLimit$outboundSchema.parse(activationLimit));\n}\n\nexport function activationLimitFromJSON(\n  jsonString: string,\n): SafeParseResult<ActivationLimit, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => ActivationLimit$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'ActivationLimit' from JSON`,\n  );\n}\n\n/** @internal */\nexport const ExpiresAt$inboundSchema: z.ZodType<\n  ExpiresAt,\n  z.ZodTypeDef,\n  unknown\n> = z.object({});\n\n/** @internal */\nexport type ExpiresAt$Outbound = {};\n\n/** @internal */\nexport const ExpiresAt$outboundSchema: z.ZodType<\n  ExpiresAt$Outbound,\n  z.ZodTypeDef,\n  ExpiresAt\n> = z.object({});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace ExpiresAt$ {\n  /** @deprecated use `ExpiresAt$inboundSchema` instead. */\n  export const inboundSchema = ExpiresAt$inboundSchema;\n  /** @deprecated use `ExpiresAt$outboundSchema` instead. */\n  export const outboundSchema = ExpiresAt$outboundSchema;\n  /** @deprecated use `ExpiresAt$Outbound` instead. */\n  export type Outbound = ExpiresAt$Outbound;\n}\n\nexport function expiresAtToJSON(expiresAt: ExpiresAt): string {\n  return JSON.stringify(ExpiresAt$outboundSchema.parse(expiresAt));\n}\n\nexport function expiresAtFromJSON(\n  jsonString: string,\n): SafeParseResult<ExpiresAt, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => ExpiresAt$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'ExpiresAt' from JSON`,\n  );\n}\n\n/** @internal */\nexport const LicenseEntityInstanceMode$inboundSchema: z.ZodNativeEnum<\n  typeof LicenseEntityInstanceMode\n> = z.nativeEnum(LicenseEntityInstanceMode);\n\n/** @internal */\nexport const LicenseEntityInstanceMode$outboundSchema: z.ZodNativeEnum<\n  typeof LicenseEntityInstanceMode\n> = LicenseEntityInstanceMode$inboundSchema;\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace LicenseEntityInstanceMode$ {\n  /** @deprecated use `LicenseEntityInstanceMode$inboundSchema` instead. */\n  export const inboundSchema = LicenseEntityInstanceMode$inboundSchema;\n  /** @deprecated use `LicenseEntityInstanceMode$outboundSchema` instead. */\n  export const outboundSchema = LicenseEntityInstanceMode$outboundSchema;\n}\n\n/** @internal */\nexport const LicenseEntityInstanceStatus$inboundSchema: z.ZodNativeEnum<\n  typeof LicenseEntityInstanceStatus\n> = z.nativeEnum(LicenseEntityInstanceStatus);\n\n/** @internal */\nexport const LicenseEntityInstanceStatus$outboundSchema: z.ZodNativeEnum<\n  typeof LicenseEntityInstanceStatus\n> = LicenseEntityInstanceStatus$inboundSchema;\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace LicenseEntityInstanceStatus$ {\n  /** @deprecated use `LicenseEntityInstanceStatus$inboundSchema` instead. */\n  export const inboundSchema = LicenseEntityInstanceStatus$inboundSchema;\n  /** @deprecated use `LicenseEntityInstanceStatus$outboundSchema` instead. */\n  export const outboundSchema = LicenseEntityInstanceStatus$outboundSchema;\n}\n\n/** @internal */\nexport const Instance$inboundSchema: z.ZodType<\n  Instance,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  id: z.string(),\n  mode: LicenseEntityInstanceMode$inboundSchema,\n  object: z.string(),\n  name: z.string(),\n  status: LicenseEntityInstanceStatus$inboundSchema,\n  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),\n}).transform((v) => {\n  return remap$(v, {\n    \"created_at\": \"createdAt\",\n  });\n});\n\n/** @internal */\nexport type Instance$Outbound = {\n  id: string;\n  mode: string;\n  object: string;\n  name: string;\n  status: string;\n  created_at: string;\n};\n\n/** @internal */\nexport const Instance$outboundSchema: z.ZodType<\n  Instance$Outbound,\n  z.ZodTypeDef,\n  Instance\n> = z.object({\n  id: z.string(),\n  mode: LicenseEntityInstanceMode$outboundSchema,\n  object: z.string(),\n  name: z.string(),\n  status: LicenseEntityInstanceStatus$outboundSchema,\n  createdAt: z.date().transform(v => v.toISOString()),\n}).transform((v) => {\n  return remap$(v, {\n    createdAt: \"created_at\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace Instance$ {\n  /** @deprecated use `Instance$inboundSchema` instead. */\n  export const inboundSchema = Instance$inboundSchema;\n  /** @deprecated use `Instance$outboundSchema` instead. */\n  export const outboundSchema = Instance$outboundSchema;\n  /** @deprecated use `Instance$Outbound` instead. */\n  export type Outbound = Instance$Outbound;\n}\n\nexport function instanceToJSON(instance: Instance): string {\n  return JSON.stringify(Instance$outboundSchema.parse(instance));\n}\n\nexport function instanceFromJSON(\n  jsonString: string,\n): SafeParseResult<Instance, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => Instance$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'Instance' from JSON`,\n  );\n}\n\n/** @internal */\nexport const LicenseEntity$inboundSchema: z.ZodType<\n  LicenseEntity,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  id: z.string(),\n  mode: LicenseEntityMode$inboundSchema,\n  object: z.string(),\n  status: LicenseEntityStatus$inboundSchema,\n  key: z.string(),\n  activation: z.number(),\n  activation_limit: z.nullable(z.lazy(() => ActivationLimit$inboundSchema))\n    .optional(),\n  expires_at: z.nullable(z.lazy(() => ExpiresAt$inboundSchema)).optional(),\n  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),\n  instance: z.nullable(z.lazy(() => Instance$inboundSchema)).optional(),\n}).transform((v) => {\n  return remap$(v, {\n    \"activation_limit\": \"activationLimit\",\n    \"expires_at\": \"expiresAt\",\n    \"created_at\": \"createdAt\",\n  });\n});\n\n/** @internal */\nexport type LicenseEntity$Outbound = {\n  id: string;\n  mode: string;\n  object: string;\n  status: string;\n  key: string;\n  activation: number;\n  activation_limit?: ActivationLimit$Outbound | null | undefined;\n  expires_at?: ExpiresAt$Outbound | null | undefined;\n  created_at: string;\n  instance?: Instance$Outbound | null | undefined;\n};\n\n/** @internal */\nexport const LicenseEntity$outboundSchema: z.ZodType<\n  LicenseEntity$Outbound,\n  z.ZodTypeDef,\n  LicenseEntity\n> = z.object({\n  id: z.string(),\n  mode: LicenseEntityMode$outboundSchema,\n  object: z.string(),\n  status: LicenseEntityStatus$outboundSchema,\n  key: z.string(),\n  activation: z.number(),\n  activationLimit: z.nullable(z.lazy(() => ActivationLimit$outboundSchema))\n    .optional(),\n  expiresAt: z.nullable(z.lazy(() => ExpiresAt$outboundSchema)).optional(),\n  createdAt: z.date().transform(v => v.toISOString()),\n  instance: z.nullable(z.lazy(() => Instance$outboundSchema)).optional(),\n}).transform((v) => {\n  return remap$(v, {\n    activationLimit: \"activation_limit\",\n    expiresAt: \"expires_at\",\n    createdAt: \"created_at\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace LicenseEntity$ {\n  /** @deprecated use `LicenseEntity$inboundSchema` instead. */\n  export const inboundSchema = LicenseEntity$inboundSchema;\n  /** @deprecated use `LicenseEntity$outboundSchema` instead. */\n  export const outboundSchema = LicenseEntity$outboundSchema;\n  /** @deprecated use `LicenseEntity$Outbound` instead. */\n  export type Outbound = LicenseEntity$Outbound;\n}\n\nexport function licenseEntityToJSON(licenseEntity: LicenseEntity): string {\n  return JSON.stringify(LicenseEntity$outboundSchema.parse(licenseEntity));\n}\n\nexport function licenseEntityFromJSON(\n  jsonString: string,\n): SafeParseResult<LicenseEntity, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => LicenseEntity$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'LicenseEntity' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\nimport {\n  LicenseEntity,\n  LicenseEntity$inboundSchema,\n  LicenseEntity$Outbound,\n  LicenseEntity$outboundSchema,\n} from \"./licenseentity.js\";\n\nexport type ProductFeatureEntity = {\n  /**\n   * License key issued for the order.\n   */\n  license: LicenseEntity;\n};\n\n/** @internal */\nexport const ProductFeatureEntity$inboundSchema: z.ZodType<\n  ProductFeatureEntity,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  license: LicenseEntity$inboundSchema,\n});\n\n/** @internal */\nexport type ProductFeatureEntity$Outbound = {\n  license: LicenseEntity$Outbound;\n};\n\n/** @internal */\nexport const ProductFeatureEntity$outboundSchema: z.ZodType<\n  ProductFeatureEntity$Outbound,\n  z.ZodTypeDef,\n  ProductFeatureEntity\n> = z.object({\n  license: LicenseEntity$outboundSchema,\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace ProductFeatureEntity$ {\n  /** @deprecated use `ProductFeatureEntity$inboundSchema` instead. */\n  export const inboundSchema = ProductFeatureEntity$inboundSchema;\n  /** @deprecated use `ProductFeatureEntity$outboundSchema` instead. */\n  export const outboundSchema = ProductFeatureEntity$outboundSchema;\n  /** @deprecated use `ProductFeatureEntity$Outbound` instead. */\n  export type Outbound = ProductFeatureEntity$Outbound;\n}\n\nexport function productFeatureEntityToJSON(\n  productFeatureEntity: ProductFeatureEntity,\n): string {\n  return JSON.stringify(\n    ProductFeatureEntity$outboundSchema.parse(productFeatureEntity),\n  );\n}\n\nexport function productFeatureEntityFromJSON(\n  jsonString: string,\n): SafeParseResult<ProductFeatureEntity, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => ProductFeatureEntity$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'ProductFeatureEntity' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { ClosedEnum } from \"../../types/enums.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\n/**\n * String representing the environment.\n */\nexport const SubscriptionItemEntityMode = {\n  Test: \"test\",\n  Prod: \"prod\",\n  Sandbox: \"sandbox\",\n} as const;\n/**\n * String representing the environment.\n */\nexport type SubscriptionItemEntityMode = ClosedEnum<\n  typeof SubscriptionItemEntityMode\n>;\n\nexport type SubscriptionItemEntity = {\n  /**\n   * Unique identifier for the object.\n   */\n  id: string;\n  /**\n   * String representing the environment.\n   */\n  mode: SubscriptionItemEntityMode;\n  /**\n   * String representing the object’s type. Objects of the same type share the same value.\n   */\n  object: string;\n  /**\n   * The ID of the product associated with the subscription item.\n   */\n  productId?: string | undefined;\n  /**\n   * The ID of the price associated with the subscription item.\n   */\n  priceId?: string | undefined;\n  /**\n   * The number of units for the subscription item.\n   */\n  units?: number | undefined;\n};\n\n/** @internal */\nexport const SubscriptionItemEntityMode$inboundSchema: z.ZodNativeEnum<\n  typeof SubscriptionItemEntityMode\n> = z.nativeEnum(SubscriptionItemEntityMode);\n\n/** @internal */\nexport const SubscriptionItemEntityMode$outboundSchema: z.ZodNativeEnum<\n  typeof SubscriptionItemEntityMode\n> = SubscriptionItemEntityMode$inboundSchema;\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace SubscriptionItemEntityMode$ {\n  /** @deprecated use `SubscriptionItemEntityMode$inboundSchema` instead. */\n  export const inboundSchema = SubscriptionItemEntityMode$inboundSchema;\n  /** @deprecated use `SubscriptionItemEntityMode$outboundSchema` instead. */\n  export const outboundSchema = SubscriptionItemEntityMode$outboundSchema;\n}\n\n/** @internal */\nexport const SubscriptionItemEntity$inboundSchema: z.ZodType<\n  SubscriptionItemEntity,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  id: z.string(),\n  mode: SubscriptionItemEntityMode$inboundSchema,\n  object: z.string(),\n  product_id: z.string().optional(),\n  price_id: z.string().optional(),\n  units: z.number().optional(),\n}).transform((v) => {\n  return remap$(v, {\n    \"product_id\": \"productId\",\n    \"price_id\": \"priceId\",\n  });\n});\n\n/** @internal */\nexport type SubscriptionItemEntity$Outbound = {\n  id: string;\n  mode: string;\n  object: string;\n  product_id?: string | undefined;\n  price_id?: string | undefined;\n  units?: number | undefined;\n};\n\n/** @internal */\nexport const SubscriptionItemEntity$outboundSchema: z.ZodType<\n  SubscriptionItemEntity$Outbound,\n  z.ZodTypeDef,\n  SubscriptionItemEntity\n> = z.object({\n  id: z.string(),\n  mode: SubscriptionItemEntityMode$outboundSchema,\n  object: z.string(),\n  productId: z.string().optional(),\n  priceId: z.string().optional(),\n  units: z.number().optional(),\n}).transform((v) => {\n  return remap$(v, {\n    productId: \"product_id\",\n    priceId: \"price_id\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace SubscriptionItemEntity$ {\n  /** @deprecated use `SubscriptionItemEntity$inboundSchema` instead. */\n  export const inboundSchema = SubscriptionItemEntity$inboundSchema;\n  /** @deprecated use `SubscriptionItemEntity$outboundSchema` instead. */\n  export const outboundSchema = SubscriptionItemEntity$outboundSchema;\n  /** @deprecated use `SubscriptionItemEntity$Outbound` instead. */\n  export type Outbound = SubscriptionItemEntity$Outbound;\n}\n\nexport function subscriptionItemEntityToJSON(\n  subscriptionItemEntity: SubscriptionItemEntity,\n): string {\n  return JSON.stringify(\n    SubscriptionItemEntity$outboundSchema.parse(subscriptionItemEntity),\n  );\n}\n\nexport function subscriptionItemEntityFromJSON(\n  jsonString: string,\n): SafeParseResult<SubscriptionItemEntity, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => SubscriptionItemEntity$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'SubscriptionItemEntity' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { ClosedEnum } from \"../../types/enums.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\n/**\n * String representing the environment.\n */\nexport const TransactionEntityMode = {\n  Test: \"test\",\n  Prod: \"prod\",\n  Sandbox: \"sandbox\",\n} as const;\n/**\n * String representing the environment.\n */\nexport type TransactionEntityMode = ClosedEnum<typeof TransactionEntityMode>;\n\nexport type TransactionEntity = {\n  /**\n   * Unique identifier for the object.\n   */\n  id: string;\n  /**\n   * String representing the environment.\n   */\n  mode: TransactionEntityMode;\n  /**\n   * String representing the object's type. Objects of the same type share the same value.\n   */\n  object: string;\n  /**\n   * The transaction amount in cents. 1000 = $10.00\n   */\n  amount: number;\n  /**\n   * The amount the customer paid in cents. 1000 = $10.00\n   */\n  amountPaid?: number | undefined;\n  /**\n   * The discount amount in cents. 1000 = $10.00\n   */\n  discountAmount?: number | undefined;\n  /**\n   * Three-letter ISO currency code, in uppercase. Must be a supported currency.\n   */\n  currency: string;\n  /**\n   * The type of transaction. payment(one time payments) and invoice(subscription)\n   */\n  type: string;\n  /**\n   * The ISO alpha-2 country code where tax is collected.\n   */\n  taxCountry?: string | undefined;\n  /**\n   * The sale tax amount in cents. 1000 = $10.00\n   */\n  taxAmount?: number | undefined;\n  /**\n   * Status of the transaction.\n   */\n  status: string;\n  /**\n   * The amount that has been refunded in cents. 1000 = $10.00\n   */\n  refundedAmount?: number | null | undefined;\n  /**\n   * The order associated with the transaction.\n   */\n  order?: string | null | undefined;\n  /**\n   * The subscription associated with the transaction.\n   */\n  subscription?: string | null | undefined;\n  /**\n   * The customer associated with the transaction.\n   */\n  customer?: string | null | undefined;\n  /**\n   * The description of the transaction.\n   */\n  description?: string | undefined;\n  /**\n   * Start period for the invoice as timestamp\n   */\n  periodStart?: number | undefined;\n  /**\n   * End period for the invoice as timestamp\n   */\n  periodEnd?: number | undefined;\n  /**\n   * Creation date of the order as timestamp\n   */\n  createdAt: number;\n};\n\n/** @internal */\nexport const TransactionEntityMode$inboundSchema: z.ZodNativeEnum<\n  typeof TransactionEntityMode\n> = z.nativeEnum(TransactionEntityMode);\n\n/** @internal */\nexport const TransactionEntityMode$outboundSchema: z.ZodNativeEnum<\n  typeof TransactionEntityMode\n> = TransactionEntityMode$inboundSchema;\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace TransactionEntityMode$ {\n  /** @deprecated use `TransactionEntityMode$inboundSchema` instead. */\n  export const inboundSchema = TransactionEntityMode$inboundSchema;\n  /** @deprecated use `TransactionEntityMode$outboundSchema` instead. */\n  export const outboundSchema = TransactionEntityMode$outboundSchema;\n}\n\n/** @internal */\nexport const TransactionEntity$inboundSchema: z.ZodType<\n  TransactionEntity,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  id: z.string(),\n  mode: TransactionEntityMode$inboundSchema,\n  object: z.string(),\n  amount: z.number(),\n  amount_paid: z.number().optional(),\n  discount_amount: z.number().optional(),\n  currency: z.string(),\n  type: z.string(),\n  tax_country: z.string().optional(),\n  tax_amount: z.number().optional(),\n  status: z.string(),\n  refunded_amount: z.nullable(z.number()).optional(),\n  order: z.nullable(z.string()).optional(),\n  subscription: z.nullable(z.string()).optional(),\n  customer: z.nullable(z.string()).optional(),\n  description: z.string().optional(),\n  period_start: z.number().optional(),\n  period_end: z.number().optional(),\n  created_at: z.number(),\n}).transform((v) => {\n  return remap$(v, {\n    \"amount_paid\": \"amountPaid\",\n    \"discount_amount\": \"discountAmount\",\n    \"tax_country\": \"taxCountry\",\n    \"tax_amount\": \"taxAmount\",\n    \"refunded_amount\": \"refundedAmount\",\n    \"period_start\": \"periodStart\",\n    \"period_end\": \"periodEnd\",\n    \"created_at\": \"createdAt\",\n  });\n});\n\n/** @internal */\nexport type TransactionEntity$Outbound = {\n  id: string;\n  mode: string;\n  object: string;\n  amount: number;\n  amount_paid?: number | undefined;\n  discount_amount?: number | undefined;\n  currency: string;\n  type: string;\n  tax_country?: string | undefined;\n  tax_amount?: number | undefined;\n  status: string;\n  refunded_amount?: number | null | undefined;\n  order?: string | null | undefined;\n  subscription?: string | null | undefined;\n  customer?: string | null | undefined;\n  description?: string | undefined;\n  period_start?: number | undefined;\n  period_end?: number | undefined;\n  created_at: number;\n};\n\n/** @internal */\nexport const TransactionEntity$outboundSchema: z.ZodType<\n  TransactionEntity$Outbound,\n  z.ZodTypeDef,\n  TransactionEntity\n> = z.object({\n  id: z.string(),\n  mode: TransactionEntityMode$outboundSchema,\n  object: z.string(),\n  amount: z.number(),\n  amountPaid: z.number().optional(),\n  discountAmount: z.number().optional(),\n  currency: z.string(),\n  type: z.string(),\n  taxCountry: z.string().optional(),\n  taxAmount: z.number().optional(),\n  status: z.string(),\n  refundedAmount: z.nullable(z.number()).optional(),\n  order: z.nullable(z.string()).optional(),\n  subscription: z.nullable(z.string()).optional(),\n  customer: z.nullable(z.string()).optional(),\n  description: z.string().optional(),\n  periodStart: z.number().optional(),\n  periodEnd: z.number().optional(),\n  createdAt: z.number(),\n}).transform((v) => {\n  return remap$(v, {\n    amountPaid: \"amount_paid\",\n    discountAmount: \"discount_amount\",\n    taxCountry: \"tax_country\",\n    taxAmount: \"tax_amount\",\n    refundedAmount: \"refunded_amount\",\n    periodStart: \"period_start\",\n    periodEnd: \"period_end\",\n    createdAt: \"created_at\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace TransactionEntity$ {\n  /** @deprecated use `TransactionEntity$inboundSchema` instead. */\n  export const inboundSchema = TransactionEntity$inboundSchema;\n  /** @deprecated use `TransactionEntity$outboundSchema` instead. */\n  export const outboundSchema = TransactionEntity$outboundSchema;\n  /** @deprecated use `TransactionEntity$Outbound` instead. */\n  export type Outbound = TransactionEntity$Outbound;\n}\n\nexport function transactionEntityToJSON(\n  transactionEntity: TransactionEntity,\n): string {\n  return JSON.stringify(\n    TransactionEntity$outboundSchema.parse(transactionEntity),\n  );\n}\n\nexport function transactionEntityFromJSON(\n  jsonString: string,\n): SafeParseResult<TransactionEntity, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => TransactionEntity$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'TransactionEntity' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { ClosedEnum } from \"../../types/enums.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\nimport {\n  CustomerEntity,\n  CustomerEntity$inboundSchema,\n  CustomerEntity$Outbound,\n  CustomerEntity$outboundSchema,\n} from \"./customerentity.js\";\nimport {\n  ProductEntity,\n  ProductEntity$inboundSchema,\n  ProductEntity$Outbound,\n  ProductEntity$outboundSchema,\n} from \"./productentity.js\";\nimport {\n  SubscriptionItemEntity,\n  SubscriptionItemEntity$inboundSchema,\n  SubscriptionItemEntity$Outbound,\n  SubscriptionItemEntity$outboundSchema,\n} from \"./subscriptionitementity.js\";\nimport {\n  TransactionEntity,\n  TransactionEntity$inboundSchema,\n  TransactionEntity$Outbound,\n  TransactionEntity$outboundSchema,\n} from \"./transactionentity.js\";\n\n/**\n * String representing the environment.\n */\nexport const SubscriptionEntityMode = {\n  Test: \"test\",\n  Prod: \"prod\",\n  Sandbox: \"sandbox\",\n} as const;\n/**\n * String representing the environment.\n */\nexport type SubscriptionEntityMode = ClosedEnum<typeof SubscriptionEntityMode>;\n\n/**\n * The product associated with the subscription.\n */\nexport type Product = ProductEntity | string;\n\n/**\n * The customer who owns the subscription.\n */\nexport type Customer = CustomerEntity | string;\n\n/**\n * The current status of the subscription.\n */\nexport const Status = {\n  Active: \"active\",\n  Canceled: \"canceled\",\n  Unpaid: \"unpaid\",\n  Paused: \"paused\",\n  Trialing: \"trialing\",\n} as const;\n/**\n * The current status of the subscription.\n */\nexport type Status = ClosedEnum<typeof Status>;\n\nexport type SubscriptionEntity = {\n  /**\n   * Unique identifier for the object.\n   */\n  id: string;\n  /**\n   * String representing the environment.\n   */\n  mode: SubscriptionEntityMode;\n  /**\n   * String representing the object's type. Objects of the same type share the same value.\n   */\n  object: string;\n  /**\n   * The product associated with the subscription.\n   */\n  product: ProductEntity | string;\n  /**\n   * The customer who owns the subscription.\n   */\n  customer: CustomerEntity | string;\n  /**\n   * Subscription items.\n   */\n  items?: Array<SubscriptionItemEntity> | undefined;\n  /**\n   * The method used for collecting payments for the subscription.\n   */\n  collectionMethod: string;\n  /**\n   * The current status of the subscription.\n   */\n  status: Status;\n  /**\n   * The ID of the last paid transaction.\n   */\n  lastTransactionId?: string | undefined;\n  /**\n   * The last paid transaction.\n   */\n  lastTransaction?: TransactionEntity | undefined;\n  /**\n   * The date of the last paid transaction.\n   */\n  lastTransactionDate?: Date | undefined;\n  /**\n   * The date when the next subscription transaction will be charged.\n   */\n  nextTransactionDate?: Date | undefined;\n  /**\n   * The start date of the current subscription period.\n   */\n  currentPeriodStartDate?: Date | undefined;\n  /**\n   * The end date of the current subscription period.\n   */\n  currentPeriodEndDate?: Date | undefined;\n  /**\n   * The date and time when the subscription was canceled, if applicable.\n   */\n  canceledAt?: Date | null | undefined;\n  /**\n   * The date and time when the subscription was created.\n   */\n  createdAt: Date;\n  /**\n   * The date and time when the subscription was last updated.\n   */\n  updatedAt: Date;\n};\n\n/** @internal */\nexport const SubscriptionEntityMode$inboundSchema: z.ZodNativeEnum<\n  typeof SubscriptionEntityMode\n> = z.nativeEnum(SubscriptionEntityMode);\n\n/** @internal */\nexport const SubscriptionEntityMode$outboundSchema: z.ZodNativeEnum<\n  typeof SubscriptionEntityMode\n> = SubscriptionEntityMode$inboundSchema;\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace SubscriptionEntityMode$ {\n  /** @deprecated use `SubscriptionEntityMode$inboundSchema` instead. */\n  export const inboundSchema = SubscriptionEntityMode$inboundSchema;\n  /** @deprecated use `SubscriptionEntityMode$outboundSchema` instead. */\n  export const outboundSchema = SubscriptionEntityMode$outboundSchema;\n}\n\n/** @internal */\nexport const Product$inboundSchema: z.ZodType<Product, z.ZodTypeDef, unknown> =\n  z.union([ProductEntity$inboundSchema, z.string()]);\n\n/** @internal */\nexport type Product$Outbound = ProductEntity$Outbound | string;\n\n/** @internal */\nexport const Product$outboundSchema: z.ZodType<\n  Product$Outbound,\n  z.ZodTypeDef,\n  Product\n> = z.union([ProductEntity$outboundSchema, z.string()]);\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace Product$ {\n  /** @deprecated use `Product$inboundSchema` instead. */\n  export const inboundSchema = Product$inboundSchema;\n  /** @deprecated use `Product$outboundSchema` instead. */\n  export const outboundSchema = Product$outboundSchema;\n  /** @deprecated use `Product$Outbound` instead. */\n  export type Outbound = Product$Outbound;\n}\n\nexport function productToJSON(product: Product): string {\n  return JSON.stringify(Product$outboundSchema.parse(product));\n}\n\nexport function productFromJSON(\n  jsonString: string,\n): SafeParseResult<Product, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => Product$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'Product' from JSON`,\n  );\n}\n\n/** @internal */\nexport const Customer$inboundSchema: z.ZodType<\n  Customer,\n  z.ZodTypeDef,\n  unknown\n> = z.union([CustomerEntity$inboundSchema, z.string()]);\n\n/** @internal */\nexport type Customer$Outbound = CustomerEntity$Outbound | string;\n\n/** @internal */\nexport const Customer$outboundSchema: z.ZodType<\n  Customer$Outbound,\n  z.ZodTypeDef,\n  Customer\n> = z.union([CustomerEntity$outboundSchema, z.string()]);\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace Customer$ {\n  /** @deprecated use `Customer$inboundSchema` instead. */\n  export const inboundSchema = Customer$inboundSchema;\n  /** @deprecated use `Customer$outboundSchema` instead. */\n  export const outboundSchema = Customer$outboundSchema;\n  /** @deprecated use `Customer$Outbound` instead. */\n  export type Outbound = Customer$Outbound;\n}\n\nexport function customerToJSON(customer: Customer): string {\n  return JSON.stringify(Customer$outboundSchema.parse(customer));\n}\n\nexport function customerFromJSON(\n  jsonString: string,\n): SafeParseResult<Customer, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => Customer$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'Customer' from JSON`,\n  );\n}\n\n/** @internal */\nexport const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z\n  .nativeEnum(Status);\n\n/** @internal */\nexport const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =\n  Status$inboundSchema;\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace Status$ {\n  /** @deprecated use `Status$inboundSchema` instead. */\n  export const inboundSchema = Status$inboundSchema;\n  /** @deprecated use `Status$outboundSchema` instead. */\n  export const outboundSchema = Status$outboundSchema;\n}\n\n/** @internal */\nexport const SubscriptionEntity$inboundSchema: z.ZodType<\n  SubscriptionEntity,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  id: z.string(),\n  mode: SubscriptionEntityMode$inboundSchema,\n  object: z.string(),\n  product: z.union([ProductEntity$inboundSchema, z.string()]),\n  customer: z.union([CustomerEntity$inboundSchema, z.string()]),\n  items: z.array(SubscriptionItemEntity$inboundSchema).optional(),\n  collection_method: z.string(),\n  status: Status$inboundSchema,\n  last_transaction_id: z.string().optional(),\n  last_transaction: TransactionEntity$inboundSchema.optional(),\n  last_transaction_date: z.string().datetime({ offset: true }).transform(v =>\n    new Date(v)\n  ).optional(),\n  next_transaction_date: z.string().datetime({ offset: true }).transform(v =>\n    new Date(v)\n  ).optional(),\n  current_period_start_date: z.string().datetime({ offset: true }).transform(\n    v => new Date(v)\n  ).optional(),\n  current_period_end_date: z.string().datetime({ offset: true }).transform(v =>\n    new Date(v)\n  ).optional(),\n  canceled_at: z.nullable(\n    z.string().datetime({ offset: true }).transform(v => new Date(v)),\n  ).optional(),\n  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),\n  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),\n}).transform((v) => {\n  return remap$(v, {\n    \"collection_method\": \"collectionMethod\",\n    \"last_transaction_id\": \"lastTransactionId\",\n    \"last_transaction\": \"lastTransaction\",\n    \"last_transaction_date\": \"lastTransactionDate\",\n    \"next_transaction_date\": \"nextTransactionDate\",\n    \"current_period_start_date\": \"currentPeriodStartDate\",\n    \"current_period_end_date\": \"currentPeriodEndDate\",\n    \"canceled_at\": \"canceledAt\",\n    \"created_at\": \"createdAt\",\n    \"updated_at\": \"updatedAt\",\n  });\n});\n\n/** @internal */\nexport type SubscriptionEntity$Outbound = {\n  id: string;\n  mode: string;\n  object: string;\n  product: ProductEntity$Outbound | string;\n  customer: CustomerEntity$Outbound | string;\n  items?: Array<SubscriptionItemEntity$Outbound> | undefined;\n  collection_method: string;\n  status: string;\n  last_transaction_id?: string | undefined;\n  last_transaction?: TransactionEntity$Outbound | undefined;\n  last_transaction_date?: string | undefined;\n  next_transaction_date?: string | undefined;\n  current_period_start_date?: string | undefined;\n  current_period_end_date?: string | undefined;\n  canceled_at?: string | null | undefined;\n  created_at: string;\n  updated_at: string;\n};\n\n/** @internal */\nexport const SubscriptionEntity$outboundSchema: z.ZodType<\n  SubscriptionEntity$Outbound,\n  z.ZodTypeDef,\n  SubscriptionEntity\n> = z.object({\n  id: z.string(),\n  mode: SubscriptionEntityMode$outboundSchema,\n  object: z.string(),\n  product: z.union([ProductEntity$outboundSchema, z.string()]),\n  customer: z.union([CustomerEntity$outboundSchema, z.string()]),\n  items: z.array(SubscriptionItemEntity$outboundSchema).optional(),\n  collectionMethod: z.string(),\n  status: Status$outboundSchema,\n  lastTransactionId: z.string().optional(),\n  lastTransaction: TransactionEntity$outboundSchema.optional(),\n  lastTransactionDate: z.date().transform(v => v.toISOString()).optional(),\n  nextTransactionDate: z.date().transform(v => v.toISOString()).optional(),\n  currentPeriodStartDate: z.date().transform(v => v.toISOString()).optional(),\n  currentPeriodEndDate: z.date().transform(v => v.toISOString()).optional(),\n  canceledAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),\n  createdAt: z.date().transform(v => v.toISOString()),\n  updatedAt: z.date().transform(v => v.toISOString()),\n}).transform((v) => {\n  return remap$(v, {\n    collectionMethod: \"collection_method\",\n    lastTransactionId: \"last_transaction_id\",\n    lastTransaction: \"last_transaction\",\n    lastTransactionDate: \"last_transaction_date\",\n    nextTransactionDate: \"next_transaction_date\",\n    currentPeriodStartDate: \"current_period_start_date\",\n    currentPeriodEndDate: \"current_period_end_date\",\n    canceledAt: \"canceled_at\",\n    createdAt: \"created_at\",\n    updatedAt: \"updated_at\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace SubscriptionEntity$ {\n  /** @deprecated use `SubscriptionEntity$inboundSchema` instead. */\n  export const inboundSchema = SubscriptionEntity$inboundSchema;\n  /** @deprecated use `SubscriptionEntity$outboundSchema` instead. */\n  export const outboundSchema = SubscriptionEntity$outboundSchema;\n  /** @deprecated use `SubscriptionEntity$Outbound` instead. */\n  export type Outbound = SubscriptionEntity$Outbound;\n}\n\nexport function subscriptionEntityToJSON(\n  subscriptionEntity: SubscriptionEntity,\n): string {\n  return JSON.stringify(\n    SubscriptionEntity$outboundSchema.parse(subscriptionEntity),\n  );\n}\n\nexport function subscriptionEntityFromJSON(\n  jsonString: string,\n): SafeParseResult<SubscriptionEntity, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => SubscriptionEntity$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'SubscriptionEntity' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { ClosedEnum } from \"../../types/enums.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\nimport {\n  CustomerEntity,\n  CustomerEntity$inboundSchema,\n  CustomerEntity$Outbound,\n  CustomerEntity$outboundSchema,\n} from \"./customerentity.js\";\nimport {\n  CustomField,\n  CustomField$inboundSchema,\n  CustomField$Outbound,\n  CustomField$outboundSchema,\n} from \"./customfield.js\";\nimport {\n  OrderEntity,\n  OrderEntity$inboundSchema,\n  OrderEntity$Outbound,\n  OrderEntity$outboundSchema,\n} from \"./orderentity.js\";\nimport {\n  ProductEntity,\n  ProductEntity$inboundSchema,\n  ProductEntity$Outbound,\n  ProductEntity$outboundSchema,\n} from \"./productentity.js\";\nimport {\n  ProductFeatureEntity,\n  ProductFeatureEntity$inboundSchema,\n  ProductFeatureEntity$Outbound,\n  ProductFeatureEntity$outboundSchema,\n} from \"./productfeatureentity.js\";\nimport {\n  SubscriptionEntity,\n  SubscriptionEntity$inboundSchema,\n  SubscriptionEntity$Outbound,\n  SubscriptionEntity$outboundSchema,\n} from \"./subscriptionentity.js\";\n\n/**\n * String representing the environment.\n */\nexport const CheckoutEntityMode = {\n  Test: \"test\",\n  Prod: \"prod\",\n  Sandbox: \"sandbox\",\n} as const;\n/**\n * String representing the environment.\n */\nexport type CheckoutEntityMode = ClosedEnum<typeof CheckoutEntityMode>;\n\n/**\n * The product associated with the checkout session.\n */\nexport type CheckoutEntityProduct = ProductEntity | string;\n\n/**\n * The subscription associated with the checkout session.\n */\nexport type Subscription = SubscriptionEntity | string;\n\n/**\n * The customer associated with the checkout session.\n */\nexport type CheckoutEntityCustomer = CustomerEntity | string;\n\nexport type CheckoutEntity = {\n  /**\n   * Unique identifier for the object.\n   */\n  id: string;\n  /**\n   * String representing the environment.\n   */\n  mode: CheckoutEntityMode;\n  /**\n   * String representing the object's type. Objects of the same type share the same value.\n   */\n  object: string;\n  /**\n   * Status of the checkout.\n   */\n  status: string;\n  /**\n   * Identify and track each checkout request.\n   */\n  requestId?: string | undefined;\n  /**\n   * The product associated with the checkout session.\n   */\n  product: ProductEntity | string;\n  /**\n   * The number of units for the of the product.\n   */\n  units?: number | undefined;\n  /**\n   * The order associated with the checkout session.\n   */\n  order?: OrderEntity | undefined;\n  /**\n   * The subscription associated with the checkout session.\n   */\n  subscription?: SubscriptionEntity | string | undefined;\n  /**\n   * The customer associated with the checkout session.\n   */\n  customer?: CustomerEntity | string | undefined;\n  /**\n   * Additional information collected from your customer during the checkout process.\n   */\n  customFields?: Array<CustomField> | undefined;\n  /**\n   * The URL to which the customer will be redirected to complete the payment.\n   */\n  checkoutUrl?: string | undefined;\n  /**\n   * The URL to which the user will be redirected after the checkout process is completed.\n   */\n  successUrl?: string | null | undefined;\n  /**\n   * Features issued for the order.\n   */\n  feature?: Array<ProductFeatureEntity> | undefined;\n  /**\n   * Metadata for the checkout in the form of key-value pairs\n   */\n  metadata?: { [k: string]: any } | undefined;\n};\n\n/** @internal */\nexport const CheckoutEntityMode$inboundSchema: z.ZodNativeEnum<\n  typeof CheckoutEntityMode\n> = z.nativeEnum(CheckoutEntityMode);\n\n/** @internal */\nexport const CheckoutEntityMode$outboundSchema: z.ZodNativeEnum<\n  typeof CheckoutEntityMode\n> = CheckoutEntityMode$inboundSchema;\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace CheckoutEntityMode$ {\n  /** @deprecated use `CheckoutEntityMode$inboundSchema` instead. */\n  export const inboundSchema = CheckoutEntityMode$inboundSchema;\n  /** @deprecated use `CheckoutEntityMode$outboundSchema` instead. */\n  export const outboundSchema = CheckoutEntityMode$outboundSchema;\n}\n\n/** @internal */\nexport const CheckoutEntityProduct$inboundSchema: z.ZodType<\n  CheckoutEntityProduct,\n  z.ZodTypeDef,\n  unknown\n> = z.union([ProductEntity$inboundSchema, z.string()]);\n\n/** @internal */\nexport type CheckoutEntityProduct$Outbound = ProductEntity$Outbound | string;\n\n/** @internal */\nexport const CheckoutEntityProduct$outboundSchema: z.ZodType<\n  CheckoutEntityProduct$Outbound,\n  z.ZodTypeDef,\n  CheckoutEntityProduct\n> = z.union([ProductEntity$outboundSchema, z.string()]);\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace CheckoutEntityProduct$ {\n  /** @deprecated use `CheckoutEntityProduct$inboundSchema` instead. */\n  export const inboundSchema = CheckoutEntityProduct$inboundSchema;\n  /** @deprecated use `CheckoutEntityProduct$outboundSchema` instead. */\n  export const outboundSchema = CheckoutEntityProduct$outboundSchema;\n  /** @deprecated use `CheckoutEntityProduct$Outbound` instead. */\n  export type Outbound = CheckoutEntityProduct$Outbound;\n}\n\nexport function checkoutEntityProductToJSON(\n  checkoutEntityProduct: CheckoutEntityProduct,\n): string {\n  return JSON.stringify(\n    CheckoutEntityProduct$outboundSchema.parse(checkoutEntityProduct),\n  );\n}\n\nexport function checkoutEntityProductFromJSON(\n  jsonString: string,\n): SafeParseResult<CheckoutEntityProduct, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => CheckoutEntityProduct$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'CheckoutEntityProduct' from JSON`,\n  );\n}\n\n/** @internal */\nexport const Subscription$inboundSchema: z.ZodType<\n  Subscription,\n  z.ZodTypeDef,\n  unknown\n> = z.union([SubscriptionEntity$inboundSchema, z.string()]);\n\n/** @internal */\nexport type Subscription$Outbound = SubscriptionEntity$Outbound | string;\n\n/** @internal */\nexport const Subscription$outboundSchema: z.ZodType<\n  Subscription$Outbound,\n  z.ZodTypeDef,\n  Subscription\n> = z.union([SubscriptionEntity$outboundSchema, z.string()]);\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace Subscription$ {\n  /** @deprecated use `Subscription$inboundSchema` instead. */\n  export const inboundSchema = Subscription$inboundSchema;\n  /** @deprecated use `Subscription$outboundSchema` instead. */\n  export const outboundSchema = Subscription$outboundSchema;\n  /** @deprecated use `Subscription$Outbound` instead. */\n  export type Outbound = Subscription$Outbound;\n}\n\nexport function subscriptionToJSON(subscription: Subscription): string {\n  return JSON.stringify(Subscription$outboundSchema.parse(subscription));\n}\n\nexport function subscriptionFromJSON(\n  jsonString: string,\n): SafeParseResult<Subscription, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => Subscription$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'Subscription' from JSON`,\n  );\n}\n\n/** @internal */\nexport const CheckoutEntityCustomer$inboundSchema: z.ZodType<\n  CheckoutEntityCustomer,\n  z.ZodTypeDef,\n  unknown\n> = z.union([CustomerEntity$inboundSchema, z.string()]);\n\n/** @internal */\nexport type CheckoutEntityCustomer$Outbound = CustomerEntity$Outbound | string;\n\n/** @internal */\nexport const CheckoutEntityCustomer$outboundSchema: z.ZodType<\n  CheckoutEntityCustomer$Outbound,\n  z.ZodTypeDef,\n  CheckoutEntityCustomer\n> = z.union([CustomerEntity$outboundSchema, z.string()]);\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace CheckoutEntityCustomer$ {\n  /** @deprecated use `CheckoutEntityCustomer$inboundSchema` instead. */\n  export const inboundSchema = CheckoutEntityCustomer$inboundSchema;\n  /** @deprecated use `CheckoutEntityCustomer$outboundSchema` instead. */\n  export const outboundSchema = CheckoutEntityCustomer$outboundSchema;\n  /** @deprecated use `CheckoutEntityCustomer$Outbound` instead. */\n  export type Outbound = CheckoutEntityCustomer$Outbound;\n}\n\nexport function checkoutEntityCustomerToJSON(\n  checkoutEntityCustomer: CheckoutEntityCustomer,\n): string {\n  return JSON.stringify(\n    CheckoutEntityCustomer$outboundSchema.parse(checkoutEntityCustomer),\n  );\n}\n\nexport function checkoutEntityCustomerFromJSON(\n  jsonString: string,\n): SafeParseResult<CheckoutEntityCustomer, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => CheckoutEntityCustomer$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'CheckoutEntityCustomer' from JSON`,\n  );\n}\n\n/** @internal */\nexport const CheckoutEntity$inboundSchema: z.ZodType<\n  CheckoutEntity,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  id: z.string(),\n  mode: CheckoutEntityMode$inboundSchema,\n  object: z.string(),\n  status: z.string(),\n  request_id: z.string().optional(),\n  product: z.union([ProductEntity$inboundSchema, z.string()]),\n  units: z.number().default(1),\n  order: OrderEntity$inboundSchema.optional(),\n  subscription: z.union([SubscriptionEntity$inboundSchema, z.string()])\n    .optional(),\n  customer: z.union([CustomerEntity$inboundSchema, z.string()]).optional(),\n  custom_fields: z.array(CustomField$inboundSchema).optional(),\n  checkout_url: z.string().optional(),\n  success_url: z.nullable(z.string()).optional(),\n  feature: z.array(ProductFeatureEntity$inboundSchema).optional(),\n  metadata: z.record(z.any()).optional(),\n}).transform((v) => {\n  return remap$(v, {\n    \"request_id\": \"requestId\",\n    \"custom_fields\": \"customFields\",\n    \"checkout_url\": \"checkoutUrl\",\n    \"success_url\": \"successUrl\",\n  });\n});\n\n/** @internal */\nexport type CheckoutEntity$Outbound = {\n  id: string;\n  mode: string;\n  object: string;\n  status: string;\n  request_id?: string | undefined;\n  product: ProductEntity$Outbound | string;\n  units: number;\n  order?: OrderEntity$Outbound | undefined;\n  subscription?: SubscriptionEntity$Outbound | string | undefined;\n  customer?: CustomerEntity$Outbound | string | undefined;\n  custom_fields?: Array<CustomField$Outbound> | undefined;\n  checkout_url?: string | undefined;\n  success_url?: string | null | undefined;\n  feature?: Array<ProductFeatureEntity$Outbound> | undefined;\n  metadata?: { [k: string]: any } | undefined;\n};\n\n/** @internal */\nexport const CheckoutEntity$outboundSchema: z.ZodType<\n  CheckoutEntity$Outbound,\n  z.ZodTypeDef,\n  CheckoutEntity\n> = z.object({\n  id: z.string(),\n  mode: CheckoutEntityMode$outboundSchema,\n  object: z.string(),\n  status: z.string(),\n  requestId: z.string().optional(),\n  product: z.union([ProductEntity$outboundSchema, z.string()]),\n  units: z.number().default(1),\n  order: OrderEntity$outboundSchema.optional(),\n  subscription: z.union([SubscriptionEntity$outboundSchema, z.string()])\n    .optional(),\n  customer: z.union([CustomerEntity$outboundSchema, z.string()]).optional(),\n  customFields: z.array(CustomField$outboundSchema).optional(),\n  checkoutUrl: z.string().optional(),\n  successUrl: z.nullable(z.string()).optional(),\n  feature: z.array(ProductFeatureEntity$outboundSchema).optional(),\n  metadata: z.record(z.any()).optional(),\n}).transform((v) => {\n  return remap$(v, {\n    requestId: \"request_id\",\n    customFields: \"custom_fields\",\n    checkoutUrl: \"checkout_url\",\n    successUrl: \"success_url\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace CheckoutEntity$ {\n  /** @deprecated use `CheckoutEntity$inboundSchema` instead. */\n  export const inboundSchema = CheckoutEntity$inboundSchema;\n  /** @deprecated use `CheckoutEntity$outboundSchema` instead. */\n  export const outboundSchema = CheckoutEntity$outboundSchema;\n  /** @deprecated use `CheckoutEntity$Outbound` instead. */\n  export type Outbound = CheckoutEntity$Outbound;\n}\n\nexport function checkoutEntityToJSON(checkoutEntity: CheckoutEntity): string {\n  return JSON.stringify(CheckoutEntity$outboundSchema.parse(checkoutEntity));\n}\n\nexport function checkoutEntityFromJSON(\n  jsonString: string,\n): SafeParseResult<CheckoutEntity, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => CheckoutEntity$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'CheckoutEntity' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\nexport type CustomerRequestEntity = {\n  /**\n   * Unique identifier of the customer. You may specify only one of these parameters: id or email.\n   */\n  id?: string | undefined;\n  /**\n   * Customer email address. You may only specify one of these parameters: id, email.\n   */\n  email?: string | undefined;\n};\n\n/** @internal */\nexport const CustomerRequestEntity$inboundSchema: z.ZodType<\n  CustomerRequestEntity,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  id: z.string().optional(),\n  email: z.string().optional(),\n});\n\n/** @internal */\nexport type CustomerRequestEntity$Outbound = {\n  id?: string | undefined;\n  email?: string | undefined;\n};\n\n/** @internal */\nexport const CustomerRequestEntity$outboundSchema: z.ZodType<\n  CustomerRequestEntity$Outbound,\n  z.ZodTypeDef,\n  CustomerRequestEntity\n> = z.object({\n  id: z.string().optional(),\n  email: z.string().optional(),\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace CustomerRequestEntity$ {\n  /** @deprecated use `CustomerRequestEntity$inboundSchema` instead. */\n  export const inboundSchema = CustomerRequestEntity$inboundSchema;\n  /** @deprecated use `CustomerRequestEntity$outboundSchema` instead. */\n  export const outboundSchema = CustomerRequestEntity$outboundSchema;\n  /** @deprecated use `CustomerRequestEntity$Outbound` instead. */\n  export type Outbound = CustomerRequestEntity$Outbound;\n}\n\nexport function customerRequestEntityToJSON(\n  customerRequestEntity: CustomerRequestEntity,\n): string {\n  return JSON.stringify(\n    CustomerRequestEntity$outboundSchema.parse(customerRequestEntity),\n  );\n}\n\nexport function customerRequestEntityFromJSON(\n  jsonString: string,\n): SafeParseResult<CustomerRequestEntity, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => CustomerRequestEntity$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'CustomerRequestEntity' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { ClosedEnum } from \"../../types/enums.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\nimport {\n  Text,\n  Text$inboundSchema,\n  Text$Outbound,\n  Text$outboundSchema,\n} from \"./text.js\";\n\n/**\n * The type of the field.\n */\nexport const Type = {\n  Text: \"text\",\n} as const;\n/**\n * The type of the field.\n */\nexport type Type = ClosedEnum<typeof Type>;\n\nexport type CustomFieldRequestEntity = {\n  /**\n   * The type of the field.\n   */\n  type: Type;\n  /**\n   * Unique key for custom field. Must be unique to this field, alphanumeric, and up to 200 characters.\n   */\n  key: string;\n  /**\n   * The label for the field, displayed to the customer, up to 50 characters\n   */\n  label: string;\n  /**\n   * Whether the customer is required to complete the field. Defaults to `false`\n   */\n  optional?: boolean | undefined;\n  /**\n   * Configuration for type of text field.\n   */\n  text?: Text | undefined;\n};\n\n/** @internal */\nexport const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(\n  Type,\n);\n\n/** @internal */\nexport const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =\n  Type$inboundSchema;\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace Type$ {\n  /** @deprecated use `Type$inboundSchema` instead. */\n  export const inboundSchema = Type$inboundSchema;\n  /** @deprecated use `Type$outboundSchema` instead. */\n  export const outboundSchema = Type$outboundSchema;\n}\n\n/** @internal */\nexport const CustomFieldRequestEntity$inboundSchema: z.ZodType<\n  CustomFieldRequestEntity,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  type: Type$inboundSchema,\n  key: z.string(),\n  label: z.string(),\n  optional: z.boolean().optional(),\n  text: Text$inboundSchema.optional(),\n});\n\n/** @internal */\nexport type CustomFieldRequestEntity$Outbound = {\n  type: string;\n  key: string;\n  label: string;\n  optional?: boolean | undefined;\n  text?: Text$Outbound | undefined;\n};\n\n/** @internal */\nexport const CustomFieldRequestEntity$outboundSchema: z.ZodType<\n  CustomFieldRequestEntity$Outbound,\n  z.ZodTypeDef,\n  CustomFieldRequestEntity\n> = z.object({\n  type: Type$outboundSchema,\n  key: z.string(),\n  label: z.string(),\n  optional: z.boolean().optional(),\n  text: Text$outboundSchema.optional(),\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace CustomFieldRequestEntity$ {\n  /** @deprecated use `CustomFieldRequestEntity$inboundSchema` instead. */\n  export const inboundSchema = CustomFieldRequestEntity$inboundSchema;\n  /** @deprecated use `CustomFieldRequestEntity$outboundSchema` instead. */\n  export const outboundSchema = CustomFieldRequestEntity$outboundSchema;\n  /** @deprecated use `CustomFieldRequestEntity$Outbound` instead. */\n  export type Outbound = CustomFieldRequestEntity$Outbound;\n}\n\nexport function customFieldRequestEntityToJSON(\n  customFieldRequestEntity: CustomFieldRequestEntity,\n): string {\n  return JSON.stringify(\n    CustomFieldRequestEntity$outboundSchema.parse(customFieldRequestEntity),\n  );\n}\n\nexport function customFieldRequestEntityFromJSON(\n  jsonString: string,\n): SafeParseResult<CustomFieldRequestEntity, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => CustomFieldRequestEntity$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'CustomFieldRequestEntity' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\nimport {\n  CustomerRequestEntity,\n  CustomerRequestEntity$inboundSchema,\n  CustomerRequestEntity$Outbound,\n  CustomerRequestEntity$outboundSchema,\n} from \"./customerrequestentity.js\";\nimport {\n  CustomFieldRequestEntity,\n  CustomFieldRequestEntity$inboundSchema,\n  CustomFieldRequestEntity$Outbound,\n  CustomFieldRequestEntity$outboundSchema,\n} from \"./customfieldrequestentity.js\";\n\nexport type CreateCheckoutRequest = {\n  /**\n   * Identify and track each checkout request.\n   */\n  requestId?: string | undefined;\n  /**\n   * The ID of the product associated with the checkout session.\n   */\n  productId: string;\n  /**\n   * The number of units for the order.\n   */\n  units?: number | undefined;\n  /**\n   * Prefill the checkout session with a discount code.\n   */\n  discountCode?: string | undefined;\n  /**\n   * Customer data for checkout session. This will prefill the customer info on the checkout page\n   */\n  customer?: CustomerRequestEntity | undefined;\n  /**\n   * Collect additional information from your customer using custom fields. Up to 3 fields are supported.\n   */\n  customField?: Array<CustomFieldRequestEntity> | undefined;\n  /**\n   * The URL to which the user will be redirected after the checkout process is completed.\n   */\n  successUrl?: string | undefined;\n  /**\n   * Metadata for the checkout in the form of key-value pairs\n   */\n  metadata?: { [k: string]: any } | undefined;\n};\n\n/** @internal */\nexport const CreateCheckoutRequest$inboundSchema: z.ZodType<\n  CreateCheckoutRequest,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  request_id: z.string().optional(),\n  product_id: z.string(),\n  units: z.number().optional(),\n  discount_code: z.string().optional(),\n  customer: CustomerRequestEntity$inboundSchema.optional(),\n  custom_field: z.array(CustomFieldRequestEntity$inboundSchema).optional(),\n  success_url: z.string().optional(),\n  metadata: z.record(z.any()).optional(),\n}).transform((v) => {\n  return remap$(v, {\n    \"request_id\": \"requestId\",\n    \"product_id\": \"productId\",\n    \"discount_code\": \"discountCode\",\n    \"custom_field\": \"customField\",\n    \"success_url\": \"successUrl\",\n  });\n});\n\n/** @internal */\nexport type CreateCheckoutRequest$Outbound = {\n  request_id?: string | undefined;\n  product_id: string;\n  units?: number | undefined;\n  discount_code?: string | undefined;\n  customer?: CustomerRequestEntity$Outbound | undefined;\n  custom_field?: Array<CustomFieldRequestEntity$Outbound> | undefined;\n  success_url?: string | undefined;\n  metadata?: { [k: string]: any } | undefined;\n};\n\n/** @internal */\nexport const CreateCheckoutRequest$outboundSchema: z.ZodType<\n  CreateCheckoutRequest$Outbound,\n  z.ZodTypeDef,\n  CreateCheckoutRequest\n> = z.object({\n  requestId: z.string().optional(),\n  productId: z.string(),\n  units: z.number().optional(),\n  discountCode: z.string().optional(),\n  customer: CustomerRequestEntity$outboundSchema.optional(),\n  customField: z.array(CustomFieldRequestEntity$outboundSchema).optional(),\n  successUrl: z.string().optional(),\n  metadata: z.record(z.any()).optional(),\n}).transform((v) => {\n  return remap$(v, {\n    requestId: \"request_id\",\n    productId: \"product_id\",\n    discountCode: \"discount_code\",\n    customField: \"custom_field\",\n    successUrl: \"success_url\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace CreateCheckoutRequest$ {\n  /** @deprecated use `CreateCheckoutRequest$inboundSchema` instead. */\n  export const inboundSchema = CreateCheckoutRequest$inboundSchema;\n  /** @deprecated use `CreateCheckoutRequest$outboundSchema` instead. */\n  export const outboundSchema = CreateCheckoutRequest$outboundSchema;\n  /** @deprecated use `CreateCheckoutRequest$Outbound` instead. */\n  export type Outbound = CreateCheckoutRequest$Outbound;\n}\n\nexport function createCheckoutRequestToJSON(\n  createCheckoutRequest: CreateCheckoutRequest,\n): string {\n  return JSON.stringify(\n    CreateCheckoutRequest$outboundSchema.parse(createCheckoutRequest),\n  );\n}\n\nexport function createCheckoutRequestFromJSON(\n  jsonString: string,\n): SafeParseResult<CreateCheckoutRequest, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => CreateCheckoutRequest$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'CreateCheckoutRequest' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\nexport type CreateCustomerPortalLinkRequestEntity = {\n  /**\n   * Unique identifier of the customer.\n   */\n  customerId: string;\n};\n\n/** @internal */\nexport const CreateCustomerPortalLinkRequestEntity$inboundSchema: z.ZodType<\n  CreateCustomerPortalLinkRequestEntity,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  customer_id: z.string(),\n}).transform((v) => {\n  return remap$(v, {\n    \"customer_id\": \"customerId\",\n  });\n});\n\n/** @internal */\nexport type CreateCustomerPortalLinkRequestEntity$Outbound = {\n  customer_id: string;\n};\n\n/** @internal */\nexport const CreateCustomerPortalLinkRequestEntity$outboundSchema: z.ZodType<\n  CreateCustomerPortalLinkRequestEntity$Outbound,\n  z.ZodTypeDef,\n  CreateCustomerPortalLinkRequestEntity\n> = z.object({\n  customerId: z.string(),\n}).transform((v) => {\n  return remap$(v, {\n    customerId: \"customer_id\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace CreateCustomerPortalLinkRequestEntity$ {\n  /** @deprecated use `CreateCustomerPortalLinkRequestEntity$inboundSchema` instead. */\n  export const inboundSchema =\n    CreateCustomerPortalLinkRequestEntity$inboundSchema;\n  /** @deprecated use `CreateCustomerPortalLinkRequestEntity$outboundSchema` instead. */\n  export const outboundSchema =\n    CreateCustomerPortalLinkRequestEntity$outboundSchema;\n  /** @deprecated use `CreateCustomerPortalLinkRequestEntity$Outbound` instead. */\n  export type Outbound = CreateCustomerPortalLinkRequestEntity$Outbound;\n}\n\nexport function createCustomerPortalLinkRequestEntityToJSON(\n  createCustomerPortalLinkRequestEntity: CreateCustomerPortalLinkRequestEntity,\n): string {\n  return JSON.stringify(\n    CreateCustomerPortalLinkRequestEntity$outboundSchema.parse(\n      createCustomerPortalLinkRequestEntity,\n    ),\n  );\n}\n\nexport function createCustomerPortalLinkRequestEntityFromJSON(\n  jsonString: string,\n): SafeParseResult<CreateCustomerPortalLinkRequestEntity, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) =>\n      CreateCustomerPortalLinkRequestEntity$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'CreateCustomerPortalLinkRequestEntity' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { ClosedEnum } from \"../../types/enums.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\n/**\n * The type of the discount, either \"percentage\" or \"fixed\".\n */\nexport const CreateDiscountRequestEntityType = {\n  Percentage: \"percentage\",\n  Fixed: \"fixed\",\n} as const;\n/**\n * The type of the discount, either \"percentage\" or \"fixed\".\n */\nexport type CreateDiscountRequestEntityType = ClosedEnum<\n  typeof CreateDiscountRequestEntityType\n>;\n\n/**\n * The duration type for the discount.\n */\nexport const CreateDiscountRequestEntityDuration = {\n  Forever: \"forever\",\n  Once: \"once\",\n  Repeating: \"repeating\",\n} as const;\n/**\n * The duration type for the discount.\n */\nexport type CreateDiscountRequestEntityDuration = ClosedEnum<\n  typeof CreateDiscountRequestEntityDuration\n>;\n\nexport type CreateDiscountRequestEntity = {\n  /**\n   * The name of the discount.\n   */\n  name: string;\n  /**\n   * Optional discount code. If left empty, a code will be generated.\n   */\n  code?: string | undefined;\n  /**\n   * The type of the discount, either \"percentage\" or \"fixed\".\n   */\n  type: CreateDiscountRequestEntityType;\n  /**\n   * The fixed value for the discount. Only applicable if the type is \"fixed\".\n   */\n  amount?: number | undefined;\n  /**\n   * The currency of the discount. Only required if type is \"fixed\".\n   */\n  currency?: string | undefined;\n  /**\n   * The percentage value for the discount. Only applicable if the type is \"percentage\".\n   */\n  percentage?: number | undefined;\n  /**\n   * The expiry date of the discount.\n   */\n  expiryDate?: Date | undefined;\n  /**\n   * The maximum number of redemptions for the discount.\n   */\n  maxRedemptions?: number | undefined;\n  /**\n   * The duration type for the discount.\n   */\n  duration: CreateDiscountRequestEntityDuration;\n  /**\n   * The number of months the discount is valid for. Only applicable if the duration is \"repeating\" and the product is a subscription.\n   */\n  durationInMonths?: number | undefined;\n  /**\n   * The list of product IDs to which this discount applies.\n   */\n  appliesToProducts: Array<string>;\n};\n\n/** @internal */\nexport const CreateDiscountRequestEntityType$inboundSchema: z.ZodNativeEnum<\n  typeof CreateDiscountRequestEntityType\n> = z.nativeEnum(CreateDiscountRequestEntityType);\n\n/** @internal */\nexport const CreateDiscountRequestEntityType$outboundSchema: z.ZodNativeEnum<\n  typeof CreateDiscountRequestEntityType\n> = CreateDiscountRequestEntityType$inboundSchema;\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace CreateDiscountRequestEntityType$ {\n  /** @deprecated use `CreateDiscountRequestEntityType$inboundSchema` instead. */\n  export const inboundSchema = CreateDiscountRequestEntityType$inboundSchema;\n  /** @deprecated use `CreateDiscountRequestEntityType$outboundSchema` instead. */\n  export const outboundSchema = CreateDiscountRequestEntityType$outboundSchema;\n}\n\n/** @internal */\nexport const CreateDiscountRequestEntityDuration$inboundSchema: z.ZodNativeEnum<\n  typeof CreateDiscountRequestEntityDuration\n> = z.nativeEnum(CreateDiscountRequestEntityDuration);\n\n/** @internal */\nexport const CreateDiscountRequestEntityDuration$outboundSchema:\n  z.ZodNativeEnum<typeof CreateDiscountRequestEntityDuration> =\n    CreateDiscountRequestEntityDuration$inboundSchema;\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace CreateDiscountRequestEntityDuration$ {\n  /** @deprecated use `CreateDiscountRequestEntityDuration$inboundSchema` instead. */\n  export const inboundSchema =\n    CreateDiscountRequestEntityDuration$inboundSchema;\n  /** @deprecated use `CreateDiscountRequestEntityDuration$outboundSchema` instead. */\n  export const outboundSchema =\n    CreateDiscountRequestEntityDuration$outboundSchema;\n}\n\n/** @internal */\nexport const CreateDiscountRequestEntity$inboundSchema: z.ZodType<\n  CreateDiscountRequestEntity,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  name: z.string(),\n  code: z.string().optional(),\n  type: CreateDiscountRequestEntityType$inboundSchema,\n  amount: z.number().optional(),\n  currency: z.string().optional(),\n  percentage: z.number().optional(),\n  expiry_date: z.string().datetime({ offset: true }).transform(v => new Date(v))\n    .optional(),\n  max_redemptions: z.number().optional(),\n  duration: CreateDiscountRequestEntityDuration$inboundSchema,\n  duration_in_months: z.number().optional(),\n  applies_to_products: z.array(z.string()),\n}).transform((v) => {\n  return remap$(v, {\n    \"expiry_date\": \"expiryDate\",\n    \"max_redemptions\": \"maxRedemptions\",\n    \"duration_in_months\": \"durationInMonths\",\n    \"applies_to_products\": \"appliesToProducts\",\n  });\n});\n\n/** @internal */\nexport type CreateDiscountRequestEntity$Outbound = {\n  name: string;\n  code?: string | undefined;\n  type: string;\n  amount?: number | undefined;\n  currency?: string | undefined;\n  percentage?: number | undefined;\n  expiry_date?: string | undefined;\n  max_redemptions?: number | undefined;\n  duration: string;\n  duration_in_months?: number | undefined;\n  applies_to_products: Array<string>;\n};\n\n/** @internal */\nexport const CreateDiscountRequestEntity$outboundSchema: z.ZodType<\n  CreateDiscountRequestEntity$Outbound,\n  z.ZodTypeDef,\n  CreateDiscountRequestEntity\n> = z.object({\n  name: z.string(),\n  code: z.string().optional(),\n  type: CreateDiscountRequestEntityType$outboundSchema,\n  amount: z.number().optional(),\n  currency: z.string().optional(),\n  percentage: z.number().optional(),\n  expiryDate: z.date().transform(v => v.toISOString()).optional(),\n  maxRedemptions: z.number().optional(),\n  duration: CreateDiscountRequestEntityDuration$outboundSchema,\n  durationInMonths: z.number().optional(),\n  appliesToProducts: z.array(z.string()),\n}).transform((v) => {\n  return remap$(v, {\n    expiryDate: \"expiry_date\",\n    maxRedemptions: \"max_redemptions\",\n    durationInMonths: \"duration_in_months\",\n    appliesToProducts: \"applies_to_products\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace CreateDiscountRequestEntity$ {\n  /** @deprecated use `CreateDiscountRequestEntity$inboundSchema` instead. */\n  export const inboundSchema = CreateDiscountRequestEntity$inboundSchema;\n  /** @deprecated use `CreateDiscountRequestEntity$outboundSchema` instead. */\n  export const outboundSchema = CreateDiscountRequestEntity$outboundSchema;\n  /** @deprecated use `CreateDiscountRequestEntity$Outbound` instead. */\n  export type Outbound = CreateDiscountRequestEntity$Outbound;\n}\n\nexport function createDiscountRequestEntityToJSON(\n  createDiscountRequestEntity: CreateDiscountRequestEntity,\n): string {\n  return JSON.stringify(\n    CreateDiscountRequestEntity$outboundSchema.parse(\n      createDiscountRequestEntity,\n    ),\n  );\n}\n\nexport function createDiscountRequestEntityFromJSON(\n  jsonString: string,\n): SafeParseResult<CreateDiscountRequestEntity, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => CreateDiscountRequestEntity$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'CreateDiscountRequestEntity' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\nimport {\n  CustomFieldRequestEntity,\n  CustomFieldRequestEntity$inboundSchema,\n  CustomFieldRequestEntity$Outbound,\n  CustomFieldRequestEntity$outboundSchema,\n} from \"./customfieldrequestentity.js\";\n\nexport type CreateProductRequestEntity = {\n  /**\n   * Name of the product\n   */\n  name: string;\n  /**\n   * Description of the product\n   */\n  description?: string | undefined;\n  /**\n   * URL of the product image\n   */\n  imageUrl?: string | undefined;\n  /**\n   * The price of the product in cents\n   */\n  price: number;\n  /**\n   * Three-letter ISO currency code, in uppercase. Must be a supported currency.\n   */\n  currency: string;\n  /**\n   * Indicates the billing method for the customer. It can either be a `recurring` billing cycle or a `onetime` payment.\n   */\n  billingType: string;\n  /**\n   * Billing period, required if billing_type is recurring\n   */\n  billingPeriod?: string | undefined;\n  /**\n   * Specifies the tax calculation mode for the transaction. If set to \"inclusive,\" the tax is included in the price. If set to \"exclusive,\" the tax is added on top of the price.\n   */\n  taxMode?: string | undefined;\n  /**\n   * Categorizes the type of product or service for tax purposes. This helps determine the applicable tax rules based on the nature of the item or service.\n   */\n  taxCategory?: string | undefined;\n  /**\n   * The URL to which the user will be redirected after successfull payment.\n   */\n  defaultSuccessUrl?: string | undefined;\n  /**\n   * Collect additional information from your customer using custom fields during checkout. Up to 3 fields are supported.\n   */\n  customField?: Array<CustomFieldRequestEntity> | undefined;\n};\n\n/** @internal */\nexport const CreateProductRequestEntity$inboundSchema: z.ZodType<\n  CreateProductRequestEntity,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  name: z.string(),\n  description: z.string().optional(),\n  image_url: z.string().optional(),\n  price: z.number().int(),\n  currency: z.string(),\n  billing_type: z.string(),\n  billing_period: z.string().optional(),\n  tax_mode: z.string().optional(),\n  tax_category: z.string().optional(),\n  default_success_url: z.string().optional(),\n  custom_field: z.array(CustomFieldRequestEntity$inboundSchema).optional(),\n}).transform((v) => {\n  return remap$(v, {\n    \"image_url\": \"imageUrl\",\n    \"billing_type\": \"billingType\",\n    \"billing_period\": \"billingPeriod\",\n    \"tax_mode\": \"taxMode\",\n    \"tax_category\": \"taxCategory\",\n    \"default_success_url\": \"defaultSuccessUrl\",\n    \"custom_field\": \"customField\",\n  });\n});\n\n/** @internal */\nexport type CreateProductRequestEntity$Outbound = {\n  name: string;\n  description?: string | undefined;\n  image_url?: string | undefined;\n  price: number;\n  currency: string;\n  billing_type: string;\n  billing_period?: string | undefined;\n  tax_mode?: string | undefined;\n  tax_category?: string | undefined;\n  default_success_url?: string | undefined;\n  custom_field?: Array<CustomFieldRequestEntity$Outbound> | undefined;\n};\n\n/** @internal */\nexport const CreateProductRequestEntity$outboundSchema: z.ZodType<\n  CreateProductRequestEntity$Outbound,\n  z.ZodTypeDef,\n  CreateProductRequestEntity\n> = z.object({\n  name: z.string(),\n  description: z.string().optional(),\n  imageUrl: z.string().optional(),\n  price: z.number().int(),\n  currency: z.string(),\n  billingType: z.string(),\n  billingPeriod: z.string().optional(),\n  taxMode: z.string().optional(),\n  taxCategory: z.string().optional(),\n  defaultSuccessUrl: z.string().optional(),\n  customField: z.array(CustomFieldRequestEntity$outboundSchema).optional(),\n}).transform((v) => {\n  return remap$(v, {\n    imageUrl: \"image_url\",\n    billingType: \"billing_type\",\n    billingPeriod: \"billing_period\",\n    taxMode: \"tax_mode\",\n    taxCategory: \"tax_category\",\n    defaultSuccessUrl: \"default_success_url\",\n    customField: \"custom_field\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace CreateProductRequestEntity$ {\n  /** @deprecated use `CreateProductRequestEntity$inboundSchema` instead. */\n  export const inboundSchema = CreateProductRequestEntity$inboundSchema;\n  /** @deprecated use `CreateProductRequestEntity$outboundSchema` instead. */\n  export const outboundSchema = CreateProductRequestEntity$outboundSchema;\n  /** @deprecated use `CreateProductRequestEntity$Outbound` instead. */\n  export type Outbound = CreateProductRequestEntity$Outbound;\n}\n\nexport function createProductRequestEntityToJSON(\n  createProductRequestEntity: CreateProductRequestEntity,\n): string {\n  return JSON.stringify(\n    CreateProductRequestEntity$outboundSchema.parse(createProductRequestEntity),\n  );\n}\n\nexport function createProductRequestEntityFromJSON(\n  jsonString: string,\n): SafeParseResult<CreateProductRequestEntity, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => CreateProductRequestEntity$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'CreateProductRequestEntity' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\nexport type CustomerLinksEntity = {\n  /**\n   * Customer portal link.\n   */\n  customerPortalLink: string;\n};\n\n/** @internal */\nexport const CustomerLinksEntity$inboundSchema: z.ZodType<\n  CustomerLinksEntity,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  customer_portal_link: z.string(),\n}).transform((v) => {\n  return remap$(v, {\n    \"customer_portal_link\": \"customerPortalLink\",\n  });\n});\n\n/** @internal */\nexport type CustomerLinksEntity$Outbound = {\n  customer_portal_link: string;\n};\n\n/** @internal */\nexport const CustomerLinksEntity$outboundSchema: z.ZodType<\n  CustomerLinksEntity$Outbound,\n  z.ZodTypeDef,\n  CustomerLinksEntity\n> = z.object({\n  customerPortalLink: z.string(),\n}).transform((v) => {\n  return remap$(v, {\n    customerPortalLink: \"customer_portal_link\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace CustomerLinksEntity$ {\n  /** @deprecated use `CustomerLinksEntity$inboundSchema` instead. */\n  export const inboundSchema = CustomerLinksEntity$inboundSchema;\n  /** @deprecated use `CustomerLinksEntity$outboundSchema` instead. */\n  export const outboundSchema = CustomerLinksEntity$outboundSchema;\n  /** @deprecated use `CustomerLinksEntity$Outbound` instead. */\n  export type Outbound = CustomerLinksEntity$Outbound;\n}\n\nexport function customerLinksEntityToJSON(\n  customerLinksEntity: CustomerLinksEntity,\n): string {\n  return JSON.stringify(\n    CustomerLinksEntity$outboundSchema.parse(customerLinksEntity),\n  );\n}\n\nexport function customerLinksEntityFromJSON(\n  jsonString: string,\n): SafeParseResult<CustomerLinksEntity, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => CustomerLinksEntity$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'CustomerLinksEntity' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\nexport type DeactivateLicenseRequestEntity = {\n  /**\n   * The license key to deactivate.\n   */\n  key: string;\n  /**\n   * Id of the instance to deactivate.\n   */\n  instanceId: string;\n};\n\n/** @internal */\nexport const DeactivateLicenseRequestEntity$inboundSchema: z.ZodType<\n  DeactivateLicenseRequestEntity,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  key: z.string(),\n  instance_id: z.string(),\n}).transform((v) => {\n  return remap$(v, {\n    \"instance_id\": \"instanceId\",\n  });\n});\n\n/** @internal */\nexport type DeactivateLicenseRequestEntity$Outbound = {\n  key: string;\n  instance_id: string;\n};\n\n/** @internal */\nexport const DeactivateLicenseRequestEntity$outboundSchema: z.ZodType<\n  DeactivateLicenseRequestEntity$Outbound,\n  z.ZodTypeDef,\n  DeactivateLicenseRequestEntity\n> = z.object({\n  key: z.string(),\n  instanceId: z.string(),\n}).transform((v) => {\n  return remap$(v, {\n    instanceId: \"instance_id\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace DeactivateLicenseRequestEntity$ {\n  /** @deprecated use `DeactivateLicenseRequestEntity$inboundSchema` instead. */\n  export const inboundSchema = DeactivateLicenseRequestEntity$inboundSchema;\n  /** @deprecated use `DeactivateLicenseRequestEntity$outboundSchema` instead. */\n  export const outboundSchema = DeactivateLicenseRequestEntity$outboundSchema;\n  /** @deprecated use `DeactivateLicenseRequestEntity$Outbound` instead. */\n  export type Outbound = DeactivateLicenseRequestEntity$Outbound;\n}\n\nexport function deactivateLicenseRequestEntityToJSON(\n  deactivateLicenseRequestEntity: DeactivateLicenseRequestEntity,\n): string {\n  return JSON.stringify(\n    DeactivateLicenseRequestEntity$outboundSchema.parse(\n      deactivateLicenseRequestEntity,\n    ),\n  );\n}\n\nexport function deactivateLicenseRequestEntityFromJSON(\n  jsonString: string,\n): SafeParseResult<DeactivateLicenseRequestEntity, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => DeactivateLicenseRequestEntity$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'DeactivateLicenseRequestEntity' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { ClosedEnum } from \"../../types/enums.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\n/**\n * String representing the environment.\n */\nexport const DiscountEntityMode = {\n  Test: \"test\",\n  Prod: \"prod\",\n  Sandbox: \"sandbox\",\n} as const;\n/**\n * String representing the environment.\n */\nexport type DiscountEntityMode = ClosedEnum<typeof DiscountEntityMode>;\n\n/**\n * The status of the discount (e.g., active, inactive).\n */\nexport const DiscountEntityStatus = {\n  Active: \"active\",\n  Draft: \"draft\",\n  Expired: \"expired\",\n  Scheduled: \"scheduled\",\n} as const;\n/**\n * The status of the discount (e.g., active, inactive).\n */\nexport type DiscountEntityStatus = ClosedEnum<typeof DiscountEntityStatus>;\n\n/**\n * The type of the discount, either \"percentage\" or \"fixed\".\n */\nexport const DiscountEntityType = {\n  Percentage: \"percentage\",\n  Fixed: \"fixed\",\n} as const;\n/**\n * The type of the discount, either \"percentage\" or \"fixed\".\n */\nexport type DiscountEntityType = ClosedEnum<typeof DiscountEntityType>;\n\n/**\n * The duration type for the discount.\n */\nexport const Duration = {\n  Forever: \"forever\",\n  Once: \"once\",\n  Repeating: \"repeating\",\n} as const;\n/**\n * The duration type for the discount.\n */\nexport type Duration = ClosedEnum<typeof Duration>;\n\nexport type DiscountEntity = {\n  /**\n   * Unique identifier for the object.\n   */\n  id: string;\n  /**\n   * String representing the environment.\n   */\n  mode: DiscountEntityMode;\n  /**\n   * A string representing the object’s type. Objects of the same type share the same value.\n   */\n  object: string;\n  /**\n   * The status of the discount (e.g., active, inactive).\n   */\n  status: DiscountEntityStatus;\n  /**\n   * The name of the discount.\n   */\n  name: string;\n  /**\n   * The discount code. A unique identifier for the discount.\n   */\n  code: string;\n  /**\n   * The type of the discount, either \"percentage\" or \"fixed\".\n   */\n  type: DiscountEntityType;\n  /**\n   * The amount of the discount. Can be a percentage or a fixed amount.\n   */\n  amount?: number | undefined;\n  /**\n   * The currency of the discount. Only required if type is \"fixed\".\n   */\n  currency?: string | undefined;\n  /**\n   * The percentage of the discount. Only applicable if type is \"percentage\".\n   */\n  percentage?: number | undefined;\n  /**\n   * The expiry date of the discount.\n   */\n  expiryDate?: Date | undefined;\n  /**\n   * The maximum number of redemptions allowed for the discount.\n   */\n  maxRedemptions?: number | undefined;\n  /**\n   * The duration type for the discount.\n   */\n  duration?: Duration | undefined;\n  /**\n   * The number of months the discount is valid for. Only applicable if the duration is \"repeating\" and the product is a subscription.\n   */\n  durationInMonths?: number | undefined;\n  /**\n   * The list of product IDs to which this discount applies.\n   */\n  appliesToProducts?: Array<string> | undefined;\n};\n\n/** @internal */\nexport const DiscountEntityMode$inboundSchema: z.ZodNativeEnum<\n  typeof DiscountEntityMode\n> = z.nativeEnum(DiscountEntityMode);\n\n/** @internal */\nexport const DiscountEntityMode$outboundSchema: z.ZodNativeEnum<\n  typeof DiscountEntityMode\n> = DiscountEntityMode$inboundSchema;\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace DiscountEntityMode$ {\n  /** @deprecated use `DiscountEntityMode$inboundSchema` instead. */\n  export const inboundSchema = DiscountEntityMode$inboundSchema;\n  /** @deprecated use `DiscountEntityMode$outboundSchema` instead. */\n  export const outboundSchema = DiscountEntityMode$outboundSchema;\n}\n\n/** @internal */\nexport const DiscountEntityStatus$inboundSchema: z.ZodNativeEnum<\n  typeof DiscountEntityStatus\n> = z.nativeEnum(DiscountEntityStatus);\n\n/** @internal */\nexport const DiscountEntityStatus$outboundSchema: z.ZodNativeEnum<\n  typeof DiscountEntityStatus\n> = DiscountEntityStatus$inboundSchema;\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace DiscountEntityStatus$ {\n  /** @deprecated use `DiscountEntityStatus$inboundSchema` instead. */\n  export const inboundSchema = DiscountEntityStatus$inboundSchema;\n  /** @deprecated use `DiscountEntityStatus$outboundSchema` instead. */\n  export const outboundSchema = DiscountEntityStatus$outboundSchema;\n}\n\n/** @internal */\nexport const DiscountEntityType$inboundSchema: z.ZodNativeEnum<\n  typeof DiscountEntityType\n> = z.nativeEnum(DiscountEntityType);\n\n/** @internal */\nexport const DiscountEntityType$outboundSchema: z.ZodNativeEnum<\n  typeof DiscountEntityType\n> = DiscountEntityType$inboundSchema;\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace DiscountEntityType$ {\n  /** @deprecated use `DiscountEntityType$inboundSchema` instead. */\n  export const inboundSchema = DiscountEntityType$inboundSchema;\n  /** @deprecated use `DiscountEntityType$outboundSchema` instead. */\n  export const outboundSchema = DiscountEntityType$outboundSchema;\n}\n\n/** @internal */\nexport const Duration$inboundSchema: z.ZodNativeEnum<typeof Duration> = z\n  .nativeEnum(Duration);\n\n/** @internal */\nexport const Duration$outboundSchema: z.ZodNativeEnum<typeof Duration> =\n  Duration$inboundSchema;\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace Duration$ {\n  /** @deprecated use `Duration$inboundSchema` instead. */\n  export const inboundSchema = Duration$inboundSchema;\n  /** @deprecated use `Duration$outboundSchema` instead. */\n  export const outboundSchema = Duration$outboundSchema;\n}\n\n/** @internal */\nexport const DiscountEntity$inboundSchema: z.ZodType<\n  DiscountEntity,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  id: z.string(),\n  mode: DiscountEntityMode$inboundSchema,\n  object: z.string(),\n  status: DiscountEntityStatus$inboundSchema,\n  name: z.string(),\n  code: z.string(),\n  type: DiscountEntityType$inboundSchema,\n  amount: z.number().optional(),\n  currency: z.string().optional(),\n  percentage: z.number().optional(),\n  expiry_date: z.string().datetime({ offset: true }).transform(v => new Date(v))\n    .optional(),\n  max_redemptions: z.number().optional(),\n  duration: Duration$inboundSchema.optional(),\n  duration_in_months: z.number().optional(),\n  applies_to_products: z.array(z.string()).optional(),\n}).transform((v) => {\n  return remap$(v, {\n    \"expiry_date\": \"expiryDate\",\n    \"max_redemptions\": \"maxRedemptions\",\n    \"duration_in_months\": \"durationInMonths\",\n    \"applies_to_products\": \"appliesToProducts\",\n  });\n});\n\n/** @internal */\nexport type DiscountEntity$Outbound = {\n  id: string;\n  mode: string;\n  object: string;\n  status: string;\n  name: string;\n  code: string;\n  type: string;\n  amount?: number | undefined;\n  currency?: string | undefined;\n  percentage?: number | undefined;\n  expiry_date?: string | undefined;\n  max_redemptions?: number | undefined;\n  duration?: string | undefined;\n  duration_in_months?: number | undefined;\n  applies_to_products?: Array<string> | undefined;\n};\n\n/** @internal */\nexport const DiscountEntity$outboundSchema: z.ZodType<\n  DiscountEntity$Outbound,\n  z.ZodTypeDef,\n  DiscountEntity\n> = z.object({\n  id: z.string(),\n  mode: DiscountEntityMode$outboundSchema,\n  object: z.string(),\n  status: DiscountEntityStatus$outboundSchema,\n  name: z.string(),\n  code: z.string(),\n  type: DiscountEntityType$outboundSchema,\n  amount: z.number().optional(),\n  currency: z.string().optional(),\n  percentage: z.number().optional(),\n  expiryDate: z.date().transform(v => v.toISOString()).optional(),\n  maxRedemptions: z.number().optional(),\n  duration: Duration$outboundSchema.optional(),\n  durationInMonths: z.number().optional(),\n  appliesToProducts: z.array(z.string()).optional(),\n}).transform((v) => {\n  return remap$(v, {\n    expiryDate: \"expiry_date\",\n    maxRedemptions: \"max_redemptions\",\n    durationInMonths: \"duration_in_months\",\n    appliesToProducts: \"applies_to_products\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace DiscountEntity$ {\n  /** @deprecated use `DiscountEntity$inboundSchema` instead. */\n  export const inboundSchema = DiscountEntity$inboundSchema;\n  /** @deprecated use `DiscountEntity$outboundSchema` instead. */\n  export const outboundSchema = DiscountEntity$outboundSchema;\n  /** @deprecated use `DiscountEntity$Outbound` instead. */\n  export type Outbound = DiscountEntity$Outbound;\n}\n\nexport function discountEntityToJSON(discountEntity: DiscountEntity): string {\n  return JSON.stringify(DiscountEntity$outboundSchema.parse(discountEntity));\n}\n\nexport function discountEntityFromJSON(\n  jsonString: string,\n): SafeParseResult<DiscountEntity, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => DiscountEntity$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'DiscountEntity' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\nexport type PaginationEntity = {\n  /**\n   * Total number of records in the list\n   */\n  totalRecords: number;\n  /**\n   * Total number of pages available\n   */\n  totalPages: number;\n  /**\n   * The current page number\n   */\n  currentPage: number;\n  /**\n   * The next page number, or null if there is no next page\n   */\n  nextPage: number | null;\n  /**\n   * The previous page number, or null if there is no previous page\n   */\n  prevPage: number | null;\n};\n\n/** @internal */\nexport const PaginationEntity$inboundSchema: z.ZodType<\n  PaginationEntity,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  total_records: z.number(),\n  total_pages: z.number(),\n  current_page: z.number(),\n  next_page: z.nullable(z.number()),\n  prev_page: z.nullable(z.number()),\n}).transform((v) => {\n  return remap$(v, {\n    \"total_records\": \"totalRecords\",\n    \"total_pages\": \"totalPages\",\n    \"current_page\": \"currentPage\",\n    \"next_page\": \"nextPage\",\n    \"prev_page\": \"prevPage\",\n  });\n});\n\n/** @internal */\nexport type PaginationEntity$Outbound = {\n  total_records: number;\n  total_pages: number;\n  current_page: number;\n  next_page: number | null;\n  prev_page: number | null;\n};\n\n/** @internal */\nexport const PaginationEntity$outboundSchema: z.ZodType<\n  PaginationEntity$Outbound,\n  z.ZodTypeDef,\n  PaginationEntity\n> = z.object({\n  totalRecords: z.number(),\n  totalPages: z.number(),\n  currentPage: z.number(),\n  nextPage: z.nullable(z.number()),\n  prevPage: z.nullable(z.number()),\n}).transform((v) => {\n  return remap$(v, {\n    totalRecords: \"total_records\",\n    totalPages: \"total_pages\",\n    currentPage: \"current_page\",\n    nextPage: \"next_page\",\n    prevPage: \"prev_page\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace PaginationEntity$ {\n  /** @deprecated use `PaginationEntity$inboundSchema` instead. */\n  export const inboundSchema = PaginationEntity$inboundSchema;\n  /** @deprecated use `PaginationEntity$outboundSchema` instead. */\n  export const outboundSchema = PaginationEntity$outboundSchema;\n  /** @deprecated use `PaginationEntity$Outbound` instead. */\n  export type Outbound = PaginationEntity$Outbound;\n}\n\nexport function paginationEntityToJSON(\n  paginationEntity: PaginationEntity,\n): string {\n  return JSON.stringify(\n    PaginationEntity$outboundSchema.parse(paginationEntity),\n  );\n}\n\nexport function paginationEntityFromJSON(\n  jsonString: string,\n): SafeParseResult<PaginationEntity, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => PaginationEntity$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'PaginationEntity' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\nimport {\n  PaginationEntity,\n  PaginationEntity$inboundSchema,\n  PaginationEntity$Outbound,\n  PaginationEntity$outboundSchema,\n} from \"./paginationentity.js\";\nimport {\n  ProductEntity,\n  ProductEntity$inboundSchema,\n  ProductEntity$Outbound,\n  ProductEntity$outboundSchema,\n} from \"./productentity.js\";\n\nexport type ProductListEntity = {\n  /**\n   * List of product items\n   */\n  items: Array<ProductEntity>;\n  /**\n   * Pagination details for the list\n   */\n  pagination: PaginationEntity;\n};\n\n/** @internal */\nexport const ProductListEntity$inboundSchema: z.ZodType<\n  ProductListEntity,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  items: z.array(ProductEntity$inboundSchema),\n  pagination: PaginationEntity$inboundSchema,\n});\n\n/** @internal */\nexport type ProductListEntity$Outbound = {\n  items: Array<ProductEntity$Outbound>;\n  pagination: PaginationEntity$Outbound;\n};\n\n/** @internal */\nexport const ProductListEntity$outboundSchema: z.ZodType<\n  ProductListEntity$Outbound,\n  z.ZodTypeDef,\n  ProductListEntity\n> = z.object({\n  items: z.array(ProductEntity$outboundSchema),\n  pagination: PaginationEntity$outboundSchema,\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace ProductListEntity$ {\n  /** @deprecated use `ProductListEntity$inboundSchema` instead. */\n  export const inboundSchema = ProductListEntity$inboundSchema;\n  /** @deprecated use `ProductListEntity$outboundSchema` instead. */\n  export const outboundSchema = ProductListEntity$outboundSchema;\n  /** @deprecated use `ProductListEntity$Outbound` instead. */\n  export type Outbound = ProductListEntity$Outbound;\n}\n\nexport function productListEntityToJSON(\n  productListEntity: ProductListEntity,\n): string {\n  return JSON.stringify(\n    ProductListEntity$outboundSchema.parse(productListEntity),\n  );\n}\n\nexport function productListEntityFromJSON(\n  jsonString: string,\n): SafeParseResult<ProductListEntity, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => ProductListEntity$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'ProductListEntity' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\nimport {\n  PaginationEntity,\n  PaginationEntity$inboundSchema,\n  PaginationEntity$Outbound,\n  PaginationEntity$outboundSchema,\n} from \"./paginationentity.js\";\nimport {\n  TransactionEntity,\n  TransactionEntity$inboundSchema,\n  TransactionEntity$Outbound,\n  TransactionEntity$outboundSchema,\n} from \"./transactionentity.js\";\n\nexport type TransactionListEntity = {\n  /**\n   * List of transactions items\n   */\n  items: Array<TransactionEntity>;\n  /**\n   * Pagination details for the list\n   */\n  pagination: PaginationEntity;\n};\n\n/** @internal */\nexport const TransactionListEntity$inboundSchema: z.ZodType<\n  TransactionListEntity,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  items: z.array(TransactionEntity$inboundSchema),\n  pagination: PaginationEntity$inboundSchema,\n});\n\n/** @internal */\nexport type TransactionListEntity$Outbound = {\n  items: Array<TransactionEntity$Outbound>;\n  pagination: PaginationEntity$Outbound;\n};\n\n/** @internal */\nexport const TransactionListEntity$outboundSchema: z.ZodType<\n  TransactionListEntity$Outbound,\n  z.ZodTypeDef,\n  TransactionListEntity\n> = z.object({\n  items: z.array(TransactionEntity$outboundSchema),\n  pagination: PaginationEntity$outboundSchema,\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace TransactionListEntity$ {\n  /** @deprecated use `TransactionListEntity$inboundSchema` instead. */\n  export const inboundSchema = TransactionListEntity$inboundSchema;\n  /** @deprecated use `TransactionListEntity$outboundSchema` instead. */\n  export const outboundSchema = TransactionListEntity$outboundSchema;\n  /** @deprecated use `TransactionListEntity$Outbound` instead. */\n  export type Outbound = TransactionListEntity$Outbound;\n}\n\nexport function transactionListEntityToJSON(\n  transactionListEntity: TransactionListEntity,\n): string {\n  return JSON.stringify(\n    TransactionListEntity$outboundSchema.parse(transactionListEntity),\n  );\n}\n\nexport function transactionListEntityFromJSON(\n  jsonString: string,\n): SafeParseResult<TransactionListEntity, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => TransactionListEntity$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'TransactionListEntity' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\nexport type UpsertSubscriptionItemEntity = {\n  /**\n   * The id of the item to update.\n   */\n  id?: string | undefined;\n  /**\n   * The ID of the product associated with the subscription item.\n   */\n  productId?: string | undefined;\n  /**\n   * The ID of the price associated with the subscription item.\n   */\n  priceId?: string | undefined;\n  /**\n   * The number of units for the subscription item.\n   */\n  units?: number | undefined;\n};\n\n/** @internal */\nexport const UpsertSubscriptionItemEntity$inboundSchema: z.ZodType<\n  UpsertSubscriptionItemEntity,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  id: z.string().optional(),\n  product_id: z.string().optional(),\n  price_id: z.string().optional(),\n  units: z.number().optional(),\n}).transform((v) => {\n  return remap$(v, {\n    \"product_id\": \"productId\",\n    \"price_id\": \"priceId\",\n  });\n});\n\n/** @internal */\nexport type UpsertSubscriptionItemEntity$Outbound = {\n  id?: string | undefined;\n  product_id?: string | undefined;\n  price_id?: string | undefined;\n  units?: number | undefined;\n};\n\n/** @internal */\nexport const UpsertSubscriptionItemEntity$outboundSchema: z.ZodType<\n  UpsertSubscriptionItemEntity$Outbound,\n  z.ZodTypeDef,\n  UpsertSubscriptionItemEntity\n> = z.object({\n  id: z.string().optional(),\n  productId: z.string().optional(),\n  priceId: z.string().optional(),\n  units: z.number().optional(),\n}).transform((v) => {\n  return remap$(v, {\n    productId: \"product_id\",\n    priceId: \"price_id\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace UpsertSubscriptionItemEntity$ {\n  /** @deprecated use `UpsertSubscriptionItemEntity$inboundSchema` instead. */\n  export const inboundSchema = UpsertSubscriptionItemEntity$inboundSchema;\n  /** @deprecated use `UpsertSubscriptionItemEntity$outboundSchema` instead. */\n  export const outboundSchema = UpsertSubscriptionItemEntity$outboundSchema;\n  /** @deprecated use `UpsertSubscriptionItemEntity$Outbound` instead. */\n  export type Outbound = UpsertSubscriptionItemEntity$Outbound;\n}\n\nexport function upsertSubscriptionItemEntityToJSON(\n  upsertSubscriptionItemEntity: UpsertSubscriptionItemEntity,\n): string {\n  return JSON.stringify(\n    UpsertSubscriptionItemEntity$outboundSchema.parse(\n      upsertSubscriptionItemEntity,\n    ),\n  );\n}\n\nexport function upsertSubscriptionItemEntityFromJSON(\n  jsonString: string,\n): SafeParseResult<UpsertSubscriptionItemEntity, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => UpsertSubscriptionItemEntity$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'UpsertSubscriptionItemEntity' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { ClosedEnum } from \"../../types/enums.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\nimport {\n  UpsertSubscriptionItemEntity,\n  UpsertSubscriptionItemEntity$inboundSchema,\n  UpsertSubscriptionItemEntity$Outbound,\n  UpsertSubscriptionItemEntity$outboundSchema,\n} from \"./upsertsubscriptionitementity.js\";\n\n/**\n * The update behavior for the subscription (defaults to proration)\n */\nexport const UpdateBehavior = {\n  ProrationChargeImmediately: \"proration-charge-immediately\",\n  ProrationCharge: \"proration-charge\",\n  ProrationNone: \"proration-none\",\n} as const;\n/**\n * The update behavior for the subscription (defaults to proration)\n */\nexport type UpdateBehavior = ClosedEnum<typeof UpdateBehavior>;\n\nexport type UpdateSubscriptionRequestEntity = {\n  /**\n   * List of subscription items to update/create. If no item ID is provided, the item will be created.\n   */\n  items?: Array<UpsertSubscriptionItemEntity> | undefined;\n  /**\n   * The update behavior for the subscription (defaults to proration)\n   */\n  updateBehavior?: UpdateBehavior | undefined;\n};\n\n/** @internal */\nexport const UpdateBehavior$inboundSchema: z.ZodNativeEnum<\n  typeof UpdateBehavior\n> = z.nativeEnum(UpdateBehavior);\n\n/** @internal */\nexport const UpdateBehavior$outboundSchema: z.ZodNativeEnum<\n  typeof UpdateBehavior\n> = UpdateBehavior$inboundSchema;\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace UpdateBehavior$ {\n  /** @deprecated use `UpdateBehavior$inboundSchema` instead. */\n  export const inboundSchema = UpdateBehavior$inboundSchema;\n  /** @deprecated use `UpdateBehavior$outboundSchema` instead. */\n  export const outboundSchema = UpdateBehavior$outboundSchema;\n}\n\n/** @internal */\nexport const UpdateSubscriptionRequestEntity$inboundSchema: z.ZodType<\n  UpdateSubscriptionRequestEntity,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  items: z.array(UpsertSubscriptionItemEntity$inboundSchema).optional(),\n  update_behavior: UpdateBehavior$inboundSchema.default(\"proration-charge\"),\n}).transform((v) => {\n  return remap$(v, {\n    \"update_behavior\": \"updateBehavior\",\n  });\n});\n\n/** @internal */\nexport type UpdateSubscriptionRequestEntity$Outbound = {\n  items?: Array<UpsertSubscriptionItemEntity$Outbound> | undefined;\n  update_behavior: string;\n};\n\n/** @internal */\nexport const UpdateSubscriptionRequestEntity$outboundSchema: z.ZodType<\n  UpdateSubscriptionRequestEntity$Outbound,\n  z.ZodTypeDef,\n  UpdateSubscriptionRequestEntity\n> = z.object({\n  items: z.array(UpsertSubscriptionItemEntity$outboundSchema).optional(),\n  updateBehavior: UpdateBehavior$outboundSchema.default(\"proration-charge\"),\n}).transform((v) => {\n  return remap$(v, {\n    updateBehavior: \"update_behavior\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace UpdateSubscriptionRequestEntity$ {\n  /** @deprecated use `UpdateSubscriptionRequestEntity$inboundSchema` instead. */\n  export const inboundSchema = UpdateSubscriptionRequestEntity$inboundSchema;\n  /** @deprecated use `UpdateSubscriptionRequestEntity$outboundSchema` instead. */\n  export const outboundSchema = UpdateSubscriptionRequestEntity$outboundSchema;\n  /** @deprecated use `UpdateSubscriptionRequestEntity$Outbound` instead. */\n  export type Outbound = UpdateSubscriptionRequestEntity$Outbound;\n}\n\nexport function updateSubscriptionRequestEntityToJSON(\n  updateSubscriptionRequestEntity: UpdateSubscriptionRequestEntity,\n): string {\n  return JSON.stringify(\n    UpdateSubscriptionRequestEntity$outboundSchema.parse(\n      updateSubscriptionRequestEntity,\n    ),\n  );\n}\n\nexport function updateSubscriptionRequestEntityFromJSON(\n  jsonString: string,\n): SafeParseResult<UpdateSubscriptionRequestEntity, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => UpdateSubscriptionRequestEntity$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'UpdateSubscriptionRequestEntity' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { ClosedEnum } from \"../../types/enums.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\n/**\n * The update behavior for the subscription (defaults to proration-charge-immediately)\n */\nexport const UpgradeSubscriptionRequestEntityUpdateBehavior = {\n  ProrationChargeImmediately: \"proration-charge-immediately\",\n  ProrationCharge: \"proration-charge\",\n  ProrationNone: \"proration-none\",\n} as const;\n/**\n * The update behavior for the subscription (defaults to proration-charge-immediately)\n */\nexport type UpgradeSubscriptionRequestEntityUpdateBehavior = ClosedEnum<\n  typeof UpgradeSubscriptionRequestEntityUpdateBehavior\n>;\n\nexport type UpgradeSubscriptionRequestEntity = {\n  /**\n   * The ID of the product to upgrade to\n   */\n  productId: string;\n  /**\n   * The update behavior for the subscription (defaults to proration-charge-immediately)\n   */\n  updateBehavior?: UpgradeSubscriptionRequestEntityUpdateBehavior | undefined;\n};\n\n/** @internal */\nexport const UpgradeSubscriptionRequestEntityUpdateBehavior$inboundSchema:\n  z.ZodNativeEnum<typeof UpgradeSubscriptionRequestEntityUpdateBehavior> = z\n    .nativeEnum(UpgradeSubscriptionRequestEntityUpdateBehavior);\n\n/** @internal */\nexport const UpgradeSubscriptionRequestEntityUpdateBehavior$outboundSchema:\n  z.ZodNativeEnum<typeof UpgradeSubscriptionRequestEntityUpdateBehavior> =\n    UpgradeSubscriptionRequestEntityUpdateBehavior$inboundSchema;\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace UpgradeSubscriptionRequestEntityUpdateBehavior$ {\n  /** @deprecated use `UpgradeSubscriptionRequestEntityUpdateBehavior$inboundSchema` instead. */\n  export const inboundSchema =\n    UpgradeSubscriptionRequestEntityUpdateBehavior$inboundSchema;\n  /** @deprecated use `UpgradeSubscriptionRequestEntityUpdateBehavior$outboundSchema` instead. */\n  export const outboundSchema =\n    UpgradeSubscriptionRequestEntityUpdateBehavior$outboundSchema;\n}\n\n/** @internal */\nexport const UpgradeSubscriptionRequestEntity$inboundSchema: z.ZodType<\n  UpgradeSubscriptionRequestEntity,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  product_id: z.string(),\n  update_behavior: UpgradeSubscriptionRequestEntityUpdateBehavior$inboundSchema\n    .default(\"proration-charge-immediately\"),\n}).transform((v) => {\n  return remap$(v, {\n    \"product_id\": \"productId\",\n    \"update_behavior\": \"updateBehavior\",\n  });\n});\n\n/** @internal */\nexport type UpgradeSubscriptionRequestEntity$Outbound = {\n  product_id: string;\n  update_behavior: string;\n};\n\n/** @internal */\nexport const UpgradeSubscriptionRequestEntity$outboundSchema: z.ZodType<\n  UpgradeSubscriptionRequestEntity$Outbound,\n  z.ZodTypeDef,\n  UpgradeSubscriptionRequestEntity\n> = z.object({\n  productId: z.string(),\n  updateBehavior: UpgradeSubscriptionRequestEntityUpdateBehavior$outboundSchema\n    .default(\"proration-charge-immediately\"),\n}).transform((v) => {\n  return remap$(v, {\n    productId: \"product_id\",\n    updateBehavior: \"update_behavior\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace UpgradeSubscriptionRequestEntity$ {\n  /** @deprecated use `UpgradeSubscriptionRequestEntity$inboundSchema` instead. */\n  export const inboundSchema = UpgradeSubscriptionRequestEntity$inboundSchema;\n  /** @deprecated use `UpgradeSubscriptionRequestEntity$outboundSchema` instead. */\n  export const outboundSchema = UpgradeSubscriptionRequestEntity$outboundSchema;\n  /** @deprecated use `UpgradeSubscriptionRequestEntity$Outbound` instead. */\n  export type Outbound = UpgradeSubscriptionRequestEntity$Outbound;\n}\n\nexport function upgradeSubscriptionRequestEntityToJSON(\n  upgradeSubscriptionRequestEntity: UpgradeSubscriptionRequestEntity,\n): string {\n  return JSON.stringify(\n    UpgradeSubscriptionRequestEntity$outboundSchema.parse(\n      upgradeSubscriptionRequestEntity,\n    ),\n  );\n}\n\nexport function upgradeSubscriptionRequestEntityFromJSON(\n  jsonString: string,\n): SafeParseResult<UpgradeSubscriptionRequestEntity, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => UpgradeSubscriptionRequestEntity$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'UpgradeSubscriptionRequestEntity' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\nexport type ValidateLicenseRequestEntity = {\n  /**\n   * The license key to validate.\n   */\n  key: string;\n  /**\n   * Id of the instance to validate.\n   */\n  instanceId: string;\n};\n\n/** @internal */\nexport const ValidateLicenseRequestEntity$inboundSchema: z.ZodType<\n  ValidateLicenseRequestEntity,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  key: z.string(),\n  instance_id: z.string(),\n}).transform((v) => {\n  return remap$(v, {\n    \"instance_id\": \"instanceId\",\n  });\n});\n\n/** @internal */\nexport type ValidateLicenseRequestEntity$Outbound = {\n  key: string;\n  instance_id: string;\n};\n\n/** @internal */\nexport const ValidateLicenseRequestEntity$outboundSchema: z.ZodType<\n  ValidateLicenseRequestEntity$Outbound,\n  z.ZodTypeDef,\n  ValidateLicenseRequestEntity\n> = z.object({\n  key: z.string(),\n  instanceId: z.string(),\n}).transform((v) => {\n  return remap$(v, {\n    instanceId: \"instance_id\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace ValidateLicenseRequestEntity$ {\n  /** @deprecated use `ValidateLicenseRequestEntity$inboundSchema` instead. */\n  export const inboundSchema = ValidateLicenseRequestEntity$inboundSchema;\n  /** @deprecated use `ValidateLicenseRequestEntity$outboundSchema` instead. */\n  export const outboundSchema = ValidateLicenseRequestEntity$outboundSchema;\n  /** @deprecated use `ValidateLicenseRequestEntity$Outbound` instead. */\n  export type Outbound = ValidateLicenseRequestEntity$Outbound;\n}\n\nexport function validateLicenseRequestEntityToJSON(\n  validateLicenseRequestEntity: ValidateLicenseRequestEntity,\n): string {\n  return JSON.stringify(\n    ValidateLicenseRequestEntity$outboundSchema.parse(\n      validateLicenseRequestEntity,\n    ),\n  );\n}\n\nexport function validateLicenseRequestEntityFromJSON(\n  jsonString: string,\n): SafeParseResult<ValidateLicenseRequestEntity, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => ValidateLicenseRequestEntity$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'ValidateLicenseRequestEntity' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport * as components from \"../components/index.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\nexport type ActivateLicenseRequest = {\n  xApiKey: string;\n  activateLicenseRequestEntity: components.ActivateLicenseRequestEntity;\n};\n\n/** @internal */\nexport const ActivateLicenseRequest$inboundSchema: z.ZodType<\n  ActivateLicenseRequest,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  \"x-api-key\": z.string(),\n  ActivateLicenseRequestEntity:\n    components.ActivateLicenseRequestEntity$inboundSchema,\n}).transform((v) => {\n  return remap$(v, {\n    \"x-api-key\": \"xApiKey\",\n    \"ActivateLicenseRequestEntity\": \"activateLicenseRequestEntity\",\n  });\n});\n\n/** @internal */\nexport type ActivateLicenseRequest$Outbound = {\n  \"x-api-key\": string;\n  ActivateLicenseRequestEntity:\n    components.ActivateLicenseRequestEntity$Outbound;\n};\n\n/** @internal */\nexport const ActivateLicenseRequest$outboundSchema: z.ZodType<\n  ActivateLicenseRequest$Outbound,\n  z.ZodTypeDef,\n  ActivateLicenseRequest\n> = z.object({\n  xApiKey: z.string(),\n  activateLicenseRequestEntity:\n    components.ActivateLicenseRequestEntity$outboundSchema,\n}).transform((v) => {\n  return remap$(v, {\n    xApiKey: \"x-api-key\",\n    activateLicenseRequestEntity: \"ActivateLicenseRequestEntity\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace ActivateLicenseRequest$ {\n  /** @deprecated use `ActivateLicenseRequest$inboundSchema` instead. */\n  export const inboundSchema = ActivateLicenseRequest$inboundSchema;\n  /** @deprecated use `ActivateLicenseRequest$outboundSchema` instead. */\n  export const outboundSchema = ActivateLicenseRequest$outboundSchema;\n  /** @deprecated use `ActivateLicenseRequest$Outbound` instead. */\n  export type Outbound = ActivateLicenseRequest$Outbound;\n}\n\nexport function activateLicenseRequestToJSON(\n  activateLicenseRequest: ActivateLicenseRequest,\n): string {\n  return JSON.stringify(\n    ActivateLicenseRequest$outboundSchema.parse(activateLicenseRequest),\n  );\n}\n\nexport function activateLicenseRequestFromJSON(\n  jsonString: string,\n): SafeParseResult<ActivateLicenseRequest, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => ActivateLicenseRequest$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'ActivateLicenseRequest' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\nexport type CancelSubscriptionRequest = {\n  id: string;\n  xApiKey: string;\n};\n\n/** @internal */\nexport const CancelSubscriptionRequest$inboundSchema: z.ZodType<\n  CancelSubscriptionRequest,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  id: z.string(),\n  \"x-api-key\": z.string(),\n}).transform((v) => {\n  return remap$(v, {\n    \"x-api-key\": \"xApiKey\",\n  });\n});\n\n/** @internal */\nexport type CancelSubscriptionRequest$Outbound = {\n  id: string;\n  \"x-api-key\": string;\n};\n\n/** @internal */\nexport const CancelSubscriptionRequest$outboundSchema: z.ZodType<\n  CancelSubscriptionRequest$Outbound,\n  z.ZodTypeDef,\n  CancelSubscriptionRequest\n> = z.object({\n  id: z.string(),\n  xApiKey: z.string(),\n}).transform((v) => {\n  return remap$(v, {\n    xApiKey: \"x-api-key\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace CancelSubscriptionRequest$ {\n  /** @deprecated use `CancelSubscriptionRequest$inboundSchema` instead. */\n  export const inboundSchema = CancelSubscriptionRequest$inboundSchema;\n  /** @deprecated use `CancelSubscriptionRequest$outboundSchema` instead. */\n  export const outboundSchema = CancelSubscriptionRequest$outboundSchema;\n  /** @deprecated use `CancelSubscriptionRequest$Outbound` instead. */\n  export type Outbound = CancelSubscriptionRequest$Outbound;\n}\n\nexport function cancelSubscriptionRequestToJSON(\n  cancelSubscriptionRequest: CancelSubscriptionRequest,\n): string {\n  return JSON.stringify(\n    CancelSubscriptionRequest$outboundSchema.parse(cancelSubscriptionRequest),\n  );\n}\n\nexport function cancelSubscriptionRequestFromJSON(\n  jsonString: string,\n): SafeParseResult<CancelSubscriptionRequest, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => CancelSubscriptionRequest$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'CancelSubscriptionRequest' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport * as components from \"../components/index.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\nexport type CreateCheckoutRequest = {\n  xApiKey: string;\n  /**\n   * Create checkout request payload\n   */\n  createCheckoutRequest: components.CreateCheckoutRequest;\n};\n\n/** @internal */\nexport const CreateCheckoutRequest$inboundSchema: z.ZodType<\n  CreateCheckoutRequest,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  \"x-api-key\": z.string(),\n  CreateCheckoutRequest: components.CreateCheckoutRequest$inboundSchema,\n}).transform((v) => {\n  return remap$(v, {\n    \"x-api-key\": \"xApiKey\",\n    \"CreateCheckoutRequest\": \"createCheckoutRequest\",\n  });\n});\n\n/** @internal */\nexport type CreateCheckoutRequest$Outbound = {\n  \"x-api-key\": string;\n  CreateCheckoutRequest: components.CreateCheckoutRequest$Outbound;\n};\n\n/** @internal */\nexport const CreateCheckoutRequest$outboundSchema: z.ZodType<\n  CreateCheckoutRequest$Outbound,\n  z.ZodTypeDef,\n  CreateCheckoutRequest\n> = z.object({\n  xApiKey: z.string(),\n  createCheckoutRequest: components.CreateCheckoutRequest$outboundSchema,\n}).transform((v) => {\n  return remap$(v, {\n    xApiKey: \"x-api-key\",\n    createCheckoutRequest: \"CreateCheckoutRequest\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace CreateCheckoutRequest$ {\n  /** @deprecated use `CreateCheckoutRequest$inboundSchema` instead. */\n  export const inboundSchema = CreateCheckoutRequest$inboundSchema;\n  /** @deprecated use `CreateCheckoutRequest$outboundSchema` instead. */\n  export const outboundSchema = CreateCheckoutRequest$outboundSchema;\n  /** @deprecated use `CreateCheckoutRequest$Outbound` instead. */\n  export type Outbound = CreateCheckoutRequest$Outbound;\n}\n\nexport function createCheckoutRequestToJSON(\n  createCheckoutRequest: CreateCheckoutRequest,\n): string {\n  return JSON.stringify(\n    CreateCheckoutRequest$outboundSchema.parse(createCheckoutRequest),\n  );\n}\n\nexport function createCheckoutRequestFromJSON(\n  jsonString: string,\n): SafeParseResult<CreateCheckoutRequest, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => CreateCheckoutRequest$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'CreateCheckoutRequest' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport * as components from \"../components/index.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\nexport type CreateDiscountRequest = {\n  xApiKey: string;\n  createDiscountRequestEntity: components.CreateDiscountRequestEntity;\n};\n\n/** @internal */\nexport const CreateDiscountRequest$inboundSchema: z.ZodType<\n  CreateDiscountRequest,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  \"x-api-key\": z.string(),\n  CreateDiscountRequestEntity:\n    components.CreateDiscountRequestEntity$inboundSchema,\n}).transform((v) => {\n  return remap$(v, {\n    \"x-api-key\": \"xApiKey\",\n    \"CreateDiscountRequestEntity\": \"createDiscountRequestEntity\",\n  });\n});\n\n/** @internal */\nexport type CreateDiscountRequest$Outbound = {\n  \"x-api-key\": string;\n  CreateDiscountRequestEntity: components.CreateDiscountRequestEntity$Outbound;\n};\n\n/** @internal */\nexport const CreateDiscountRequest$outboundSchema: z.ZodType<\n  CreateDiscountRequest$Outbound,\n  z.ZodTypeDef,\n  CreateDiscountRequest\n> = z.object({\n  xApiKey: z.string(),\n  createDiscountRequestEntity:\n    components.CreateDiscountRequestEntity$outboundSchema,\n}).transform((v) => {\n  return remap$(v, {\n    xApiKey: \"x-api-key\",\n    createDiscountRequestEntity: \"CreateDiscountRequestEntity\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace CreateDiscountRequest$ {\n  /** @deprecated use `CreateDiscountRequest$inboundSchema` instead. */\n  export const inboundSchema = CreateDiscountRequest$inboundSchema;\n  /** @deprecated use `CreateDiscountRequest$outboundSchema` instead. */\n  export const outboundSchema = CreateDiscountRequest$outboundSchema;\n  /** @deprecated use `CreateDiscountRequest$Outbound` instead. */\n  export type Outbound = CreateDiscountRequest$Outbound;\n}\n\nexport function createDiscountRequestToJSON(\n  createDiscountRequest: CreateDiscountRequest,\n): string {\n  return JSON.stringify(\n    CreateDiscountRequest$outboundSchema.parse(createDiscountRequest),\n  );\n}\n\nexport function createDiscountRequestFromJSON(\n  jsonString: string,\n): SafeParseResult<CreateDiscountRequest, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => CreateDiscountRequest$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'CreateDiscountRequest' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport * as components from \"../components/index.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\nexport type CreateProductRequest = {\n  xApiKey: string;\n  createProductRequestEntity: components.CreateProductRequestEntity;\n};\n\n/** @internal */\nexport const CreateProductRequest$inboundSchema: z.ZodType<\n  CreateProductRequest,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  \"x-api-key\": z.string(),\n  CreateProductRequestEntity:\n    components.CreateProductRequestEntity$inboundSchema,\n}).transform((v) => {\n  return remap$(v, {\n    \"x-api-key\": \"xApiKey\",\n    \"CreateProductRequestEntity\": \"createProductRequestEntity\",\n  });\n});\n\n/** @internal */\nexport type CreateProductRequest$Outbound = {\n  \"x-api-key\": string;\n  CreateProductRequestEntity: components.CreateProductRequestEntity$Outbound;\n};\n\n/** @internal */\nexport const CreateProductRequest$outboundSchema: z.ZodType<\n  CreateProductRequest$Outbound,\n  z.ZodTypeDef,\n  CreateProductRequest\n> = z.object({\n  xApiKey: z.string(),\n  createProductRequestEntity:\n    components.CreateProductRequestEntity$outboundSchema,\n}).transform((v) => {\n  return remap$(v, {\n    xApiKey: \"x-api-key\",\n    createProductRequestEntity: \"CreateProductRequestEntity\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace CreateProductRequest$ {\n  /** @deprecated use `CreateProductRequest$inboundSchema` instead. */\n  export const inboundSchema = CreateProductRequest$inboundSchema;\n  /** @deprecated use `CreateProductRequest$outboundSchema` instead. */\n  export const outboundSchema = CreateProductRequest$outboundSchema;\n  /** @deprecated use `CreateProductRequest$Outbound` instead. */\n  export type Outbound = CreateProductRequest$Outbound;\n}\n\nexport function createProductRequestToJSON(\n  createProductRequest: CreateProductRequest,\n): string {\n  return JSON.stringify(\n    CreateProductRequest$outboundSchema.parse(createProductRequest),\n  );\n}\n\nexport function createProductRequestFromJSON(\n  jsonString: string,\n): SafeParseResult<CreateProductRequest, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => CreateProductRequest$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'CreateProductRequest' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport * as components from \"../components/index.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\nexport type DeactivateLicenseRequest = {\n  xApiKey: string;\n  deactivateLicenseRequestEntity: components.DeactivateLicenseRequestEntity;\n};\n\n/** @internal */\nexport const DeactivateLicenseRequest$inboundSchema: z.ZodType<\n  DeactivateLicenseRequest,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  \"x-api-key\": z.string(),\n  DeactivateLicenseRequestEntity:\n    components.DeactivateLicenseRequestEntity$inboundSchema,\n}).transform((v) => {\n  return remap$(v, {\n    \"x-api-key\": \"xApiKey\",\n    \"DeactivateLicenseRequestEntity\": \"deactivateLicenseRequestEntity\",\n  });\n});\n\n/** @internal */\nexport type DeactivateLicenseRequest$Outbound = {\n  \"x-api-key\": string;\n  DeactivateLicenseRequestEntity:\n    components.DeactivateLicenseRequestEntity$Outbound;\n};\n\n/** @internal */\nexport const DeactivateLicenseRequest$outboundSchema: z.ZodType<\n  DeactivateLicenseRequest$Outbound,\n  z.ZodTypeDef,\n  DeactivateLicenseRequest\n> = z.object({\n  xApiKey: z.string(),\n  deactivateLicenseRequestEntity:\n    components.DeactivateLicenseRequestEntity$outboundSchema,\n}).transform((v) => {\n  return remap$(v, {\n    xApiKey: \"x-api-key\",\n    deactivateLicenseRequestEntity: \"DeactivateLicenseRequestEntity\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace DeactivateLicenseRequest$ {\n  /** @deprecated use `DeactivateLicenseRequest$inboundSchema` instead. */\n  export const inboundSchema = DeactivateLicenseRequest$inboundSchema;\n  /** @deprecated use `DeactivateLicenseRequest$outboundSchema` instead. */\n  export const outboundSchema = DeactivateLicenseRequest$outboundSchema;\n  /** @deprecated use `DeactivateLicenseRequest$Outbound` instead. */\n  export type Outbound = DeactivateLicenseRequest$Outbound;\n}\n\nexport function deactivateLicenseRequestToJSON(\n  deactivateLicenseRequest: DeactivateLicenseRequest,\n): string {\n  return JSON.stringify(\n    DeactivateLicenseRequest$outboundSchema.parse(deactivateLicenseRequest),\n  );\n}\n\nexport function deactivateLicenseRequestFromJSON(\n  jsonString: string,\n): SafeParseResult<DeactivateLicenseRequest, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => DeactivateLicenseRequest$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'DeactivateLicenseRequest' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\nexport type DeleteDiscountRequest = {\n  id: string;\n  xApiKey: string;\n};\n\n/** @internal */\nexport const DeleteDiscountRequest$inboundSchema: z.ZodType<\n  DeleteDiscountRequest,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  id: z.string(),\n  \"x-api-key\": z.string(),\n}).transform((v) => {\n  return remap$(v, {\n    \"x-api-key\": \"xApiKey\",\n  });\n});\n\n/** @internal */\nexport type DeleteDiscountRequest$Outbound = {\n  id: string;\n  \"x-api-key\": string;\n};\n\n/** @internal */\nexport const DeleteDiscountRequest$outboundSchema: z.ZodType<\n  DeleteDiscountRequest$Outbound,\n  z.ZodTypeDef,\n  DeleteDiscountRequest\n> = z.object({\n  id: z.string(),\n  xApiKey: z.string(),\n}).transform((v) => {\n  return remap$(v, {\n    xApiKey: \"x-api-key\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace DeleteDiscountRequest$ {\n  /** @deprecated use `DeleteDiscountRequest$inboundSchema` instead. */\n  export const inboundSchema = DeleteDiscountRequest$inboundSchema;\n  /** @deprecated use `DeleteDiscountRequest$outboundSchema` instead. */\n  export const outboundSchema = DeleteDiscountRequest$outboundSchema;\n  /** @deprecated use `DeleteDiscountRequest$Outbound` instead. */\n  export type Outbound = DeleteDiscountRequest$Outbound;\n}\n\nexport function deleteDiscountRequestToJSON(\n  deleteDiscountRequest: DeleteDiscountRequest,\n): string {\n  return JSON.stringify(\n    DeleteDiscountRequest$outboundSchema.parse(deleteDiscountRequest),\n  );\n}\n\nexport function deleteDiscountRequestFromJSON(\n  jsonString: string,\n): SafeParseResult<DeleteDiscountRequest, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => DeleteDiscountRequest$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'DeleteDiscountRequest' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport * as components from \"../components/index.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\nexport type GenerateCustomerLinksRequest = {\n  xApiKey: string;\n  createCustomerPortalLinkRequestEntity:\n    components.CreateCustomerPortalLinkRequestEntity;\n};\n\n/** @internal */\nexport const GenerateCustomerLinksRequest$inboundSchema: z.ZodType<\n  GenerateCustomerLinksRequest,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  \"x-api-key\": z.string(),\n  CreateCustomerPortalLinkRequestEntity:\n    components.CreateCustomerPortalLinkRequestEntity$inboundSchema,\n}).transform((v) => {\n  return remap$(v, {\n    \"x-api-key\": \"xApiKey\",\n    \"CreateCustomerPortalLinkRequestEntity\":\n      \"createCustomerPortalLinkRequestEntity\",\n  });\n});\n\n/** @internal */\nexport type GenerateCustomerLinksRequest$Outbound = {\n  \"x-api-key\": string;\n  CreateCustomerPortalLinkRequestEntity:\n    components.CreateCustomerPortalLinkRequestEntity$Outbound;\n};\n\n/** @internal */\nexport const GenerateCustomerLinksRequest$outboundSchema: z.ZodType<\n  GenerateCustomerLinksRequest$Outbound,\n  z.ZodTypeDef,\n  GenerateCustomerLinksRequest\n> = z.object({\n  xApiKey: z.string(),\n  createCustomerPortalLinkRequestEntity:\n    components.CreateCustomerPortalLinkRequestEntity$outboundSchema,\n}).transform((v) => {\n  return remap$(v, {\n    xApiKey: \"x-api-key\",\n    createCustomerPortalLinkRequestEntity:\n      \"CreateCustomerPortalLinkRequestEntity\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace GenerateCustomerLinksRequest$ {\n  /** @deprecated use `GenerateCustomerLinksRequest$inboundSchema` instead. */\n  export const inboundSchema = GenerateCustomerLinksRequest$inboundSchema;\n  /** @deprecated use `GenerateCustomerLinksRequest$outboundSchema` instead. */\n  export const outboundSchema = GenerateCustomerLinksRequest$outboundSchema;\n  /** @deprecated use `GenerateCustomerLinksRequest$Outbound` instead. */\n  export type Outbound = GenerateCustomerLinksRequest$Outbound;\n}\n\nexport function generateCustomerLinksRequestToJSON(\n  generateCustomerLinksRequest: GenerateCustomerLinksRequest,\n): string {\n  return JSON.stringify(\n    GenerateCustomerLinksRequest$outboundSchema.parse(\n      generateCustomerLinksRequest,\n    ),\n  );\n}\n\nexport function generateCustomerLinksRequestFromJSON(\n  jsonString: string,\n): SafeParseResult<GenerateCustomerLinksRequest, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => GenerateCustomerLinksRequest$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'GenerateCustomerLinksRequest' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\nexport type RetrieveCheckoutRequest = {\n  checkoutId: string;\n  xApiKey: string;\n};\n\n/** @internal */\nexport const RetrieveCheckoutRequest$inboundSchema: z.ZodType<\n  RetrieveCheckoutRequest,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  checkout_id: z.string(),\n  \"x-api-key\": z.string(),\n}).transform((v) => {\n  return remap$(v, {\n    \"checkout_id\": \"checkoutId\",\n    \"x-api-key\": \"xApiKey\",\n  });\n});\n\n/** @internal */\nexport type RetrieveCheckoutRequest$Outbound = {\n  checkout_id: string;\n  \"x-api-key\": string;\n};\n\n/** @internal */\nexport const RetrieveCheckoutRequest$outboundSchema: z.ZodType<\n  RetrieveCheckoutRequest$Outbound,\n  z.ZodTypeDef,\n  RetrieveCheckoutRequest\n> = z.object({\n  checkoutId: z.string(),\n  xApiKey: z.string(),\n}).transform((v) => {\n  return remap$(v, {\n    checkoutId: \"checkout_id\",\n    xApiKey: \"x-api-key\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace RetrieveCheckoutRequest$ {\n  /** @deprecated use `RetrieveCheckoutRequest$inboundSchema` instead. */\n  export const inboundSchema = RetrieveCheckoutRequest$inboundSchema;\n  /** @deprecated use `RetrieveCheckoutRequest$outboundSchema` instead. */\n  export const outboundSchema = RetrieveCheckoutRequest$outboundSchema;\n  /** @deprecated use `RetrieveCheckoutRequest$Outbound` instead. */\n  export type Outbound = RetrieveCheckoutRequest$Outbound;\n}\n\nexport function retrieveCheckoutRequestToJSON(\n  retrieveCheckoutRequest: RetrieveCheckoutRequest,\n): string {\n  return JSON.stringify(\n    RetrieveCheckoutRequest$outboundSchema.parse(retrieveCheckoutRequest),\n  );\n}\n\nexport function retrieveCheckoutRequestFromJSON(\n  jsonString: string,\n): SafeParseResult<RetrieveCheckoutRequest, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => RetrieveCheckoutRequest$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'RetrieveCheckoutRequest' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\nexport type RetrieveCustomerRequest = {\n  /**\n   * The unique identifier of the customer\n   */\n  customerId?: string | undefined;\n  /**\n   * The unique email of the customer\n   */\n  email?: string | undefined;\n  xApiKey: string;\n};\n\n/** @internal */\nexport const RetrieveCustomerRequest$inboundSchema: z.ZodType<\n  RetrieveCustomerRequest,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  customer_id: z.string().optional(),\n  email: z.string().optional(),\n  \"x-api-key\": z.string(),\n}).transform((v) => {\n  return remap$(v, {\n    \"customer_id\": \"customerId\",\n    \"x-api-key\": \"xApiKey\",\n  });\n});\n\n/** @internal */\nexport type RetrieveCustomerRequest$Outbound = {\n  customer_id?: string | undefined;\n  email?: string | undefined;\n  \"x-api-key\": string;\n};\n\n/** @internal */\nexport const RetrieveCustomerRequest$outboundSchema: z.ZodType<\n  RetrieveCustomerRequest$Outbound,\n  z.ZodTypeDef,\n  RetrieveCustomerRequest\n> = z.object({\n  customerId: z.string().optional(),\n  email: z.string().optional(),\n  xApiKey: z.string(),\n}).transform((v) => {\n  return remap$(v, {\n    customerId: \"customer_id\",\n    xApiKey: \"x-api-key\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace RetrieveCustomerRequest$ {\n  /** @deprecated use `RetrieveCustomerRequest$inboundSchema` instead. */\n  export const inboundSchema = RetrieveCustomerRequest$inboundSchema;\n  /** @deprecated use `RetrieveCustomerRequest$outboundSchema` instead. */\n  export const outboundSchema = RetrieveCustomerRequest$outboundSchema;\n  /** @deprecated use `RetrieveCustomerRequest$Outbound` instead. */\n  export type Outbound = RetrieveCustomerRequest$Outbound;\n}\n\nexport function retrieveCustomerRequestToJSON(\n  retrieveCustomerRequest: RetrieveCustomerRequest,\n): string {\n  return JSON.stringify(\n    RetrieveCustomerRequest$outboundSchema.parse(retrieveCustomerRequest),\n  );\n}\n\nexport function retrieveCustomerRequestFromJSON(\n  jsonString: string,\n): SafeParseResult<RetrieveCustomerRequest, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => RetrieveCustomerRequest$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'RetrieveCustomerRequest' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\nexport type RetrieveDiscountRequest = {\n  /**\n   * The unique identifier of the discount (provide either discount_id OR discount_code)\n   */\n  discountId?: string | undefined;\n  /**\n   * The unique discount code (provide either discount_id OR discount_code)\n   */\n  discountCode?: string | undefined;\n  xApiKey: string;\n};\n\n/** @internal */\nexport const RetrieveDiscountRequest$inboundSchema: z.ZodType<\n  RetrieveDiscountRequest,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  discount_id: z.string().optional(),\n  discount_code: z.string().optional(),\n  \"x-api-key\": z.string(),\n}).transform((v) => {\n  return remap$(v, {\n    \"discount_id\": \"discountId\",\n    \"discount_code\": \"discountCode\",\n    \"x-api-key\": \"xApiKey\",\n  });\n});\n\n/** @internal */\nexport type RetrieveDiscountRequest$Outbound = {\n  discount_id?: string | undefined;\n  discount_code?: string | undefined;\n  \"x-api-key\": string;\n};\n\n/** @internal */\nexport const RetrieveDiscountRequest$outboundSchema: z.ZodType<\n  RetrieveDiscountRequest$Outbound,\n  z.ZodTypeDef,\n  RetrieveDiscountRequest\n> = z.object({\n  discountId: z.string().optional(),\n  discountCode: z.string().optional(),\n  xApiKey: z.string(),\n}).transform((v) => {\n  return remap$(v, {\n    discountId: \"discount_id\",\n    discountCode: \"discount_code\",\n    xApiKey: \"x-api-key\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace RetrieveDiscountRequest$ {\n  /** @deprecated use `RetrieveDiscountRequest$inboundSchema` instead. */\n  export const inboundSchema = RetrieveDiscountRequest$inboundSchema;\n  /** @deprecated use `RetrieveDiscountRequest$outboundSchema` instead. */\n  export const outboundSchema = RetrieveDiscountRequest$outboundSchema;\n  /** @deprecated use `RetrieveDiscountRequest$Outbound` instead. */\n  export type Outbound = RetrieveDiscountRequest$Outbound;\n}\n\nexport function retrieveDiscountRequestToJSON(\n  retrieveDiscountRequest: RetrieveDiscountRequest,\n): string {\n  return JSON.stringify(\n    RetrieveDiscountRequest$outboundSchema.parse(retrieveDiscountRequest),\n  );\n}\n\nexport function retrieveDiscountRequestFromJSON(\n  jsonString: string,\n): SafeParseResult<RetrieveDiscountRequest, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => RetrieveDiscountRequest$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'RetrieveDiscountRequest' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\nexport type RetrieveProductRequest = {\n  /**\n   * The unique identifier of the product\n   */\n  productId: string;\n  xApiKey: string;\n};\n\n/** @internal */\nexport const RetrieveProductRequest$inboundSchema: z.ZodType<\n  RetrieveProductRequest,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  product_id: z.string(),\n  \"x-api-key\": z.string(),\n}).transform((v) => {\n  return remap$(v, {\n    \"product_id\": \"productId\",\n    \"x-api-key\": \"xApiKey\",\n  });\n});\n\n/** @internal */\nexport type RetrieveProductRequest$Outbound = {\n  product_id: string;\n  \"x-api-key\": string;\n};\n\n/** @internal */\nexport const RetrieveProductRequest$outboundSchema: z.ZodType<\n  RetrieveProductRequest$Outbound,\n  z.ZodTypeDef,\n  RetrieveProductRequest\n> = z.object({\n  productId: z.string(),\n  xApiKey: z.string(),\n}).transform((v) => {\n  return remap$(v, {\n    productId: \"product_id\",\n    xApiKey: \"x-api-key\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace RetrieveProductRequest$ {\n  /** @deprecated use `RetrieveProductRequest$inboundSchema` instead. */\n  export const inboundSchema = RetrieveProductRequest$inboundSchema;\n  /** @deprecated use `RetrieveProductRequest$outboundSchema` instead. */\n  export const outboundSchema = RetrieveProductRequest$outboundSchema;\n  /** @deprecated use `RetrieveProductRequest$Outbound` instead. */\n  export type Outbound = RetrieveProductRequest$Outbound;\n}\n\nexport function retrieveProductRequestToJSON(\n  retrieveProductRequest: RetrieveProductRequest,\n): string {\n  return JSON.stringify(\n    RetrieveProductRequest$outboundSchema.parse(retrieveProductRequest),\n  );\n}\n\nexport function retrieveProductRequestFromJSON(\n  jsonString: string,\n): SafeParseResult<RetrieveProductRequest, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => RetrieveProductRequest$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'RetrieveProductRequest' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\nexport type RetrieveSubscriptionRequest = {\n  /**\n   * The unique identifier of the subscription\n   */\n  subscriptionId: string;\n  xApiKey: string;\n};\n\n/** @internal */\nexport const RetrieveSubscriptionRequest$inboundSchema: z.ZodType<\n  RetrieveSubscriptionRequest,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  subscription_id: z.string(),\n  \"x-api-key\": z.string(),\n}).transform((v) => {\n  return remap$(v, {\n    \"subscription_id\": \"subscriptionId\",\n    \"x-api-key\": \"xApiKey\",\n  });\n});\n\n/** @internal */\nexport type RetrieveSubscriptionRequest$Outbound = {\n  subscription_id: string;\n  \"x-api-key\": string;\n};\n\n/** @internal */\nexport const RetrieveSubscriptionRequest$outboundSchema: z.ZodType<\n  RetrieveSubscriptionRequest$Outbound,\n  z.ZodTypeDef,\n  RetrieveSubscriptionRequest\n> = z.object({\n  subscriptionId: z.string(),\n  xApiKey: z.string(),\n}).transform((v) => {\n  return remap$(v, {\n    subscriptionId: \"subscription_id\",\n    xApiKey: \"x-api-key\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace RetrieveSubscriptionRequest$ {\n  /** @deprecated use `RetrieveSubscriptionRequest$inboundSchema` instead. */\n  export const inboundSchema = RetrieveSubscriptionRequest$inboundSchema;\n  /** @deprecated use `RetrieveSubscriptionRequest$outboundSchema` instead. */\n  export const outboundSchema = RetrieveSubscriptionRequest$outboundSchema;\n  /** @deprecated use `RetrieveSubscriptionRequest$Outbound` instead. */\n  export type Outbound = RetrieveSubscriptionRequest$Outbound;\n}\n\nexport function retrieveSubscriptionRequestToJSON(\n  retrieveSubscriptionRequest: RetrieveSubscriptionRequest,\n): string {\n  return JSON.stringify(\n    RetrieveSubscriptionRequest$outboundSchema.parse(\n      retrieveSubscriptionRequest,\n    ),\n  );\n}\n\nexport function retrieveSubscriptionRequestFromJSON(\n  jsonString: string,\n): SafeParseResult<RetrieveSubscriptionRequest, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => RetrieveSubscriptionRequest$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'RetrieveSubscriptionRequest' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\nexport type SearchProductsRequest = {\n  /**\n   * The page number\n   */\n  pageNumber?: number | undefined;\n  /**\n   * The the page size\n   */\n  pageSize?: number | undefined;\n  xApiKey: string;\n};\n\n/** @internal */\nexport const SearchProductsRequest$inboundSchema: z.ZodType<\n  SearchProductsRequest,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  page_number: z.number().optional(),\n  page_size: z.number().optional(),\n  \"x-api-key\": z.string(),\n}).transform((v) => {\n  return remap$(v, {\n    \"page_number\": \"pageNumber\",\n    \"page_size\": \"pageSize\",\n    \"x-api-key\": \"xApiKey\",\n  });\n});\n\n/** @internal */\nexport type SearchProductsRequest$Outbound = {\n  page_number?: number | undefined;\n  page_size?: number | undefined;\n  \"x-api-key\": string;\n};\n\n/** @internal */\nexport const SearchProductsRequest$outboundSchema: z.ZodType<\n  SearchProductsRequest$Outbound,\n  z.ZodTypeDef,\n  SearchProductsRequest\n> = z.object({\n  pageNumber: z.number().optional(),\n  pageSize: z.number().optional(),\n  xApiKey: z.string(),\n}).transform((v) => {\n  return remap$(v, {\n    pageNumber: \"page_number\",\n    pageSize: \"page_size\",\n    xApiKey: \"x-api-key\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace SearchProductsRequest$ {\n  /** @deprecated use `SearchProductsRequest$inboundSchema` instead. */\n  export const inboundSchema = SearchProductsRequest$inboundSchema;\n  /** @deprecated use `SearchProductsRequest$outboundSchema` instead. */\n  export const outboundSchema = SearchProductsRequest$outboundSchema;\n  /** @deprecated use `SearchProductsRequest$Outbound` instead. */\n  export type Outbound = SearchProductsRequest$Outbound;\n}\n\nexport function searchProductsRequestToJSON(\n  searchProductsRequest: SearchProductsRequest,\n): string {\n  return JSON.stringify(\n    SearchProductsRequest$outboundSchema.parse(searchProductsRequest),\n  );\n}\n\nexport function searchProductsRequestFromJSON(\n  jsonString: string,\n): SafeParseResult<SearchProductsRequest, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => SearchProductsRequest$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'SearchProductsRequest' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\nexport type SearchTransactionsRequest = {\n  /**\n   * The customer id\n   */\n  customerId?: string | undefined;\n  /**\n   * The order id\n   */\n  orderId?: string | undefined;\n  /**\n   * The product id\n   */\n  productId?: string | undefined;\n  /**\n   * The page number\n   */\n  pageNumber?: number | undefined;\n  /**\n   * The the page size\n   */\n  pageSize?: number | undefined;\n  xApiKey: string;\n};\n\n/** @internal */\nexport const SearchTransactionsRequest$inboundSchema: z.ZodType<\n  SearchTransactionsRequest,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  customer_id: z.string().optional(),\n  order_id: z.string().optional(),\n  product_id: z.string().optional(),\n  page_number: z.number().optional(),\n  page_size: z.number().optional(),\n  \"x-api-key\": z.string(),\n}).transform((v) => {\n  return remap$(v, {\n    \"customer_id\": \"customerId\",\n    \"order_id\": \"orderId\",\n    \"product_id\": \"productId\",\n    \"page_number\": \"pageNumber\",\n    \"page_size\": \"pageSize\",\n    \"x-api-key\": \"xApiKey\",\n  });\n});\n\n/** @internal */\nexport type SearchTransactionsRequest$Outbound = {\n  customer_id?: string | undefined;\n  order_id?: string | undefined;\n  product_id?: string | undefined;\n  page_number?: number | undefined;\n  page_size?: number | undefined;\n  \"x-api-key\": string;\n};\n\n/** @internal */\nexport const SearchTransactionsRequest$outboundSchema: z.ZodType<\n  SearchTransactionsRequest$Outbound,\n  z.ZodTypeDef,\n  SearchTransactionsRequest\n> = z.object({\n  customerId: z.string().optional(),\n  orderId: z.string().optional(),\n  productId: z.string().optional(),\n  pageNumber: z.number().optional(),\n  pageSize: z.number().optional(),\n  xApiKey: z.string(),\n}).transform((v) => {\n  return remap$(v, {\n    customerId: \"customer_id\",\n    orderId: \"order_id\",\n    productId: \"product_id\",\n    pageNumber: \"page_number\",\n    pageSize: \"page_size\",\n    xApiKey: \"x-api-key\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace SearchTransactionsRequest$ {\n  /** @deprecated use `SearchTransactionsRequest$inboundSchema` instead. */\n  export const inboundSchema = SearchTransactionsRequest$inboundSchema;\n  /** @deprecated use `SearchTransactionsRequest$outboundSchema` instead. */\n  export const outboundSchema = SearchTransactionsRequest$outboundSchema;\n  /** @deprecated use `SearchTransactionsRequest$Outbound` instead. */\n  export type Outbound = SearchTransactionsRequest$Outbound;\n}\n\nexport function searchTransactionsRequestToJSON(\n  searchTransactionsRequest: SearchTransactionsRequest,\n): string {\n  return JSON.stringify(\n    SearchTransactionsRequest$outboundSchema.parse(searchTransactionsRequest),\n  );\n}\n\nexport function searchTransactionsRequestFromJSON(\n  jsonString: string,\n): SafeParseResult<SearchTransactionsRequest, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => SearchTransactionsRequest$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'SearchTransactionsRequest' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport * as components from \"../components/index.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\nexport type UpdateSubscriptionRequest = {\n  id: string;\n  xApiKey: string;\n  updateSubscriptionRequestEntity: components.UpdateSubscriptionRequestEntity;\n};\n\n/** @internal */\nexport const UpdateSubscriptionRequest$inboundSchema: z.ZodType<\n  UpdateSubscriptionRequest,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  id: z.string(),\n  \"x-api-key\": z.string(),\n  UpdateSubscriptionRequestEntity:\n    components.UpdateSubscriptionRequestEntity$inboundSchema,\n}).transform((v) => {\n  return remap$(v, {\n    \"x-api-key\": \"xApiKey\",\n    \"UpdateSubscriptionRequestEntity\": \"updateSubscriptionRequestEntity\",\n  });\n});\n\n/** @internal */\nexport type UpdateSubscriptionRequest$Outbound = {\n  id: string;\n  \"x-api-key\": string;\n  UpdateSubscriptionRequestEntity:\n    components.UpdateSubscriptionRequestEntity$Outbound;\n};\n\n/** @internal */\nexport const UpdateSubscriptionRequest$outboundSchema: z.ZodType<\n  UpdateSubscriptionRequest$Outbound,\n  z.ZodTypeDef,\n  UpdateSubscriptionRequest\n> = z.object({\n  id: z.string(),\n  xApiKey: z.string(),\n  updateSubscriptionRequestEntity:\n    components.UpdateSubscriptionRequestEntity$outboundSchema,\n}).transform((v) => {\n  return remap$(v, {\n    xApiKey: \"x-api-key\",\n    updateSubscriptionRequestEntity: \"UpdateSubscriptionRequestEntity\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace UpdateSubscriptionRequest$ {\n  /** @deprecated use `UpdateSubscriptionRequest$inboundSchema` instead. */\n  export const inboundSchema = UpdateSubscriptionRequest$inboundSchema;\n  /** @deprecated use `UpdateSubscriptionRequest$outboundSchema` instead. */\n  export const outboundSchema = UpdateSubscriptionRequest$outboundSchema;\n  /** @deprecated use `UpdateSubscriptionRequest$Outbound` instead. */\n  export type Outbound = UpdateSubscriptionRequest$Outbound;\n}\n\nexport function updateSubscriptionRequestToJSON(\n  updateSubscriptionRequest: UpdateSubscriptionRequest,\n): string {\n  return JSON.stringify(\n    UpdateSubscriptionRequest$outboundSchema.parse(updateSubscriptionRequest),\n  );\n}\n\nexport function updateSubscriptionRequestFromJSON(\n  jsonString: string,\n): SafeParseResult<UpdateSubscriptionRequest, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => UpdateSubscriptionRequest$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'UpdateSubscriptionRequest' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport * as components from \"../components/index.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\nexport type UpgradeSubscriptionRequest = {\n  id: string;\n  xApiKey: string;\n  upgradeSubscriptionRequestEntity: components.UpgradeSubscriptionRequestEntity;\n};\n\n/** @internal */\nexport const UpgradeSubscriptionRequest$inboundSchema: z.ZodType<\n  UpgradeSubscriptionRequest,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  id: z.string(),\n  \"x-api-key\": z.string(),\n  UpgradeSubscriptionRequestEntity:\n    components.UpgradeSubscriptionRequestEntity$inboundSchema,\n}).transform((v) => {\n  return remap$(v, {\n    \"x-api-key\": \"xApiKey\",\n    \"UpgradeSubscriptionRequestEntity\": \"upgradeSubscriptionRequestEntity\",\n  });\n});\n\n/** @internal */\nexport type UpgradeSubscriptionRequest$Outbound = {\n  id: string;\n  \"x-api-key\": string;\n  UpgradeSubscriptionRequestEntity:\n    components.UpgradeSubscriptionRequestEntity$Outbound;\n};\n\n/** @internal */\nexport const UpgradeSubscriptionRequest$outboundSchema: z.ZodType<\n  UpgradeSubscriptionRequest$Outbound,\n  z.ZodTypeDef,\n  UpgradeSubscriptionRequest\n> = z.object({\n  id: z.string(),\n  xApiKey: z.string(),\n  upgradeSubscriptionRequestEntity:\n    components.UpgradeSubscriptionRequestEntity$outboundSchema,\n}).transform((v) => {\n  return remap$(v, {\n    xApiKey: \"x-api-key\",\n    upgradeSubscriptionRequestEntity: \"UpgradeSubscriptionRequestEntity\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace UpgradeSubscriptionRequest$ {\n  /** @deprecated use `UpgradeSubscriptionRequest$inboundSchema` instead. */\n  export const inboundSchema = UpgradeSubscriptionRequest$inboundSchema;\n  /** @deprecated use `UpgradeSubscriptionRequest$outboundSchema` instead. */\n  export const outboundSchema = UpgradeSubscriptionRequest$outboundSchema;\n  /** @deprecated use `UpgradeSubscriptionRequest$Outbound` instead. */\n  export type Outbound = UpgradeSubscriptionRequest$Outbound;\n}\n\nexport function upgradeSubscriptionRequestToJSON(\n  upgradeSubscriptionRequest: UpgradeSubscriptionRequest,\n): string {\n  return JSON.stringify(\n    UpgradeSubscriptionRequest$outboundSchema.parse(upgradeSubscriptionRequest),\n  );\n}\n\nexport function upgradeSubscriptionRequestFromJSON(\n  jsonString: string,\n): SafeParseResult<UpgradeSubscriptionRequest, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => UpgradeSubscriptionRequest$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'UpgradeSubscriptionRequest' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport * as z from \"zod\";\nimport { remap as remap$ } from \"../../lib/primitives.js\";\nimport { safeParse } from \"../../lib/schemas.js\";\nimport { Result as SafeParseResult } from \"../../types/fp.js\";\nimport * as components from \"../components/index.js\";\nimport { SDKValidationError } from \"../errors/sdkvalidationerror.js\";\n\nexport type ValidateLicenseRequest = {\n  xApiKey: string;\n  validateLicenseRequestEntity: components.ValidateLicenseRequestEntity;\n};\n\n/** @internal */\nexport const ValidateLicenseRequest$inboundSchema: z.ZodType<\n  ValidateLicenseRequest,\n  z.ZodTypeDef,\n  unknown\n> = z.object({\n  \"x-api-key\": z.string(),\n  ValidateLicenseRequestEntity:\n    components.ValidateLicenseRequestEntity$inboundSchema,\n}).transform((v) => {\n  return remap$(v, {\n    \"x-api-key\": \"xApiKey\",\n    \"ValidateLicenseRequestEntity\": \"validateLicenseRequestEntity\",\n  });\n});\n\n/** @internal */\nexport type ValidateLicenseRequest$Outbound = {\n  \"x-api-key\": string;\n  ValidateLicenseRequestEntity:\n    components.ValidateLicenseRequestEntity$Outbound;\n};\n\n/** @internal */\nexport const ValidateLicenseRequest$outboundSchema: z.ZodType<\n  ValidateLicenseRequest$Outbound,\n  z.ZodTypeDef,\n  ValidateLicenseRequest\n> = z.object({\n  xApiKey: z.string(),\n  validateLicenseRequestEntity:\n    components.ValidateLicenseRequestEntity$outboundSchema,\n}).transform((v) => {\n  return remap$(v, {\n    xApiKey: \"x-api-key\",\n    validateLicenseRequestEntity: \"ValidateLicenseRequestEntity\",\n  });\n});\n\n/**\n * @internal\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\n */\nexport namespace ValidateLicenseRequest$ {\n  /** @deprecated use `ValidateLicenseRequest$inboundSchema` instead. */\n  export const inboundSchema = ValidateLicenseRequest$inboundSchema;\n  /** @deprecated use `ValidateLicenseRequest$outboundSchema` instead. */\n  export const outboundSchema = ValidateLicenseRequest$outboundSchema;\n  /** @deprecated use `ValidateLicenseRequest$Outbound` instead. */\n  export type Outbound = ValidateLicenseRequest$Outbound;\n}\n\nexport function validateLicenseRequestToJSON(\n  validateLicenseRequest: ValidateLicenseRequest,\n): string {\n  return JSON.stringify(\n    ValidateLicenseRequest$outboundSchema.parse(validateLicenseRequest),\n  );\n}\n\nexport function validateLicenseRequestFromJSON(\n  jsonString: string,\n): SafeParseResult<ValidateLicenseRequest, SDKValidationError> {\n  return safeParse(\n    jsonString,\n    (x) => ValidateLicenseRequest$inboundSchema.parse(JSON.parse(x)),\n    `Failed to parse 'ValidateLicenseRequest' from JSON`,\n  );\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nexport type APICall =\n  | {\n      status: \"complete\";\n      request: Request;\n      response: Response;\n    }\n  | {\n      status: \"request-error\";\n      request: Request;\n      response?: undefined;\n    }\n  | {\n      status: \"invalid\";\n      request?: undefined;\n      response?: undefined;\n    };\n\nexport class APIPromise<T> implements Promise<T> {\n  readonly #promise: Promise<[T, APICall]>;\n  readonly #unwrapped: Promise<T>;\n\n  readonly [Symbol.toStringTag] = \"APIPromise\";\n\n  constructor(p: [T, APICall] | Promise<[T, APICall]>) {\n    this.#promise = p instanceof Promise ? p : Promise.resolve(p);\n    this.#unwrapped =\n      p instanceof Promise\n        ? this.#promise.then(([value]) => value)\n        : Promise.resolve(p[0]);\n  }\n\n  then<TResult1 = T, TResult2 = never>(\n    onfulfilled?:\n      | ((value: T) => TResult1 | PromiseLike<TResult1>)\n      | null\n      | undefined,\n    onrejected?:\n      | ((reason: any) => TResult2 | PromiseLike<TResult2>)\n      | null\n      | undefined,\n  ): Promise<TResult1 | TResult2> {\n    return this.#promise.then(\n      onfulfilled ? ([value]) => onfulfilled(value) : void 0,\n      onrejected,\n    );\n  }\n\n  catch<TResult = never>(\n    onrejected?:\n      | ((reason: any) => TResult | PromiseLike<TResult>)\n      | null\n      | undefined,\n  ): Promise<T | TResult> {\n    return this.#unwrapped.catch(onrejected);\n  }\n\n  finally(onfinally?: (() => void) | null | undefined): Promise<T> {\n    return this.#unwrapped.finally(onfinally);\n  }\n\n  $inspect(): Promise<[T, APICall]> {\n    return this.#promise;\n  }\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport { CreemCore } from \"../core.js\";\nimport { encodeJSON, encodeSimple } from \"../lib/encodings.js\";\nimport * as M from \"../lib/matchers.js\";\nimport { compactMap } from \"../lib/primitives.js\";\nimport { safeParse } from \"../lib/schemas.js\";\nimport { RequestOptions } from \"../lib/sdks.js\";\nimport { pathToFunc } from \"../lib/url.js\";\nimport * as components from \"../models/components/index.js\";\nimport { APIError } from \"../models/errors/apierror.js\";\nimport {\n  ConnectionError,\n  InvalidRequestError,\n  RequestAbortedError,\n  RequestTimeoutError,\n  UnexpectedClientError,\n} from \"../models/errors/httpclienterrors.js\";\nimport { SDKValidationError } from \"../models/errors/sdkvalidationerror.js\";\nimport * as operations from \"../models/operations/index.js\";\nimport { APICall, APIPromise } from \"../types/async.js\";\nimport { Result } from \"../types/fp.js\";\n\n/**\n * Activates a license key.\n */\nexport function activateLicense(\n  client: CreemCore,\n  request: operations.ActivateLicenseRequest,\n  options?: RequestOptions,\n): APIPromise<\n  Result<\n    components.LicenseEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >\n> {\n  return new APIPromise($do(\n    client,\n    request,\n    options,\n  ));\n}\n\nasync function $do(\n  client: CreemCore,\n  request: operations.ActivateLicenseRequest,\n  options?: RequestOptions,\n): Promise<\n  [\n    Result<\n      components.LicenseEntity,\n      | APIError\n      | SDKValidationError\n      | UnexpectedClientError\n      | InvalidRequestError\n      | RequestAbortedError\n      | RequestTimeoutError\n      | ConnectionError\n    >,\n    APICall,\n  ]\n> {\n  const parsed = safeParse(\n    request,\n    (value) => operations.ActivateLicenseRequest$outboundSchema.parse(value),\n    \"Input validation failed\",\n  );\n  if (!parsed.ok) {\n    return [parsed, { status: \"invalid\" }];\n  }\n  const payload = parsed.value;\n  const body = encodeJSON(\"body\", payload.ActivateLicenseRequestEntity, {\n    explode: true,\n  });\n\n  const path = pathToFunc(\"/v1/licenses/activate\")();\n\n  const headers = new Headers(compactMap({\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n    \"x-api-key\": encodeSimple(\"x-api-key\", payload[\"x-api-key\"], {\n      explode: false,\n      charEncoding: \"none\",\n    }),\n  }));\n\n  const context = {\n    baseURL: options?.serverURL ?? client._baseURL ?? \"\",\n    operationID: \"activateLicense\",\n    oAuth2Scopes: [],\n\n    resolvedSecurity: null,\n\n    securitySource: null,\n    retryConfig: options?.retries\n      || client._options.retryConfig\n      || { strategy: \"none\" },\n    retryCodes: options?.retryCodes || [\"429\", \"500\", \"502\", \"503\", \"504\"],\n  };\n\n  const requestRes = client._createRequest(context, {\n    method: \"POST\",\n    baseURL: options?.serverURL,\n    path: path,\n    headers: headers,\n    body: body,\n    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,\n  }, options);\n  if (!requestRes.ok) {\n    return [requestRes, { status: \"invalid\" }];\n  }\n  const req = requestRes.value;\n\n  const doResult = await client._do(req, {\n    context,\n    errorCodes: [\"4XX\", \"5XX\"],\n    retryConfig: context.retryConfig,\n    retryCodes: context.retryCodes,\n  });\n  if (!doResult.ok) {\n    return [doResult, { status: \"request-error\", request: req }];\n  }\n  const response = doResult.value;\n\n  const [result] = await M.match<\n    components.LicenseEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >(\n    M.json(200, components.LicenseEntity$inboundSchema),\n    M.fail(\"4XX\"),\n    M.fail(\"5XX\"),\n  )(response);\n  if (!result.ok) {\n    return [result, { status: \"complete\", request: req, response }];\n  }\n\n  return [result, { status: \"complete\", request: req, response }];\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport { CreemCore } from \"../core.js\";\nimport { encodeSimple } from \"../lib/encodings.js\";\nimport * as M from \"../lib/matchers.js\";\nimport { compactMap } from \"../lib/primitives.js\";\nimport { safeParse } from \"../lib/schemas.js\";\nimport { RequestOptions } from \"../lib/sdks.js\";\nimport { pathToFunc } from \"../lib/url.js\";\nimport * as components from \"../models/components/index.js\";\nimport { APIError } from \"../models/errors/apierror.js\";\nimport {\n  ConnectionError,\n  InvalidRequestError,\n  RequestAbortedError,\n  RequestTimeoutError,\n  UnexpectedClientError,\n} from \"../models/errors/httpclienterrors.js\";\nimport { SDKValidationError } from \"../models/errors/sdkvalidationerror.js\";\nimport * as operations from \"../models/operations/index.js\";\nimport { APICall, APIPromise } from \"../types/async.js\";\nimport { Result } from \"../types/fp.js\";\n\n/**\n * Cancel a subscription.\n */\nexport function cancelSubscription(\n  client: CreemCore,\n  request: operations.CancelSubscriptionRequest,\n  options?: RequestOptions,\n): APIPromise<\n  Result<\n    components.SubscriptionEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >\n> {\n  return new APIPromise($do(\n    client,\n    request,\n    options,\n  ));\n}\n\nasync function $do(\n  client: CreemCore,\n  request: operations.CancelSubscriptionRequest,\n  options?: RequestOptions,\n): Promise<\n  [\n    Result<\n      components.SubscriptionEntity,\n      | APIError\n      | SDKValidationError\n      | UnexpectedClientError\n      | InvalidRequestError\n      | RequestAbortedError\n      | RequestTimeoutError\n      | ConnectionError\n    >,\n    APICall,\n  ]\n> {\n  const parsed = safeParse(\n    request,\n    (value) => operations.CancelSubscriptionRequest$outboundSchema.parse(value),\n    \"Input validation failed\",\n  );\n  if (!parsed.ok) {\n    return [parsed, { status: \"invalid\" }];\n  }\n  const payload = parsed.value;\n  const body = null;\n\n  const pathParams = {\n    id: encodeSimple(\"id\", payload.id, {\n      explode: false,\n      charEncoding: \"percent\",\n    }),\n  };\n\n  const path = pathToFunc(\"/v1/subscriptions/{id}/cancel\")(pathParams);\n\n  const headers = new Headers(compactMap({\n    Accept: \"application/json\",\n    \"x-api-key\": encodeSimple(\"x-api-key\", payload[\"x-api-key\"], {\n      explode: false,\n      charEncoding: \"none\",\n    }),\n  }));\n\n  const context = {\n    baseURL: options?.serverURL ?? client._baseURL ?? \"\",\n    operationID: \"cancelSubscription\",\n    oAuth2Scopes: [],\n\n    resolvedSecurity: null,\n\n    securitySource: null,\n    retryConfig: options?.retries\n      || client._options.retryConfig\n      || { strategy: \"none\" },\n    retryCodes: options?.retryCodes || [\"429\", \"500\", \"502\", \"503\", \"504\"],\n  };\n\n  const requestRes = client._createRequest(context, {\n    method: \"POST\",\n    baseURL: options?.serverURL,\n    path: path,\n    headers: headers,\n    body: body,\n    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,\n  }, options);\n  if (!requestRes.ok) {\n    return [requestRes, { status: \"invalid\" }];\n  }\n  const req = requestRes.value;\n\n  const doResult = await client._do(req, {\n    context,\n    errorCodes: [\"4XX\", \"5XX\"],\n    retryConfig: context.retryConfig,\n    retryCodes: context.retryCodes,\n  });\n  if (!doResult.ok) {\n    return [doResult, { status: \"request-error\", request: req }];\n  }\n  const response = doResult.value;\n\n  const [result] = await M.match<\n    components.SubscriptionEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >(\n    M.json(200, components.SubscriptionEntity$inboundSchema),\n    M.fail(\"4XX\"),\n    M.fail(\"5XX\"),\n  )(response);\n  if (!result.ok) {\n    return [result, { status: \"complete\", request: req, response }];\n  }\n\n  return [result, { status: \"complete\", request: req, response }];\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport { CreemCore } from \"../core.js\";\nimport { encodeJSON, encodeSimple } from \"../lib/encodings.js\";\nimport * as M from \"../lib/matchers.js\";\nimport { compactMap } from \"../lib/primitives.js\";\nimport { safeParse } from \"../lib/schemas.js\";\nimport { RequestOptions } from \"../lib/sdks.js\";\nimport { pathToFunc } from \"../lib/url.js\";\nimport * as components from \"../models/components/index.js\";\nimport { APIError } from \"../models/errors/apierror.js\";\nimport {\n  ConnectionError,\n  InvalidRequestError,\n  RequestAbortedError,\n  RequestTimeoutError,\n  UnexpectedClientError,\n} from \"../models/errors/httpclienterrors.js\";\nimport { SDKValidationError } from \"../models/errors/sdkvalidationerror.js\";\nimport * as operations from \"../models/operations/index.js\";\nimport { APICall, APIPromise } from \"../types/async.js\";\nimport { Result } from \"../types/fp.js\";\n\n/**\n * Creates a new checkout session.\n */\nexport function createCheckout(\n  client: CreemCore,\n  request: operations.CreateCheckoutRequest,\n  options?: RequestOptions,\n): APIPromise<\n  Result<\n    components.CheckoutEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >\n> {\n  return new APIPromise($do(\n    client,\n    request,\n    options,\n  ));\n}\n\nasync function $do(\n  client: CreemCore,\n  request: operations.CreateCheckoutRequest,\n  options?: RequestOptions,\n): Promise<\n  [\n    Result<\n      components.CheckoutEntity,\n      | APIError\n      | SDKValidationError\n      | UnexpectedClientError\n      | InvalidRequestError\n      | RequestAbortedError\n      | RequestTimeoutError\n      | ConnectionError\n    >,\n    APICall,\n  ]\n> {\n  const parsed = safeParse(\n    request,\n    (value) => operations.CreateCheckoutRequest$outboundSchema.parse(value),\n    \"Input validation failed\",\n  );\n  if (!parsed.ok) {\n    return [parsed, { status: \"invalid\" }];\n  }\n  const payload = parsed.value;\n  const body = encodeJSON(\"body\", payload.CreateCheckoutRequest, {\n    explode: true,\n  });\n\n  const path = pathToFunc(\"/v1/checkouts\")();\n\n  const headers = new Headers(compactMap({\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n    \"x-api-key\": encodeSimple(\"x-api-key\", payload[\"x-api-key\"], {\n      explode: false,\n      charEncoding: \"none\",\n    }),\n  }));\n\n  const context = {\n    baseURL: options?.serverURL ?? client._baseURL ?? \"\",\n    operationID: \"createCheckout\",\n    oAuth2Scopes: [],\n\n    resolvedSecurity: null,\n\n    securitySource: null,\n    retryConfig: options?.retries\n      || client._options.retryConfig\n      || { strategy: \"none\" },\n    retryCodes: options?.retryCodes || [\"429\", \"500\", \"502\", \"503\", \"504\"],\n  };\n\n  const requestRes = client._createRequest(context, {\n    method: \"POST\",\n    baseURL: options?.serverURL,\n    path: path,\n    headers: headers,\n    body: body,\n    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,\n  }, options);\n  if (!requestRes.ok) {\n    return [requestRes, { status: \"invalid\" }];\n  }\n  const req = requestRes.value;\n\n  const doResult = await client._do(req, {\n    context,\n    errorCodes: [\"4XX\", \"5XX\"],\n    retryConfig: context.retryConfig,\n    retryCodes: context.retryCodes,\n  });\n  if (!doResult.ok) {\n    return [doResult, { status: \"request-error\", request: req }];\n  }\n  const response = doResult.value;\n\n  const [result] = await M.match<\n    components.CheckoutEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >(\n    M.json(200, components.CheckoutEntity$inboundSchema),\n    M.fail(\"4XX\"),\n    M.fail(\"5XX\"),\n  )(response);\n  if (!result.ok) {\n    return [result, { status: \"complete\", request: req, response }];\n  }\n\n  return [result, { status: \"complete\", request: req, response }];\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport { CreemCore } from \"../core.js\";\nimport { encodeJSON, encodeSimple } from \"../lib/encodings.js\";\nimport * as M from \"../lib/matchers.js\";\nimport { compactMap } from \"../lib/primitives.js\";\nimport { safeParse } from \"../lib/schemas.js\";\nimport { RequestOptions } from \"../lib/sdks.js\";\nimport { pathToFunc } from \"../lib/url.js\";\nimport * as components from \"../models/components/index.js\";\nimport { APIError } from \"../models/errors/apierror.js\";\nimport {\n  ConnectionError,\n  InvalidRequestError,\n  RequestAbortedError,\n  RequestTimeoutError,\n  UnexpectedClientError,\n} from \"../models/errors/httpclienterrors.js\";\nimport { SDKValidationError } from \"../models/errors/sdkvalidationerror.js\";\nimport * as operations from \"../models/operations/index.js\";\nimport { APICall, APIPromise } from \"../types/async.js\";\nimport { Result } from \"../types/fp.js\";\n\n/**\n * Create a discount.\n */\nexport function createDiscount(\n  client: CreemCore,\n  request: operations.CreateDiscountRequest,\n  options?: RequestOptions,\n): APIPromise<\n  Result<\n    components.DiscountEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >\n> {\n  return new APIPromise($do(\n    client,\n    request,\n    options,\n  ));\n}\n\nasync function $do(\n  client: CreemCore,\n  request: operations.CreateDiscountRequest,\n  options?: RequestOptions,\n): Promise<\n  [\n    Result<\n      components.DiscountEntity,\n      | APIError\n      | SDKValidationError\n      | UnexpectedClientError\n      | InvalidRequestError\n      | RequestAbortedError\n      | RequestTimeoutError\n      | ConnectionError\n    >,\n    APICall,\n  ]\n> {\n  const parsed = safeParse(\n    request,\n    (value) => operations.CreateDiscountRequest$outboundSchema.parse(value),\n    \"Input validation failed\",\n  );\n  if (!parsed.ok) {\n    return [parsed, { status: \"invalid\" }];\n  }\n  const payload = parsed.value;\n  const body = encodeJSON(\"body\", payload.CreateDiscountRequestEntity, {\n    explode: true,\n  });\n\n  const path = pathToFunc(\"/v1/discounts\")();\n\n  const headers = new Headers(compactMap({\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n    \"x-api-key\": encodeSimple(\"x-api-key\", payload[\"x-api-key\"], {\n      explode: false,\n      charEncoding: \"none\",\n    }),\n  }));\n\n  const context = {\n    baseURL: options?.serverURL ?? client._baseURL ?? \"\",\n    operationID: \"createDiscount\",\n    oAuth2Scopes: [],\n\n    resolvedSecurity: null,\n\n    securitySource: null,\n    retryConfig: options?.retries\n      || client._options.retryConfig\n      || { strategy: \"none\" },\n    retryCodes: options?.retryCodes || [\"429\", \"500\", \"502\", \"503\", \"504\"],\n  };\n\n  const requestRes = client._createRequest(context, {\n    method: \"POST\",\n    baseURL: options?.serverURL,\n    path: path,\n    headers: headers,\n    body: body,\n    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,\n  }, options);\n  if (!requestRes.ok) {\n    return [requestRes, { status: \"invalid\" }];\n  }\n  const req = requestRes.value;\n\n  const doResult = await client._do(req, {\n    context,\n    errorCodes: [\"4XX\", \"5XX\"],\n    retryConfig: context.retryConfig,\n    retryCodes: context.retryCodes,\n  });\n  if (!doResult.ok) {\n    return [doResult, { status: \"request-error\", request: req }];\n  }\n  const response = doResult.value;\n\n  const [result] = await M.match<\n    components.DiscountEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >(\n    M.json(200, components.DiscountEntity$inboundSchema),\n    M.fail(\"4XX\"),\n    M.fail(\"5XX\"),\n  )(response);\n  if (!result.ok) {\n    return [result, { status: \"complete\", request: req, response }];\n  }\n\n  return [result, { status: \"complete\", request: req, response }];\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport { CreemCore } from \"../core.js\";\nimport { encodeJSON, encodeSimple } from \"../lib/encodings.js\";\nimport * as M from \"../lib/matchers.js\";\nimport { compactMap } from \"../lib/primitives.js\";\nimport { safeParse } from \"../lib/schemas.js\";\nimport { RequestOptions } from \"../lib/sdks.js\";\nimport { pathToFunc } from \"../lib/url.js\";\nimport * as components from \"../models/components/index.js\";\nimport { APIError } from \"../models/errors/apierror.js\";\nimport {\n  ConnectionError,\n  InvalidRequestError,\n  RequestAbortedError,\n  RequestTimeoutError,\n  UnexpectedClientError,\n} from \"../models/errors/httpclienterrors.js\";\nimport { SDKValidationError } from \"../models/errors/sdkvalidationerror.js\";\nimport * as operations from \"../models/operations/index.js\";\nimport { APICall, APIPromise } from \"../types/async.js\";\nimport { Result } from \"../types/fp.js\";\n\n/**\n * Creates a new product.\n */\nexport function createProduct(\n  client: CreemCore,\n  request: operations.CreateProductRequest,\n  options?: RequestOptions,\n): APIPromise<\n  Result<\n    components.ProductEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >\n> {\n  return new APIPromise($do(\n    client,\n    request,\n    options,\n  ));\n}\n\nasync function $do(\n  client: CreemCore,\n  request: operations.CreateProductRequest,\n  options?: RequestOptions,\n): Promise<\n  [\n    Result<\n      components.ProductEntity,\n      | APIError\n      | SDKValidationError\n      | UnexpectedClientError\n      | InvalidRequestError\n      | RequestAbortedError\n      | RequestTimeoutError\n      | ConnectionError\n    >,\n    APICall,\n  ]\n> {\n  const parsed = safeParse(\n    request,\n    (value) => operations.CreateProductRequest$outboundSchema.parse(value),\n    \"Input validation failed\",\n  );\n  if (!parsed.ok) {\n    return [parsed, { status: \"invalid\" }];\n  }\n  const payload = parsed.value;\n  const body = encodeJSON(\"body\", payload.CreateProductRequestEntity, {\n    explode: true,\n  });\n\n  const path = pathToFunc(\"/v1/products\")();\n\n  const headers = new Headers(compactMap({\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n    \"x-api-key\": encodeSimple(\"x-api-key\", payload[\"x-api-key\"], {\n      explode: false,\n      charEncoding: \"none\",\n    }),\n  }));\n\n  const context = {\n    baseURL: options?.serverURL ?? client._baseURL ?? \"\",\n    operationID: \"createProduct\",\n    oAuth2Scopes: [],\n\n    resolvedSecurity: null,\n\n    securitySource: null,\n    retryConfig: options?.retries\n      || client._options.retryConfig\n      || { strategy: \"none\" },\n    retryCodes: options?.retryCodes || [\"429\", \"500\", \"502\", \"503\", \"504\"],\n  };\n\n  const requestRes = client._createRequest(context, {\n    method: \"POST\",\n    baseURL: options?.serverURL,\n    path: path,\n    headers: headers,\n    body: body,\n    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,\n  }, options);\n  if (!requestRes.ok) {\n    return [requestRes, { status: \"invalid\" }];\n  }\n  const req = requestRes.value;\n\n  const doResult = await client._do(req, {\n    context,\n    errorCodes: [\"4XX\", \"5XX\"],\n    retryConfig: context.retryConfig,\n    retryCodes: context.retryCodes,\n  });\n  if (!doResult.ok) {\n    return [doResult, { status: \"request-error\", request: req }];\n  }\n  const response = doResult.value;\n\n  const [result] = await M.match<\n    components.ProductEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >(\n    M.json(200, components.ProductEntity$inboundSchema),\n    M.fail(\"4XX\"),\n    M.fail(\"5XX\"),\n  )(response);\n  if (!result.ok) {\n    return [result, { status: \"complete\", request: req, response }];\n  }\n\n  return [result, { status: \"complete\", request: req, response }];\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport { CreemCore } from \"../core.js\";\nimport { encodeJSON, encodeSimple } from \"../lib/encodings.js\";\nimport * as M from \"../lib/matchers.js\";\nimport { compactMap } from \"../lib/primitives.js\";\nimport { safeParse } from \"../lib/schemas.js\";\nimport { RequestOptions } from \"../lib/sdks.js\";\nimport { pathToFunc } from \"../lib/url.js\";\nimport * as components from \"../models/components/index.js\";\nimport { APIError } from \"../models/errors/apierror.js\";\nimport {\n  ConnectionError,\n  InvalidRequestError,\n  RequestAbortedError,\n  RequestTimeoutError,\n  UnexpectedClientError,\n} from \"../models/errors/httpclienterrors.js\";\nimport { SDKValidationError } from \"../models/errors/sdkvalidationerror.js\";\nimport * as operations from \"../models/operations/index.js\";\nimport { APICall, APIPromise } from \"../types/async.js\";\nimport { Result } from \"../types/fp.js\";\n\n/**\n * Deactivate a license key instance.\n */\nexport function deactivateLicense(\n  client: CreemCore,\n  request: operations.DeactivateLicenseRequest,\n  options?: RequestOptions,\n): APIPromise<\n  Result<\n    components.LicenseEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >\n> {\n  return new APIPromise($do(\n    client,\n    request,\n    options,\n  ));\n}\n\nasync function $do(\n  client: CreemCore,\n  request: operations.DeactivateLicenseRequest,\n  options?: RequestOptions,\n): Promise<\n  [\n    Result<\n      components.LicenseEntity,\n      | APIError\n      | SDKValidationError\n      | UnexpectedClientError\n      | InvalidRequestError\n      | RequestAbortedError\n      | RequestTimeoutError\n      | ConnectionError\n    >,\n    APICall,\n  ]\n> {\n  const parsed = safeParse(\n    request,\n    (value) => operations.DeactivateLicenseRequest$outboundSchema.parse(value),\n    \"Input validation failed\",\n  );\n  if (!parsed.ok) {\n    return [parsed, { status: \"invalid\" }];\n  }\n  const payload = parsed.value;\n  const body = encodeJSON(\"body\", payload.DeactivateLicenseRequestEntity, {\n    explode: true,\n  });\n\n  const path = pathToFunc(\"/v1/licenses/deactivate\")();\n\n  const headers = new Headers(compactMap({\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n    \"x-api-key\": encodeSimple(\"x-api-key\", payload[\"x-api-key\"], {\n      explode: false,\n      charEncoding: \"none\",\n    }),\n  }));\n\n  const context = {\n    baseURL: options?.serverURL ?? client._baseURL ?? \"\",\n    operationID: \"deactivateLicense\",\n    oAuth2Scopes: [],\n\n    resolvedSecurity: null,\n\n    securitySource: null,\n    retryConfig: options?.retries\n      || client._options.retryConfig\n      || { strategy: \"none\" },\n    retryCodes: options?.retryCodes || [\"429\", \"500\", \"502\", \"503\", \"504\"],\n  };\n\n  const requestRes = client._createRequest(context, {\n    method: \"POST\",\n    baseURL: options?.serverURL,\n    path: path,\n    headers: headers,\n    body: body,\n    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,\n  }, options);\n  if (!requestRes.ok) {\n    return [requestRes, { status: \"invalid\" }];\n  }\n  const req = requestRes.value;\n\n  const doResult = await client._do(req, {\n    context,\n    errorCodes: [\"4XX\", \"5XX\"],\n    retryConfig: context.retryConfig,\n    retryCodes: context.retryCodes,\n  });\n  if (!doResult.ok) {\n    return [doResult, { status: \"request-error\", request: req }];\n  }\n  const response = doResult.value;\n\n  const [result] = await M.match<\n    components.LicenseEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >(\n    M.json(200, components.LicenseEntity$inboundSchema),\n    M.fail(\"4XX\"),\n    M.fail(\"5XX\"),\n  )(response);\n  if (!result.ok) {\n    return [result, { status: \"complete\", request: req, response }];\n  }\n\n  return [result, { status: \"complete\", request: req, response }];\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport { CreemCore } from \"../core.js\";\nimport { encodeSimple } from \"../lib/encodings.js\";\nimport * as M from \"../lib/matchers.js\";\nimport { compactMap } from \"../lib/primitives.js\";\nimport { safeParse } from \"../lib/schemas.js\";\nimport { RequestOptions } from \"../lib/sdks.js\";\nimport { pathToFunc } from \"../lib/url.js\";\nimport * as components from \"../models/components/index.js\";\nimport { APIError } from \"../models/errors/apierror.js\";\nimport {\n  ConnectionError,\n  InvalidRequestError,\n  RequestAbortedError,\n  RequestTimeoutError,\n  UnexpectedClientError,\n} from \"../models/errors/httpclienterrors.js\";\nimport { SDKValidationError } from \"../models/errors/sdkvalidationerror.js\";\nimport * as operations from \"../models/operations/index.js\";\nimport { APICall, APIPromise } from \"../types/async.js\";\nimport { Result } from \"../types/fp.js\";\n\n/**\n * Delete a discount.\n */\nexport function deleteDiscount(\n  client: CreemCore,\n  request: operations.DeleteDiscountRequest,\n  options?: RequestOptions,\n): APIPromise<\n  Result<\n    components.DiscountEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >\n> {\n  return new APIPromise($do(\n    client,\n    request,\n    options,\n  ));\n}\n\nasync function $do(\n  client: CreemCore,\n  request: operations.DeleteDiscountRequest,\n  options?: RequestOptions,\n): Promise<\n  [\n    Result<\n      components.DiscountEntity,\n      | APIError\n      | SDKValidationError\n      | UnexpectedClientError\n      | InvalidRequestError\n      | RequestAbortedError\n      | RequestTimeoutError\n      | ConnectionError\n    >,\n    APICall,\n  ]\n> {\n  const parsed = safeParse(\n    request,\n    (value) => operations.DeleteDiscountRequest$outboundSchema.parse(value),\n    \"Input validation failed\",\n  );\n  if (!parsed.ok) {\n    return [parsed, { status: \"invalid\" }];\n  }\n  const payload = parsed.value;\n  const body = null;\n\n  const pathParams = {\n    id: encodeSimple(\"id\", payload.id, {\n      explode: false,\n      charEncoding: \"percent\",\n    }),\n  };\n\n  const path = pathToFunc(\"/v1/discounts/{id}/delete\")(pathParams);\n\n  const headers = new Headers(compactMap({\n    Accept: \"application/json\",\n    \"x-api-key\": encodeSimple(\"x-api-key\", payload[\"x-api-key\"], {\n      explode: false,\n      charEncoding: \"none\",\n    }),\n  }));\n\n  const context = {\n    baseURL: options?.serverURL ?? client._baseURL ?? \"\",\n    operationID: \"deleteDiscount\",\n    oAuth2Scopes: [],\n\n    resolvedSecurity: null,\n\n    securitySource: null,\n    retryConfig: options?.retries\n      || client._options.retryConfig\n      || { strategy: \"none\" },\n    retryCodes: options?.retryCodes || [\"429\", \"500\", \"502\", \"503\", \"504\"],\n  };\n\n  const requestRes = client._createRequest(context, {\n    method: \"DELETE\",\n    baseURL: options?.serverURL,\n    path: path,\n    headers: headers,\n    body: body,\n    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,\n  }, options);\n  if (!requestRes.ok) {\n    return [requestRes, { status: \"invalid\" }];\n  }\n  const req = requestRes.value;\n\n  const doResult = await client._do(req, {\n    context,\n    errorCodes: [\"4XX\", \"5XX\"],\n    retryConfig: context.retryConfig,\n    retryCodes: context.retryCodes,\n  });\n  if (!doResult.ok) {\n    return [doResult, { status: \"request-error\", request: req }];\n  }\n  const response = doResult.value;\n\n  const [result] = await M.match<\n    components.DiscountEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >(\n    M.json(200, components.DiscountEntity$inboundSchema),\n    M.fail(\"4XX\"),\n    M.fail(\"5XX\"),\n  )(response);\n  if (!result.ok) {\n    return [result, { status: \"complete\", request: req, response }];\n  }\n\n  return [result, { status: \"complete\", request: req, response }];\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport { CreemCore } from \"../core.js\";\nimport { encodeJSON, encodeSimple } from \"../lib/encodings.js\";\nimport * as M from \"../lib/matchers.js\";\nimport { compactMap } from \"../lib/primitives.js\";\nimport { safeParse } from \"../lib/schemas.js\";\nimport { RequestOptions } from \"../lib/sdks.js\";\nimport { pathToFunc } from \"../lib/url.js\";\nimport * as components from \"../models/components/index.js\";\nimport { APIError } from \"../models/errors/apierror.js\";\nimport {\n  ConnectionError,\n  InvalidRequestError,\n  RequestAbortedError,\n  RequestTimeoutError,\n  UnexpectedClientError,\n} from \"../models/errors/httpclienterrors.js\";\nimport { SDKValidationError } from \"../models/errors/sdkvalidationerror.js\";\nimport * as operations from \"../models/operations/index.js\";\nimport { APICall, APIPromise } from \"../types/async.js\";\nimport { Result } from \"../types/fp.js\";\n\n/**\n * Generate Customer Links\n */\nexport function generateCustomerLinks(\n  client: CreemCore,\n  request: operations.GenerateCustomerLinksRequest,\n  options?: RequestOptions,\n): APIPromise<\n  Result<\n    components.CustomerLinksEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >\n> {\n  return new APIPromise($do(\n    client,\n    request,\n    options,\n  ));\n}\n\nasync function $do(\n  client: CreemCore,\n  request: operations.GenerateCustomerLinksRequest,\n  options?: RequestOptions,\n): Promise<\n  [\n    Result<\n      components.CustomerLinksEntity,\n      | APIError\n      | SDKValidationError\n      | UnexpectedClientError\n      | InvalidRequestError\n      | RequestAbortedError\n      | RequestTimeoutError\n      | ConnectionError\n    >,\n    APICall,\n  ]\n> {\n  const parsed = safeParse(\n    request,\n    (value) =>\n      operations.GenerateCustomerLinksRequest$outboundSchema.parse(value),\n    \"Input validation failed\",\n  );\n  if (!parsed.ok) {\n    return [parsed, { status: \"invalid\" }];\n  }\n  const payload = parsed.value;\n  const body = encodeJSON(\n    \"body\",\n    payload.CreateCustomerPortalLinkRequestEntity,\n    { explode: true },\n  );\n\n  const path = pathToFunc(\"/v1/customers/billing\")();\n\n  const headers = new Headers(compactMap({\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n    \"x-api-key\": encodeSimple(\"x-api-key\", payload[\"x-api-key\"], {\n      explode: false,\n      charEncoding: \"none\",\n    }),\n  }));\n\n  const context = {\n    baseURL: options?.serverURL ?? client._baseURL ?? \"\",\n    operationID: \"generateCustomerLinks\",\n    oAuth2Scopes: [],\n\n    resolvedSecurity: null,\n\n    securitySource: null,\n    retryConfig: options?.retries\n      || client._options.retryConfig\n      || { strategy: \"none\" },\n    retryCodes: options?.retryCodes || [\"429\", \"500\", \"502\", \"503\", \"504\"],\n  };\n\n  const requestRes = client._createRequest(context, {\n    method: \"POST\",\n    baseURL: options?.serverURL,\n    path: path,\n    headers: headers,\n    body: body,\n    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,\n  }, options);\n  if (!requestRes.ok) {\n    return [requestRes, { status: \"invalid\" }];\n  }\n  const req = requestRes.value;\n\n  const doResult = await client._do(req, {\n    context,\n    errorCodes: [\"4XX\", \"5XX\"],\n    retryConfig: context.retryConfig,\n    retryCodes: context.retryCodes,\n  });\n  if (!doResult.ok) {\n    return [doResult, { status: \"request-error\", request: req }];\n  }\n  const response = doResult.value;\n\n  const [result] = await M.match<\n    components.CustomerLinksEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >(\n    M.json(200, components.CustomerLinksEntity$inboundSchema),\n    M.fail(\"4XX\"),\n    M.fail(\"5XX\"),\n  )(response);\n  if (!result.ok) {\n    return [result, { status: \"complete\", request: req, response }];\n  }\n\n  return [result, { status: \"complete\", request: req, response }];\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport { CreemCore } from \"../core.js\";\nimport { encodeFormQuery, encodeSimple } from \"../lib/encodings.js\";\nimport * as M from \"../lib/matchers.js\";\nimport { compactMap } from \"../lib/primitives.js\";\nimport { safeParse } from \"../lib/schemas.js\";\nimport { RequestOptions } from \"../lib/sdks.js\";\nimport { pathToFunc } from \"../lib/url.js\";\nimport * as components from \"../models/components/index.js\";\nimport { APIError } from \"../models/errors/apierror.js\";\nimport {\n  ConnectionError,\n  InvalidRequestError,\n  RequestAbortedError,\n  RequestTimeoutError,\n  UnexpectedClientError,\n} from \"../models/errors/httpclienterrors.js\";\nimport { SDKValidationError } from \"../models/errors/sdkvalidationerror.js\";\nimport * as operations from \"../models/operations/index.js\";\nimport { APICall, APIPromise } from \"../types/async.js\";\nimport { Result } from \"../types/fp.js\";\n\n/**\n * Retrieve a new checkout session.\n */\nexport function retrieveCheckout(\n  client: CreemCore,\n  request: operations.RetrieveCheckoutRequest,\n  options?: RequestOptions,\n): APIPromise<\n  Result<\n    components.CheckoutEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >\n> {\n  return new APIPromise($do(\n    client,\n    request,\n    options,\n  ));\n}\n\nasync function $do(\n  client: CreemCore,\n  request: operations.RetrieveCheckoutRequest,\n  options?: RequestOptions,\n): Promise<\n  [\n    Result<\n      components.CheckoutEntity,\n      | APIError\n      | SDKValidationError\n      | UnexpectedClientError\n      | InvalidRequestError\n      | RequestAbortedError\n      | RequestTimeoutError\n      | ConnectionError\n    >,\n    APICall,\n  ]\n> {\n  const parsed = safeParse(\n    request,\n    (value) => operations.RetrieveCheckoutRequest$outboundSchema.parse(value),\n    \"Input validation failed\",\n  );\n  if (!parsed.ok) {\n    return [parsed, { status: \"invalid\" }];\n  }\n  const payload = parsed.value;\n  const body = null;\n\n  const path = pathToFunc(\"/v1/checkouts\")();\n\n  const query = encodeFormQuery({\n    \"checkout_id\": payload.checkout_id,\n  });\n\n  const headers = new Headers(compactMap({\n    Accept: \"application/json\",\n    \"x-api-key\": encodeSimple(\"x-api-key\", payload[\"x-api-key\"], {\n      explode: false,\n      charEncoding: \"none\",\n    }),\n  }));\n\n  const context = {\n    baseURL: options?.serverURL ?? client._baseURL ?? \"\",\n    operationID: \"retrieveCheckout\",\n    oAuth2Scopes: [],\n\n    resolvedSecurity: null,\n\n    securitySource: null,\n    retryConfig: options?.retries\n      || client._options.retryConfig\n      || { strategy: \"none\" },\n    retryCodes: options?.retryCodes || [\"429\", \"500\", \"502\", \"503\", \"504\"],\n  };\n\n  const requestRes = client._createRequest(context, {\n    method: \"GET\",\n    baseURL: options?.serverURL,\n    path: path,\n    headers: headers,\n    query: query,\n    body: body,\n    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,\n  }, options);\n  if (!requestRes.ok) {\n    return [requestRes, { status: \"invalid\" }];\n  }\n  const req = requestRes.value;\n\n  const doResult = await client._do(req, {\n    context,\n    errorCodes: [\"4XX\", \"5XX\"],\n    retryConfig: context.retryConfig,\n    retryCodes: context.retryCodes,\n  });\n  if (!doResult.ok) {\n    return [doResult, { status: \"request-error\", request: req }];\n  }\n  const response = doResult.value;\n\n  const [result] = await M.match<\n    components.CheckoutEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >(\n    M.json(200, components.CheckoutEntity$inboundSchema),\n    M.fail(\"4XX\"),\n    M.fail(\"5XX\"),\n  )(response);\n  if (!result.ok) {\n    return [result, { status: \"complete\", request: req, response }];\n  }\n\n  return [result, { status: \"complete\", request: req, response }];\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport { CreemCore } from \"../core.js\";\nimport { encodeFormQuery, encodeSimple } from \"../lib/encodings.js\";\nimport * as M from \"../lib/matchers.js\";\nimport { compactMap } from \"../lib/primitives.js\";\nimport { safeParse } from \"../lib/schemas.js\";\nimport { RequestOptions } from \"../lib/sdks.js\";\nimport { pathToFunc } from \"../lib/url.js\";\nimport * as components from \"../models/components/index.js\";\nimport { APIError } from \"../models/errors/apierror.js\";\nimport {\n  ConnectionError,\n  InvalidRequestError,\n  RequestAbortedError,\n  RequestTimeoutError,\n  UnexpectedClientError,\n} from \"../models/errors/httpclienterrors.js\";\nimport { SDKValidationError } from \"../models/errors/sdkvalidationerror.js\";\nimport * as operations from \"../models/operations/index.js\";\nimport { APICall, APIPromise } from \"../types/async.js\";\nimport { Result } from \"../types/fp.js\";\n\n/**\n * Retrieve a customer\n */\nexport function retrieveCustomer(\n  client: CreemCore,\n  request: operations.RetrieveCustomerRequest,\n  options?: RequestOptions,\n): APIPromise<\n  Result<\n    components.CustomerEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >\n> {\n  return new APIPromise($do(\n    client,\n    request,\n    options,\n  ));\n}\n\nasync function $do(\n  client: CreemCore,\n  request: operations.RetrieveCustomerRequest,\n  options?: RequestOptions,\n): Promise<\n  [\n    Result<\n      components.CustomerEntity,\n      | APIError\n      | SDKValidationError\n      | UnexpectedClientError\n      | InvalidRequestError\n      | RequestAbortedError\n      | RequestTimeoutError\n      | ConnectionError\n    >,\n    APICall,\n  ]\n> {\n  const parsed = safeParse(\n    request,\n    (value) => operations.RetrieveCustomerRequest$outboundSchema.parse(value),\n    \"Input validation failed\",\n  );\n  if (!parsed.ok) {\n    return [parsed, { status: \"invalid\" }];\n  }\n  const payload = parsed.value;\n  const body = null;\n\n  const path = pathToFunc(\"/v1/customers\")();\n\n  const query = encodeFormQuery({\n    \"customer_id\": payload.customer_id,\n    \"email\": payload.email,\n  });\n\n  const headers = new Headers(compactMap({\n    Accept: \"application/json\",\n    \"x-api-key\": encodeSimple(\"x-api-key\", payload[\"x-api-key\"], {\n      explode: false,\n      charEncoding: \"none\",\n    }),\n  }));\n\n  const context = {\n    baseURL: options?.serverURL ?? client._baseURL ?? \"\",\n    operationID: \"retrieveCustomer\",\n    oAuth2Scopes: [],\n\n    resolvedSecurity: null,\n\n    securitySource: null,\n    retryConfig: options?.retries\n      || client._options.retryConfig\n      || { strategy: \"none\" },\n    retryCodes: options?.retryCodes || [\"429\", \"500\", \"502\", \"503\", \"504\"],\n  };\n\n  const requestRes = client._createRequest(context, {\n    method: \"GET\",\n    baseURL: options?.serverURL,\n    path: path,\n    headers: headers,\n    query: query,\n    body: body,\n    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,\n  }, options);\n  if (!requestRes.ok) {\n    return [requestRes, { status: \"invalid\" }];\n  }\n  const req = requestRes.value;\n\n  const doResult = await client._do(req, {\n    context,\n    errorCodes: [\"4XX\", \"5XX\"],\n    retryConfig: context.retryConfig,\n    retryCodes: context.retryCodes,\n  });\n  if (!doResult.ok) {\n    return [doResult, { status: \"request-error\", request: req }];\n  }\n  const response = doResult.value;\n\n  const [result] = await M.match<\n    components.CustomerEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >(\n    M.json(200, components.CustomerEntity$inboundSchema),\n    M.fail(\"4XX\"),\n    M.fail(\"5XX\"),\n  )(response);\n  if (!result.ok) {\n    return [result, { status: \"complete\", request: req, response }];\n  }\n\n  return [result, { status: \"complete\", request: req, response }];\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport { CreemCore } from \"../core.js\";\nimport { encodeFormQuery, encodeSimple } from \"../lib/encodings.js\";\nimport * as M from \"../lib/matchers.js\";\nimport { compactMap } from \"../lib/primitives.js\";\nimport { safeParse } from \"../lib/schemas.js\";\nimport { RequestOptions } from \"../lib/sdks.js\";\nimport { pathToFunc } from \"../lib/url.js\";\nimport * as components from \"../models/components/index.js\";\nimport { APIError } from \"../models/errors/apierror.js\";\nimport {\n  ConnectionError,\n  InvalidRequestError,\n  RequestAbortedError,\n  RequestTimeoutError,\n  UnexpectedClientError,\n} from \"../models/errors/httpclienterrors.js\";\nimport { SDKValidationError } from \"../models/errors/sdkvalidationerror.js\";\nimport * as operations from \"../models/operations/index.js\";\nimport { APICall, APIPromise } from \"../types/async.js\";\nimport { Result } from \"../types/fp.js\";\n\n/**\n * Retrieve discount\n */\nexport function retrieveDiscount(\n  client: CreemCore,\n  request: operations.RetrieveDiscountRequest,\n  options?: RequestOptions,\n): APIPromise<\n  Result<\n    components.DiscountEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >\n> {\n  return new APIPromise($do(\n    client,\n    request,\n    options,\n  ));\n}\n\nasync function $do(\n  client: CreemCore,\n  request: operations.RetrieveDiscountRequest,\n  options?: RequestOptions,\n): Promise<\n  [\n    Result<\n      components.DiscountEntity,\n      | APIError\n      | SDKValidationError\n      | UnexpectedClientError\n      | InvalidRequestError\n      | RequestAbortedError\n      | RequestTimeoutError\n      | ConnectionError\n    >,\n    APICall,\n  ]\n> {\n  const parsed = safeParse(\n    request,\n    (value) => operations.RetrieveDiscountRequest$outboundSchema.parse(value),\n    \"Input validation failed\",\n  );\n  if (!parsed.ok) {\n    return [parsed, { status: \"invalid\" }];\n  }\n  const payload = parsed.value;\n  const body = null;\n\n  const path = pathToFunc(\"/v1/discounts\")();\n\n  const query = encodeFormQuery({\n    \"discount_code\": payload.discount_code,\n    \"discount_id\": payload.discount_id,\n  });\n\n  const headers = new Headers(compactMap({\n    Accept: \"application/json\",\n    \"x-api-key\": encodeSimple(\"x-api-key\", payload[\"x-api-key\"], {\n      explode: false,\n      charEncoding: \"none\",\n    }),\n  }));\n\n  const context = {\n    baseURL: options?.serverURL ?? client._baseURL ?? \"\",\n    operationID: \"retrieveDiscount\",\n    oAuth2Scopes: [],\n\n    resolvedSecurity: null,\n\n    securitySource: null,\n    retryConfig: options?.retries\n      || client._options.retryConfig\n      || { strategy: \"none\" },\n    retryCodes: options?.retryCodes || [\"429\", \"500\", \"502\", \"503\", \"504\"],\n  };\n\n  const requestRes = client._createRequest(context, {\n    method: \"GET\",\n    baseURL: options?.serverURL,\n    path: path,\n    headers: headers,\n    query: query,\n    body: body,\n    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,\n  }, options);\n  if (!requestRes.ok) {\n    return [requestRes, { status: \"invalid\" }];\n  }\n  const req = requestRes.value;\n\n  const doResult = await client._do(req, {\n    context,\n    errorCodes: [\"4XX\", \"5XX\"],\n    retryConfig: context.retryConfig,\n    retryCodes: context.retryCodes,\n  });\n  if (!doResult.ok) {\n    return [doResult, { status: \"request-error\", request: req }];\n  }\n  const response = doResult.value;\n\n  const [result] = await M.match<\n    components.DiscountEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >(\n    M.json(200, components.DiscountEntity$inboundSchema),\n    M.fail(\"4XX\"),\n    M.fail(\"5XX\"),\n  )(response);\n  if (!result.ok) {\n    return [result, { status: \"complete\", request: req, response }];\n  }\n\n  return [result, { status: \"complete\", request: req, response }];\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport { CreemCore } from \"../core.js\";\nimport { encodeFormQuery, encodeSimple } from \"../lib/encodings.js\";\nimport * as M from \"../lib/matchers.js\";\nimport { compactMap } from \"../lib/primitives.js\";\nimport { safeParse } from \"../lib/schemas.js\";\nimport { RequestOptions } from \"../lib/sdks.js\";\nimport { pathToFunc } from \"../lib/url.js\";\nimport * as components from \"../models/components/index.js\";\nimport { APIError } from \"../models/errors/apierror.js\";\nimport {\n  ConnectionError,\n  InvalidRequestError,\n  RequestAbortedError,\n  RequestTimeoutError,\n  UnexpectedClientError,\n} from \"../models/errors/httpclienterrors.js\";\nimport { SDKValidationError } from \"../models/errors/sdkvalidationerror.js\";\nimport * as operations from \"../models/operations/index.js\";\nimport { APICall, APIPromise } from \"../types/async.js\";\nimport { Result } from \"../types/fp.js\";\n\n/**\n * Retrieve a product\n */\nexport function retrieveProduct(\n  client: CreemCore,\n  request: operations.RetrieveProductRequest,\n  options?: RequestOptions,\n): APIPromise<\n  Result<\n    components.ProductEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >\n> {\n  return new APIPromise($do(\n    client,\n    request,\n    options,\n  ));\n}\n\nasync function $do(\n  client: CreemCore,\n  request: operations.RetrieveProductRequest,\n  options?: RequestOptions,\n): Promise<\n  [\n    Result<\n      components.ProductEntity,\n      | APIError\n      | SDKValidationError\n      | UnexpectedClientError\n      | InvalidRequestError\n      | RequestAbortedError\n      | RequestTimeoutError\n      | ConnectionError\n    >,\n    APICall,\n  ]\n> {\n  const parsed = safeParse(\n    request,\n    (value) => operations.RetrieveProductRequest$outboundSchema.parse(value),\n    \"Input validation failed\",\n  );\n  if (!parsed.ok) {\n    return [parsed, { status: \"invalid\" }];\n  }\n  const payload = parsed.value;\n  const body = null;\n\n  const path = pathToFunc(\"/v1/products\")();\n\n  const query = encodeFormQuery({\n    \"product_id\": payload.product_id,\n  });\n\n  const headers = new Headers(compactMap({\n    Accept: \"application/json\",\n    \"x-api-key\": encodeSimple(\"x-api-key\", payload[\"x-api-key\"], {\n      explode: false,\n      charEncoding: \"none\",\n    }),\n  }));\n\n  const context = {\n    baseURL: options?.serverURL ?? client._baseURL ?? \"\",\n    operationID: \"retrieveProduct\",\n    oAuth2Scopes: [],\n\n    resolvedSecurity: null,\n\n    securitySource: null,\n    retryConfig: options?.retries\n      || client._options.retryConfig\n      || { strategy: \"none\" },\n    retryCodes: options?.retryCodes || [\"429\", \"500\", \"502\", \"503\", \"504\"],\n  };\n\n  const requestRes = client._createRequest(context, {\n    method: \"GET\",\n    baseURL: options?.serverURL,\n    path: path,\n    headers: headers,\n    query: query,\n    body: body,\n    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,\n  }, options);\n  if (!requestRes.ok) {\n    return [requestRes, { status: \"invalid\" }];\n  }\n  const req = requestRes.value;\n\n  const doResult = await client._do(req, {\n    context,\n    errorCodes: [\"4XX\", \"5XX\"],\n    retryConfig: context.retryConfig,\n    retryCodes: context.retryCodes,\n  });\n  if (!doResult.ok) {\n    return [doResult, { status: \"request-error\", request: req }];\n  }\n  const response = doResult.value;\n\n  const [result] = await M.match<\n    components.ProductEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >(\n    M.json(200, components.ProductEntity$inboundSchema),\n    M.fail(\"4XX\"),\n    M.fail(\"5XX\"),\n  )(response);\n  if (!result.ok) {\n    return [result, { status: \"complete\", request: req, response }];\n  }\n\n  return [result, { status: \"complete\", request: req, response }];\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport { CreemCore } from \"../core.js\";\nimport { encodeFormQuery, encodeSimple } from \"../lib/encodings.js\";\nimport * as M from \"../lib/matchers.js\";\nimport { compactMap } from \"../lib/primitives.js\";\nimport { safeParse } from \"../lib/schemas.js\";\nimport { RequestOptions } from \"../lib/sdks.js\";\nimport { pathToFunc } from \"../lib/url.js\";\nimport * as components from \"../models/components/index.js\";\nimport { APIError } from \"../models/errors/apierror.js\";\nimport {\n  ConnectionError,\n  InvalidRequestError,\n  RequestAbortedError,\n  RequestTimeoutError,\n  UnexpectedClientError,\n} from \"../models/errors/httpclienterrors.js\";\nimport { SDKValidationError } from \"../models/errors/sdkvalidationerror.js\";\nimport * as operations from \"../models/operations/index.js\";\nimport { APICall, APIPromise } from \"../types/async.js\";\nimport { Result } from \"../types/fp.js\";\n\n/**\n * Retrieve a subscription\n */\nexport function retrieveSubscription(\n  client: CreemCore,\n  request: operations.RetrieveSubscriptionRequest,\n  options?: RequestOptions,\n): APIPromise<\n  Result<\n    components.SubscriptionEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >\n> {\n  return new APIPromise($do(\n    client,\n    request,\n    options,\n  ));\n}\n\nasync function $do(\n  client: CreemCore,\n  request: operations.RetrieveSubscriptionRequest,\n  options?: RequestOptions,\n): Promise<\n  [\n    Result<\n      components.SubscriptionEntity,\n      | APIError\n      | SDKValidationError\n      | UnexpectedClientError\n      | InvalidRequestError\n      | RequestAbortedError\n      | RequestTimeoutError\n      | ConnectionError\n    >,\n    APICall,\n  ]\n> {\n  const parsed = safeParse(\n    request,\n    (value) =>\n      operations.RetrieveSubscriptionRequest$outboundSchema.parse(value),\n    \"Input validation failed\",\n  );\n  if (!parsed.ok) {\n    return [parsed, { status: \"invalid\" }];\n  }\n  const payload = parsed.value;\n  const body = null;\n\n  const path = pathToFunc(\"/v1/subscriptions\")();\n\n  const query = encodeFormQuery({\n    \"subscription_id\": payload.subscription_id,\n  });\n\n  const headers = new Headers(compactMap({\n    Accept: \"application/json\",\n    \"x-api-key\": encodeSimple(\"x-api-key\", payload[\"x-api-key\"], {\n      explode: false,\n      charEncoding: \"none\",\n    }),\n  }));\n\n  const context = {\n    baseURL: options?.serverURL ?? client._baseURL ?? \"\",\n    operationID: \"retrieveSubscription\",\n    oAuth2Scopes: [],\n\n    resolvedSecurity: null,\n\n    securitySource: null,\n    retryConfig: options?.retries\n      || client._options.retryConfig\n      || { strategy: \"none\" },\n    retryCodes: options?.retryCodes || [\"429\", \"500\", \"502\", \"503\", \"504\"],\n  };\n\n  const requestRes = client._createRequest(context, {\n    method: \"GET\",\n    baseURL: options?.serverURL,\n    path: path,\n    headers: headers,\n    query: query,\n    body: body,\n    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,\n  }, options);\n  if (!requestRes.ok) {\n    return [requestRes, { status: \"invalid\" }];\n  }\n  const req = requestRes.value;\n\n  const doResult = await client._do(req, {\n    context,\n    errorCodes: [\"4XX\", \"5XX\"],\n    retryConfig: context.retryConfig,\n    retryCodes: context.retryCodes,\n  });\n  if (!doResult.ok) {\n    return [doResult, { status: \"request-error\", request: req }];\n  }\n  const response = doResult.value;\n\n  const [result] = await M.match<\n    components.SubscriptionEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >(\n    M.json(200, components.SubscriptionEntity$inboundSchema),\n    M.fail(\"4XX\"),\n    M.fail(\"5XX\"),\n  )(response);\n  if (!result.ok) {\n    return [result, { status: \"complete\", request: req, response }];\n  }\n\n  return [result, { status: \"complete\", request: req, response }];\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport { CreemCore } from \"../core.js\";\nimport { encodeFormQuery, encodeSimple } from \"../lib/encodings.js\";\nimport * as M from \"../lib/matchers.js\";\nimport { compactMap } from \"../lib/primitives.js\";\nimport { safeParse } from \"../lib/schemas.js\";\nimport { RequestOptions } from \"../lib/sdks.js\";\nimport { pathToFunc } from \"../lib/url.js\";\nimport * as components from \"../models/components/index.js\";\nimport { APIError } from \"../models/errors/apierror.js\";\nimport {\n  ConnectionError,\n  InvalidRequestError,\n  RequestAbortedError,\n  RequestTimeoutError,\n  UnexpectedClientError,\n} from \"../models/errors/httpclienterrors.js\";\nimport { SDKValidationError } from \"../models/errors/sdkvalidationerror.js\";\nimport * as operations from \"../models/operations/index.js\";\nimport { APICall, APIPromise } from \"../types/async.js\";\nimport { Result } from \"../types/fp.js\";\n\n/**\n * List all products\n */\nexport function searchProducts(\n  client: CreemCore,\n  request: operations.SearchProductsRequest,\n  options?: RequestOptions,\n): APIPromise<\n  Result<\n    components.ProductListEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >\n> {\n  return new APIPromise($do(\n    client,\n    request,\n    options,\n  ));\n}\n\nasync function $do(\n  client: CreemCore,\n  request: operations.SearchProductsRequest,\n  options?: RequestOptions,\n): Promise<\n  [\n    Result<\n      components.ProductListEntity,\n      | APIError\n      | SDKValidationError\n      | UnexpectedClientError\n      | InvalidRequestError\n      | RequestAbortedError\n      | RequestTimeoutError\n      | ConnectionError\n    >,\n    APICall,\n  ]\n> {\n  const parsed = safeParse(\n    request,\n    (value) => operations.SearchProductsRequest$outboundSchema.parse(value),\n    \"Input validation failed\",\n  );\n  if (!parsed.ok) {\n    return [parsed, { status: \"invalid\" }];\n  }\n  const payload = parsed.value;\n  const body = null;\n\n  const path = pathToFunc(\"/v1/products/search\")();\n\n  const query = encodeFormQuery({\n    \"page_number\": payload.page_number,\n    \"page_size\": payload.page_size,\n  });\n\n  const headers = new Headers(compactMap({\n    Accept: \"application/json\",\n    \"x-api-key\": encodeSimple(\"x-api-key\", payload[\"x-api-key\"], {\n      explode: false,\n      charEncoding: \"none\",\n    }),\n  }));\n\n  const context = {\n    baseURL: options?.serverURL ?? client._baseURL ?? \"\",\n    operationID: \"searchProducts\",\n    oAuth2Scopes: [],\n\n    resolvedSecurity: null,\n\n    securitySource: null,\n    retryConfig: options?.retries\n      || client._options.retryConfig\n      || { strategy: \"none\" },\n    retryCodes: options?.retryCodes || [\"429\", \"500\", \"502\", \"503\", \"504\"],\n  };\n\n  const requestRes = client._createRequest(context, {\n    method: \"GET\",\n    baseURL: options?.serverURL,\n    path: path,\n    headers: headers,\n    query: query,\n    body: body,\n    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,\n  }, options);\n  if (!requestRes.ok) {\n    return [requestRes, { status: \"invalid\" }];\n  }\n  const req = requestRes.value;\n\n  const doResult = await client._do(req, {\n    context,\n    errorCodes: [\"4XX\", \"5XX\"],\n    retryConfig: context.retryConfig,\n    retryCodes: context.retryCodes,\n  });\n  if (!doResult.ok) {\n    return [doResult, { status: \"request-error\", request: req }];\n  }\n  const response = doResult.value;\n\n  const [result] = await M.match<\n    components.ProductListEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >(\n    M.json(200, components.ProductListEntity$inboundSchema),\n    M.fail(\"4XX\"),\n    M.fail(\"5XX\"),\n  )(response);\n  if (!result.ok) {\n    return [result, { status: \"complete\", request: req, response }];\n  }\n\n  return [result, { status: \"complete\", request: req, response }];\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport { CreemCore } from \"../core.js\";\nimport { encodeFormQuery, encodeSimple } from \"../lib/encodings.js\";\nimport * as M from \"../lib/matchers.js\";\nimport { compactMap } from \"../lib/primitives.js\";\nimport { safeParse } from \"../lib/schemas.js\";\nimport { RequestOptions } from \"../lib/sdks.js\";\nimport { pathToFunc } from \"../lib/url.js\";\nimport * as components from \"../models/components/index.js\";\nimport { APIError } from \"../models/errors/apierror.js\";\nimport {\n  ConnectionError,\n  InvalidRequestError,\n  RequestAbortedError,\n  RequestTimeoutError,\n  UnexpectedClientError,\n} from \"../models/errors/httpclienterrors.js\";\nimport { SDKValidationError } from \"../models/errors/sdkvalidationerror.js\";\nimport * as operations from \"../models/operations/index.js\";\nimport { APICall, APIPromise } from \"../types/async.js\";\nimport { Result } from \"../types/fp.js\";\n\n/**\n * List all transactions\n */\nexport function searchTransactions(\n  client: CreemCore,\n  request: operations.SearchTransactionsRequest,\n  options?: RequestOptions,\n): APIPromise<\n  Result<\n    components.TransactionListEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >\n> {\n  return new APIPromise($do(\n    client,\n    request,\n    options,\n  ));\n}\n\nasync function $do(\n  client: CreemCore,\n  request: operations.SearchTransactionsRequest,\n  options?: RequestOptions,\n): Promise<\n  [\n    Result<\n      components.TransactionListEntity,\n      | APIError\n      | SDKValidationError\n      | UnexpectedClientError\n      | InvalidRequestError\n      | RequestAbortedError\n      | RequestTimeoutError\n      | ConnectionError\n    >,\n    APICall,\n  ]\n> {\n  const parsed = safeParse(\n    request,\n    (value) => operations.SearchTransactionsRequest$outboundSchema.parse(value),\n    \"Input validation failed\",\n  );\n  if (!parsed.ok) {\n    return [parsed, { status: \"invalid\" }];\n  }\n  const payload = parsed.value;\n  const body = null;\n\n  const path = pathToFunc(\"/v1/transactions/search\")();\n\n  const query = encodeFormQuery({\n    \"customer_id\": payload.customer_id,\n    \"order_id\": payload.order_id,\n    \"page_number\": payload.page_number,\n    \"page_size\": payload.page_size,\n    \"product_id\": payload.product_id,\n  });\n\n  const headers = new Headers(compactMap({\n    Accept: \"application/json\",\n    \"x-api-key\": encodeSimple(\"x-api-key\", payload[\"x-api-key\"], {\n      explode: false,\n      charEncoding: \"none\",\n    }),\n  }));\n\n  const context = {\n    baseURL: options?.serverURL ?? client._baseURL ?? \"\",\n    operationID: \"searchTransactions\",\n    oAuth2Scopes: [],\n\n    resolvedSecurity: null,\n\n    securitySource: null,\n    retryConfig: options?.retries\n      || client._options.retryConfig\n      || { strategy: \"none\" },\n    retryCodes: options?.retryCodes || [\"429\", \"500\", \"502\", \"503\", \"504\"],\n  };\n\n  const requestRes = client._createRequest(context, {\n    method: \"GET\",\n    baseURL: options?.serverURL,\n    path: path,\n    headers: headers,\n    query: query,\n    body: body,\n    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,\n  }, options);\n  if (!requestRes.ok) {\n    return [requestRes, { status: \"invalid\" }];\n  }\n  const req = requestRes.value;\n\n  const doResult = await client._do(req, {\n    context,\n    errorCodes: [\"4XX\", \"5XX\"],\n    retryConfig: context.retryConfig,\n    retryCodes: context.retryCodes,\n  });\n  if (!doResult.ok) {\n    return [doResult, { status: \"request-error\", request: req }];\n  }\n  const response = doResult.value;\n\n  const [result] = await M.match<\n    components.TransactionListEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >(\n    M.json(200, components.TransactionListEntity$inboundSchema),\n    M.fail(\"4XX\"),\n    M.fail(\"5XX\"),\n  )(response);\n  if (!result.ok) {\n    return [result, { status: \"complete\", request: req, response }];\n  }\n\n  return [result, { status: \"complete\", request: req, response }];\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport { CreemCore } from \"../core.js\";\nimport { encodeJSON, encodeSimple } from \"../lib/encodings.js\";\nimport * as M from \"../lib/matchers.js\";\nimport { compactMap } from \"../lib/primitives.js\";\nimport { safeParse } from \"../lib/schemas.js\";\nimport { RequestOptions } from \"../lib/sdks.js\";\nimport { pathToFunc } from \"../lib/url.js\";\nimport * as components from \"../models/components/index.js\";\nimport { APIError } from \"../models/errors/apierror.js\";\nimport {\n  ConnectionError,\n  InvalidRequestError,\n  RequestAbortedError,\n  RequestTimeoutError,\n  UnexpectedClientError,\n} from \"../models/errors/httpclienterrors.js\";\nimport { SDKValidationError } from \"../models/errors/sdkvalidationerror.js\";\nimport * as operations from \"../models/operations/index.js\";\nimport { APICall, APIPromise } from \"../types/async.js\";\nimport { Result } from \"../types/fp.js\";\n\n/**\n * Update a subscription.\n */\nexport function updateSubscription(\n  client: CreemCore,\n  request: operations.UpdateSubscriptionRequest,\n  options?: RequestOptions,\n): APIPromise<\n  Result<\n    components.SubscriptionEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >\n> {\n  return new APIPromise($do(\n    client,\n    request,\n    options,\n  ));\n}\n\nasync function $do(\n  client: CreemCore,\n  request: operations.UpdateSubscriptionRequest,\n  options?: RequestOptions,\n): Promise<\n  [\n    Result<\n      components.SubscriptionEntity,\n      | APIError\n      | SDKValidationError\n      | UnexpectedClientError\n      | InvalidRequestError\n      | RequestAbortedError\n      | RequestTimeoutError\n      | ConnectionError\n    >,\n    APICall,\n  ]\n> {\n  const parsed = safeParse(\n    request,\n    (value) => operations.UpdateSubscriptionRequest$outboundSchema.parse(value),\n    \"Input validation failed\",\n  );\n  if (!parsed.ok) {\n    return [parsed, { status: \"invalid\" }];\n  }\n  const payload = parsed.value;\n  const body = encodeJSON(\"body\", payload.UpdateSubscriptionRequestEntity, {\n    explode: true,\n  });\n\n  const pathParams = {\n    id: encodeSimple(\"id\", payload.id, {\n      explode: false,\n      charEncoding: \"percent\",\n    }),\n  };\n\n  const path = pathToFunc(\"/v1/subscriptions/{id}\")(pathParams);\n\n  const headers = new Headers(compactMap({\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n    \"x-api-key\": encodeSimple(\"x-api-key\", payload[\"x-api-key\"], {\n      explode: false,\n      charEncoding: \"none\",\n    }),\n  }));\n\n  const context = {\n    baseURL: options?.serverURL ?? client._baseURL ?? \"\",\n    operationID: \"updateSubscription\",\n    oAuth2Scopes: [],\n\n    resolvedSecurity: null,\n\n    securitySource: null,\n    retryConfig: options?.retries\n      || client._options.retryConfig\n      || { strategy: \"none\" },\n    retryCodes: options?.retryCodes || [\"429\", \"500\", \"502\", \"503\", \"504\"],\n  };\n\n  const requestRes = client._createRequest(context, {\n    method: \"POST\",\n    baseURL: options?.serverURL,\n    path: path,\n    headers: headers,\n    body: body,\n    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,\n  }, options);\n  if (!requestRes.ok) {\n    return [requestRes, { status: \"invalid\" }];\n  }\n  const req = requestRes.value;\n\n  const doResult = await client._do(req, {\n    context,\n    errorCodes: [\"4XX\", \"5XX\"],\n    retryConfig: context.retryConfig,\n    retryCodes: context.retryCodes,\n  });\n  if (!doResult.ok) {\n    return [doResult, { status: \"request-error\", request: req }];\n  }\n  const response = doResult.value;\n\n  const [result] = await M.match<\n    components.SubscriptionEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >(\n    M.json(200, components.SubscriptionEntity$inboundSchema),\n    M.fail(\"4XX\"),\n    M.fail(\"5XX\"),\n  )(response);\n  if (!result.ok) {\n    return [result, { status: \"complete\", request: req, response }];\n  }\n\n  return [result, { status: \"complete\", request: req, response }];\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport { CreemCore } from \"../core.js\";\nimport { encodeJSON, encodeSimple } from \"../lib/encodings.js\";\nimport * as M from \"../lib/matchers.js\";\nimport { compactMap } from \"../lib/primitives.js\";\nimport { safeParse } from \"../lib/schemas.js\";\nimport { RequestOptions } from \"../lib/sdks.js\";\nimport { pathToFunc } from \"../lib/url.js\";\nimport * as components from \"../models/components/index.js\";\nimport { APIError } from \"../models/errors/apierror.js\";\nimport {\n  ConnectionError,\n  InvalidRequestError,\n  RequestAbortedError,\n  RequestTimeoutError,\n  UnexpectedClientError,\n} from \"../models/errors/httpclienterrors.js\";\nimport { SDKValidationError } from \"../models/errors/sdkvalidationerror.js\";\nimport * as operations from \"../models/operations/index.js\";\nimport { APICall, APIPromise } from \"../types/async.js\";\nimport { Result } from \"../types/fp.js\";\n\n/**\n * Upgrade a subscription to a different product\n */\nexport function upgradeSubscription(\n  client: CreemCore,\n  request: operations.UpgradeSubscriptionRequest,\n  options?: RequestOptions,\n): APIPromise<\n  Result<\n    components.SubscriptionEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >\n> {\n  return new APIPromise($do(\n    client,\n    request,\n    options,\n  ));\n}\n\nasync function $do(\n  client: CreemCore,\n  request: operations.UpgradeSubscriptionRequest,\n  options?: RequestOptions,\n): Promise<\n  [\n    Result<\n      components.SubscriptionEntity,\n      | APIError\n      | SDKValidationError\n      | UnexpectedClientError\n      | InvalidRequestError\n      | RequestAbortedError\n      | RequestTimeoutError\n      | ConnectionError\n    >,\n    APICall,\n  ]\n> {\n  const parsed = safeParse(\n    request,\n    (value) =>\n      operations.UpgradeSubscriptionRequest$outboundSchema.parse(value),\n    \"Input validation failed\",\n  );\n  if (!parsed.ok) {\n    return [parsed, { status: \"invalid\" }];\n  }\n  const payload = parsed.value;\n  const body = encodeJSON(\"body\", payload.UpgradeSubscriptionRequestEntity, {\n    explode: true,\n  });\n\n  const pathParams = {\n    id: encodeSimple(\"id\", payload.id, {\n      explode: false,\n      charEncoding: \"percent\",\n    }),\n  };\n\n  const path = pathToFunc(\"/v1/subscriptions/{id}/upgrade\")(pathParams);\n\n  const headers = new Headers(compactMap({\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n    \"x-api-key\": encodeSimple(\"x-api-key\", payload[\"x-api-key\"], {\n      explode: false,\n      charEncoding: \"none\",\n    }),\n  }));\n\n  const context = {\n    baseURL: options?.serverURL ?? client._baseURL ?? \"\",\n    operationID: \"upgradeSubscription\",\n    oAuth2Scopes: [],\n\n    resolvedSecurity: null,\n\n    securitySource: null,\n    retryConfig: options?.retries\n      || client._options.retryConfig\n      || { strategy: \"none\" },\n    retryCodes: options?.retryCodes || [\"429\", \"500\", \"502\", \"503\", \"504\"],\n  };\n\n  const requestRes = client._createRequest(context, {\n    method: \"POST\",\n    baseURL: options?.serverURL,\n    path: path,\n    headers: headers,\n    body: body,\n    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,\n  }, options);\n  if (!requestRes.ok) {\n    return [requestRes, { status: \"invalid\" }];\n  }\n  const req = requestRes.value;\n\n  const doResult = await client._do(req, {\n    context,\n    errorCodes: [\"4XX\", \"5XX\"],\n    retryConfig: context.retryConfig,\n    retryCodes: context.retryCodes,\n  });\n  if (!doResult.ok) {\n    return [doResult, { status: \"request-error\", request: req }];\n  }\n  const response = doResult.value;\n\n  const [result] = await M.match<\n    components.SubscriptionEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >(\n    M.json(200, components.SubscriptionEntity$inboundSchema),\n    M.fail(\"4XX\"),\n    M.fail(\"5XX\"),\n  )(response);\n  if (!result.ok) {\n    return [result, { status: \"complete\", request: req, response }];\n  }\n\n  return [result, { status: \"complete\", request: req, response }];\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport { CreemCore } from \"../core.js\";\nimport { encodeJSON, encodeSimple } from \"../lib/encodings.js\";\nimport * as M from \"../lib/matchers.js\";\nimport { compactMap } from \"../lib/primitives.js\";\nimport { safeParse } from \"../lib/schemas.js\";\nimport { RequestOptions } from \"../lib/sdks.js\";\nimport { pathToFunc } from \"../lib/url.js\";\nimport * as components from \"../models/components/index.js\";\nimport { APIError } from \"../models/errors/apierror.js\";\nimport {\n  ConnectionError,\n  InvalidRequestError,\n  RequestAbortedError,\n  RequestTimeoutError,\n  UnexpectedClientError,\n} from \"../models/errors/httpclienterrors.js\";\nimport { SDKValidationError } from \"../models/errors/sdkvalidationerror.js\";\nimport * as operations from \"../models/operations/index.js\";\nimport { APICall, APIPromise } from \"../types/async.js\";\nimport { Result } from \"../types/fp.js\";\n\n/**\n * Validates a license key or instance.\n */\nexport function validateLicense(\n  client: CreemCore,\n  request: operations.ValidateLicenseRequest,\n  options?: RequestOptions,\n): APIPromise<\n  Result<\n    components.LicenseEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >\n> {\n  return new APIPromise($do(\n    client,\n    request,\n    options,\n  ));\n}\n\nasync function $do(\n  client: CreemCore,\n  request: operations.ValidateLicenseRequest,\n  options?: RequestOptions,\n): Promise<\n  [\n    Result<\n      components.LicenseEntity,\n      | APIError\n      | SDKValidationError\n      | UnexpectedClientError\n      | InvalidRequestError\n      | RequestAbortedError\n      | RequestTimeoutError\n      | ConnectionError\n    >,\n    APICall,\n  ]\n> {\n  const parsed = safeParse(\n    request,\n    (value) => operations.ValidateLicenseRequest$outboundSchema.parse(value),\n    \"Input validation failed\",\n  );\n  if (!parsed.ok) {\n    return [parsed, { status: \"invalid\" }];\n  }\n  const payload = parsed.value;\n  const body = encodeJSON(\"body\", payload.ValidateLicenseRequestEntity, {\n    explode: true,\n  });\n\n  const path = pathToFunc(\"/v1/licenses/validate\")();\n\n  const headers = new Headers(compactMap({\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n    \"x-api-key\": encodeSimple(\"x-api-key\", payload[\"x-api-key\"], {\n      explode: false,\n      charEncoding: \"none\",\n    }),\n  }));\n\n  const context = {\n    baseURL: options?.serverURL ?? client._baseURL ?? \"\",\n    operationID: \"validateLicense\",\n    oAuth2Scopes: [],\n\n    resolvedSecurity: null,\n\n    securitySource: null,\n    retryConfig: options?.retries\n      || client._options.retryConfig\n      || { strategy: \"none\" },\n    retryCodes: options?.retryCodes || [\"429\", \"500\", \"502\", \"503\", \"504\"],\n  };\n\n  const requestRes = client._createRequest(context, {\n    method: \"POST\",\n    baseURL: options?.serverURL,\n    path: path,\n    headers: headers,\n    body: body,\n    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,\n  }, options);\n  if (!requestRes.ok) {\n    return [requestRes, { status: \"invalid\" }];\n  }\n  const req = requestRes.value;\n\n  const doResult = await client._do(req, {\n    context,\n    errorCodes: [\"4XX\", \"5XX\"],\n    retryConfig: context.retryConfig,\n    retryCodes: context.retryCodes,\n  });\n  if (!doResult.ok) {\n    return [doResult, { status: \"request-error\", request: req }];\n  }\n  const response = doResult.value;\n\n  const [result] = await M.match<\n    components.LicenseEntity,\n    | APIError\n    | SDKValidationError\n    | UnexpectedClientError\n    | InvalidRequestError\n    | RequestAbortedError\n    | RequestTimeoutError\n    | ConnectionError\n  >(\n    M.json(200, components.LicenseEntity$inboundSchema),\n    M.fail(\"4XX\"),\n    M.fail(\"5XX\"),\n  )(response);\n  if (!result.ok) {\n    return [result, { status: \"complete\", request: req, response }];\n  }\n\n  return [result, { status: \"complete\", request: req, response }];\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport { RequestInput } from \"../lib/http.js\";\nimport {\n  AfterErrorContext,\n  AfterErrorHook,\n  AfterSuccessContext,\n  AfterSuccessHook,\n  BeforeCreateRequestContext,\n  BeforeCreateRequestHook,\n  BeforeRequestContext,\n  BeforeRequestHook,\n  Hook,\n  Hooks,\n  SDKInitHook,\n  SDKInitOptions,\n} from \"./types.js\";\n\nexport class SDKHooks implements Hooks {\n  sdkInitHooks: SDKInitHook[] = [];\n  beforeCreateRequestHooks: BeforeCreateRequestHook[] = [];\n  beforeRequestHooks: BeforeRequestHook[] = [];\n  afterSuccessHooks: AfterSuccessHook[] = [];\n  afterErrorHooks: AfterErrorHook[] = [];\n\n  constructor() {\n    const presetHooks: Array<Hook> = [];\n\n    for (const hook of presetHooks) {\n      if (\"sdkInit\" in hook) {\n        this.registerSDKInitHook(hook);\n      }\n      if (\"beforeCreateRequest\" in hook) {\n        this.registerBeforeCreateRequestHook(hook);\n      }\n      if (\"beforeRequest\" in hook) {\n        this.registerBeforeRequestHook(hook);\n      }\n      if (\"afterSuccess\" in hook) {\n        this.registerAfterSuccessHook(hook);\n      }\n      if (\"afterError\" in hook) {\n        this.registerAfterErrorHook(hook);\n      }\n    }\n  }\n\n  registerSDKInitHook(hook: SDKInitHook) {\n    this.sdkInitHooks.push(hook);\n  }\n\n  registerBeforeCreateRequestHook(hook: BeforeCreateRequestHook) {\n    this.beforeCreateRequestHooks.push(hook);\n  }\n\n  registerBeforeRequestHook(hook: BeforeRequestHook) {\n    this.beforeRequestHooks.push(hook);\n  }\n\n  registerAfterSuccessHook(hook: AfterSuccessHook) {\n    this.afterSuccessHooks.push(hook);\n  }\n\n  registerAfterErrorHook(hook: AfterErrorHook) {\n    this.afterErrorHooks.push(hook);\n  }\n\n  sdkInit(opts: SDKInitOptions): SDKInitOptions {\n    return this.sdkInitHooks.reduce((opts, hook) => hook.sdkInit(opts), opts);\n  }\n\n  beforeCreateRequest(\n    hookCtx: BeforeCreateRequestContext,\n    input: RequestInput,\n  ): RequestInput {\n    let inp = input;\n\n    for (const hook of this.beforeCreateRequestHooks) {\n      inp = hook.beforeCreateRequest(hookCtx, inp);\n    }\n\n    return inp;\n  }\n\n  async beforeRequest(\n    hookCtx: BeforeRequestContext,\n    request: Request,\n  ): Promise<Request> {\n    let req = request;\n\n    for (const hook of this.beforeRequestHooks) {\n      req = await hook.beforeRequest(hookCtx, req);\n    }\n\n    return req;\n  }\n\n  async afterSuccess(\n    hookCtx: AfterSuccessContext,\n    response: Response,\n  ): Promise<Response> {\n    let res = response;\n\n    for (const hook of this.afterSuccessHooks) {\n      res = await hook.afterSuccess(hookCtx, res);\n    }\n\n    return res;\n  }\n\n  async afterError(\n    hookCtx: AfterErrorContext,\n    response: Response | null,\n    error: unknown,\n  ): Promise<{ response: Response | null; error: unknown }> {\n    let res = response;\n    let err = error;\n\n    for (const hook of this.afterErrorHooks) {\n      const result = await hook.afterError(hookCtx, res, err);\n      res = result.response;\n      err = result.error;\n    }\n\n    return { response: res, error: err };\n  }\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\n/**\n * Base class for all HTTP errors.\n */\nexport class HTTPClientError extends Error {\n  /** The underlying cause of the error. */\n  override readonly cause: unknown;\n  override name = \"HTTPClientError\";\n  constructor(message: string, opts?: { cause?: unknown }) {\n    let msg = message;\n    if (opts?.cause) {\n      msg += `: ${opts.cause}`;\n    }\n\n    super(msg, opts);\n    // In older runtimes, the cause field would not have been assigned through\n    // the super() call.\n    if (typeof this.cause === \"undefined\") {\n      this.cause = opts?.cause;\n    }\n  }\n}\n\n/**\n * An error to capture unrecognised or unexpected errors when making HTTP calls.\n */\nexport class UnexpectedClientError extends HTTPClientError {\n  override name = \"UnexpectedClientError\";\n}\n\n/**\n * An error that is raised when any inputs used to create a request are invalid.\n */\nexport class InvalidRequestError extends HTTPClientError {\n  override name = \"InvalidRequestError\";\n}\n\n/**\n * An error that is raised when a HTTP request was aborted by the client error.\n */\nexport class RequestAbortedError extends HTTPClientError {\n  override readonly name = \"RequestAbortedError\";\n}\n\n/**\n * An error that is raised when a HTTP request timed out due to an AbortSignal\n * signal timeout.\n */\nexport class RequestTimeoutError extends HTTPClientError {\n  override readonly name = \"RequestTimeoutError\";\n}\n\n/**\n * An error that is raised when a HTTP client is unable to make a request to\n * a server.\n */\nexport class ConnectionError extends HTTPClientError {\n  override readonly name = \"ConnectionError\";\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\n/*\nMIT License\n\nCopyright (c) 2024 Jason Miller <jason@developit.ca> (http://jasonformat.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/**\n * @param obj The object to walk\n * @param key The key path to walk the object with\n * @param def A default value to return if the result is undefined\n *\n * @example\n * dlv(obj, \"a.b.c.d\")\n * @example\n * dlv(object, [\"a\", \"b\", \"c\", \"d\"])\n * @example\n * dlv(object, \"foo.bar.baz\", \"Hello, default value!\")\n */\nexport function dlv<T = any>(\n  obj: any,\n  key: string | string[],\n  def?: T,\n  p?: number,\n  undef?: never,\n): T | undefined {\n  key = Array.isArray(key) ? key : key.split(\".\");\n  for (p = 0; p < key.length; p++) {\n    const k = key[p];\n    obj = k != null && obj ? obj[k] : undef;\n  }\n  return obj === undef ? def : obj;\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport { dlv } from \"./dlv.js\";\n\nimport * as z from \"zod\";\n\nexport interface Env {\n  CREEM_DEBUG?: boolean | undefined;\n}\n\nexport const envSchema: z.ZodType<Env, z.ZodTypeDef, unknown> = z.object({\n  CREEM_DEBUG: z.coerce.boolean().optional(),\n});\n\nlet envMemo: Env | undefined = undefined;\n/**\n * Reads and validates environment variables.\n */\nexport function env(): Env {\n  if (envMemo) {\n    return envMemo;\n  }\n\n  envMemo = envSchema.parse(\n    dlv(globalThis, \"process.env\") ?? dlv(globalThis, \"Deno.env\") ?? {},\n  );\n  return envMemo;\n}\n\n/**\n * Clears the cached env object. Useful for testing with a fresh environment.\n */\nexport function resetEnv() {\n  envMemo = undefined;\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport { isConnectionError, isTimeoutError } from \"./http.js\";\n\nexport type BackoffStrategy = {\n  initialInterval: number;\n  maxInterval: number;\n  exponent: number;\n  maxElapsedTime: number;\n};\n\nconst defaultBackoff: BackoffStrategy = {\n  initialInterval: 500,\n  maxInterval: 60000,\n  exponent: 1.5,\n  maxElapsedTime: 3600000,\n};\n\nexport type RetryConfig =\n  | { strategy: \"none\" }\n  | {\n      strategy: \"backoff\";\n      backoff?: BackoffStrategy;\n      retryConnectionErrors?: boolean;\n    };\n\n/**\n * PermanentError is an error that is not recoverable. Throwing this error will\n * cause a retry loop to terminate.\n */\nexport class PermanentError extends Error {\n  /** The underlying cause of the error. */\n  override readonly cause: unknown;\n\n  constructor(message: string, options?: { cause?: unknown }) {\n    let msg = message;\n    if (options?.cause) {\n      msg += `: ${options.cause}`;\n    }\n\n    super(msg, options);\n    this.name = \"PermanentError\";\n    // In older runtimes, the cause field would not have been assigned through\n    // the super() call.\n    if (typeof this.cause === \"undefined\") {\n      this.cause = options?.cause;\n    }\n\n    Object.setPrototypeOf(this, PermanentError.prototype);\n  }\n}\n\n/**\n * TemporaryError is an error is used to signal that an HTTP request can be\n * retried as part of a retry loop. If retry attempts are exhausted and this\n * error is thrown, the response will be returned to the caller.\n */\nexport class TemporaryError extends Error {\n  response: Response;\n\n  constructor(message: string, response: Response) {\n    super(message);\n    this.response = response;\n    this.name = \"TemporaryError\";\n\n    Object.setPrototypeOf(this, TemporaryError.prototype);\n  }\n}\n\nexport async function retry(\n  fetchFn: () => Promise<Response>,\n  options: {\n    config: RetryConfig;\n    statusCodes: string[];\n  },\n): Promise<Response> {\n  switch (options.config.strategy) {\n    case \"backoff\":\n      return retryBackoff(\n        wrapFetcher(fetchFn, {\n          statusCodes: options.statusCodes,\n          retryConnectionErrors: !!options.config.retryConnectionErrors,\n        }),\n        options.config.backoff ?? defaultBackoff,\n      );\n    default:\n      return await fetchFn();\n  }\n}\n\nfunction wrapFetcher(\n  fn: () => Promise<Response>,\n  options: {\n    statusCodes: string[];\n    retryConnectionErrors: boolean;\n  },\n): () => Promise<Response> {\n  return async () => {\n    try {\n      const res = await fn();\n      if (isRetryableResponse(res, options.statusCodes)) {\n        throw new TemporaryError(\n          \"Response failed with retryable status code\",\n          res,\n        );\n      }\n\n      return res;\n    } catch (err: unknown) {\n      if (err instanceof TemporaryError) {\n        throw err;\n      }\n\n      if (\n        options.retryConnectionErrors &&\n        (isTimeoutError(err) || isConnectionError(err))\n      ) {\n        throw err;\n      }\n\n      throw new PermanentError(\"Permanent error\", { cause: err });\n    }\n  };\n}\n\nconst codeRangeRE = new RegExp(\"^[0-9]xx$\", \"i\");\n\nfunction isRetryableResponse(res: Response, statusCodes: string[]): boolean {\n  const actual = `${res.status}`;\n\n  return statusCodes.some((code) => {\n    if (!codeRangeRE.test(code)) {\n      return code === actual;\n    }\n\n    const expectFamily = code.charAt(0);\n    if (!expectFamily) {\n      throw new Error(\"Invalid status code range\");\n    }\n\n    const actualFamily = actual.charAt(0);\n    if (!actualFamily) {\n      throw new Error(`Invalid response status code: ${actual}`);\n    }\n\n    return actualFamily === expectFamily;\n  });\n}\n\nasync function retryBackoff(\n  fn: () => Promise<Response>,\n  strategy: BackoffStrategy,\n): Promise<Response> {\n  const { maxElapsedTime, initialInterval, exponent, maxInterval } = strategy;\n\n  const start = Date.now();\n  let x = 0;\n\n  while (true) {\n    try {\n      const res = await fn();\n      return res;\n    } catch (err: unknown) {\n      if (err instanceof PermanentError) {\n        throw err.cause;\n      }\n      const elapsed = Date.now() - start;\n      if (elapsed > maxElapsedTime) {\n        if (err instanceof TemporaryError) {\n          return err.response;\n        }\n\n        throw err;\n      }\n\n      let retryInterval = 0;\n      if (err instanceof TemporaryError) {\n        retryInterval = retryIntervalFromResponse(err.response);\n      }\n\n      if (retryInterval <= 0) {\n        retryInterval =\n          initialInterval * Math.pow(x, exponent) + Math.random() * 1000;\n      }\n\n      const d = Math.min(retryInterval, maxInterval);\n\n      await delay(d);\n      x++;\n    }\n  }\n}\n\nfunction retryIntervalFromResponse(res: Response): number {\n  const retryVal = res.headers.get(\"retry-after\") || \"\";\n  if (!retryVal) {\n    return 0;\n  }\n\n  const parsedNumber = Number(retryVal);\n  if (Number.isInteger(parsedNumber)) {\n    return parsedNumber * 1000;\n  }\n\n  const parsedDate = Date.parse(retryVal);\n  if (Number.isInteger(parsedDate)) {\n    const deltaMS = parsedDate - Date.now();\n    return deltaMS > 0 ? Math.ceil(deltaMS) : 0;\n  }\n\n  return 0;\n}\n\nasync function delay(delay: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, delay));\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport { SDKHooks } from \"../hooks/hooks.js\";\nimport { HookContext } from \"../hooks/types.js\";\nimport {\n  ConnectionError,\n  InvalidRequestError,\n  RequestAbortedError,\n  RequestTimeoutError,\n  UnexpectedClientError,\n} from \"../models/errors/httpclienterrors.js\";\nimport { ERR, OK, Result } from \"../types/fp.js\";\nimport { stringToBase64 } from \"./base64.js\";\nimport { SDK_METADATA, SDKOptions, serverURLFromOptions } from \"./config.js\";\nimport { encodeForm } from \"./encodings.js\";\nimport { env } from \"./env.js\";\nimport {\n  HTTPClient,\n  isAbortError,\n  isConnectionError,\n  isTimeoutError,\n  matchContentType,\n  matchStatusCode,\n} from \"./http.js\";\nimport { Logger } from \"./logger.js\";\nimport { retry, RetryConfig } from \"./retries.js\";\nimport { SecurityState } from \"./security.js\";\n\nexport type RequestOptions = {\n  /**\n   * Sets a timeout, in milliseconds, on HTTP requests made by an SDK method. If\n   * `fetchOptions.signal` is set then it will take precedence over this option.\n   */\n  timeoutMs?: number;\n  /**\n   * Set or override a retry policy on HTTP calls.\n   */\n  retries?: RetryConfig;\n  /**\n   * Specifies the status codes which should be retried using the given retry policy.\n   */\n  retryCodes?: string[];\n  /**\n   * Overrides the base server URL that will be used by an operation.\n   */\n  serverURL?: string | URL;\n  /**\n   * @deprecated `fetchOptions` has been flattened into `RequestOptions`.\n   *\n   * Sets various request options on the `fetch` call made by an SDK method.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Request/Request#options|Request}\n   */\n  fetchOptions?: Omit<RequestInit, \"method\" | \"body\">;\n} & Omit<RequestInit, \"method\" | \"body\">;\n\ntype RequestConfig = {\n  method: string;\n  path: string;\n  baseURL?: string | URL | undefined;\n  query?: string;\n  body?: RequestInit[\"body\"];\n  headers?: HeadersInit;\n  security?: SecurityState | null;\n  uaHeader?: string;\n  timeoutMs?: number;\n};\n\nconst gt: unknown = typeof globalThis === \"undefined\" ? null : globalThis;\nconst webWorkerLike = typeof gt === \"object\"\n  && gt != null\n  && \"importScripts\" in gt\n  && typeof gt[\"importScripts\"] === \"function\";\nconst isBrowserLike = webWorkerLike\n  || (typeof navigator !== \"undefined\" && \"serviceWorker\" in navigator)\n  || (typeof window === \"object\" && typeof window.document !== \"undefined\");\n\nexport class ClientSDK {\n  readonly #httpClient: HTTPClient;\n  readonly #hooks: SDKHooks;\n  readonly #logger?: Logger | undefined;\n  public readonly _baseURL: URL | null;\n  public readonly _options: SDKOptions & { hooks?: SDKHooks };\n\n  constructor(options: SDKOptions = {}) {\n    const opt = options as unknown;\n    if (\n      typeof opt === \"object\"\n      && opt != null\n      && \"hooks\" in opt\n      && opt.hooks instanceof SDKHooks\n    ) {\n      this.#hooks = opt.hooks;\n    } else {\n      this.#hooks = new SDKHooks();\n    }\n    this._options = { ...options, hooks: this.#hooks };\n\n    const url = serverURLFromOptions(options);\n    if (url) {\n      url.pathname = url.pathname.replace(/\\/+$/, \"\") + \"/\";\n    }\n    const { baseURL, client } = this.#hooks.sdkInit({\n      baseURL: url,\n      client: options.httpClient || new HTTPClient(),\n    });\n    this._baseURL = baseURL;\n    this.#httpClient = client;\n    this.#logger = options.debugLogger;\n    if (!this.#logger && env().CREEM_DEBUG) {\n      this.#logger = console;\n    }\n  }\n\n  public _createRequest(\n    context: HookContext,\n    conf: RequestConfig,\n    options?: RequestOptions,\n  ): Result<Request, InvalidRequestError | UnexpectedClientError> {\n    const { method, path, query, headers: opHeaders, security } = conf;\n\n    const base = conf.baseURL ?? this._baseURL;\n    if (!base) {\n      return ERR(new InvalidRequestError(\"No base URL provided for operation\"));\n    }\n    const reqURL = new URL(base);\n    const inputURL = new URL(path, reqURL);\n\n    if (path) {\n      reqURL.pathname += reqURL.pathname.endsWith(\"/\") ? \"\" : \"/\";\n      reqURL.pathname += inputURL.pathname.replace(/^\\/+/, \"\");\n    }\n\n    let finalQuery = query || \"\";\n\n    const secQuery: string[] = [];\n    for (const [k, v] of Object.entries(security?.queryParams || {})) {\n      const q = encodeForm(k, v, { charEncoding: \"percent\" });\n      if (typeof q !== \"undefined\") {\n        secQuery.push(q);\n      }\n    }\n    if (secQuery.length) {\n      finalQuery += `&${secQuery.join(\"&\")}`;\n    }\n\n    if (finalQuery) {\n      const q = finalQuery.startsWith(\"&\") ? finalQuery.slice(1) : finalQuery;\n      reqURL.search = `?${q}`;\n    }\n\n    const headers = new Headers(opHeaders);\n\n    const username = security?.basic.username;\n    const password = security?.basic.password;\n    if (username != null || password != null) {\n      const encoded = stringToBase64(\n        [username || \"\", password || \"\"].join(\":\"),\n      );\n      headers.set(\"Authorization\", `Basic ${encoded}`);\n    }\n\n    const securityHeaders = new Headers(security?.headers || {});\n    for (const [k, v] of securityHeaders) {\n      headers.set(k, v);\n    }\n\n    let cookie = headers.get(\"cookie\") || \"\";\n    for (const [k, v] of Object.entries(security?.cookies || {})) {\n      cookie += `; ${k}=${v}`;\n    }\n    cookie = cookie.startsWith(\"; \") ? cookie.slice(2) : cookie;\n    headers.set(\"cookie\", cookie);\n\n    const userHeaders = new Headers(\n      options?.headers ?? options?.fetchOptions?.headers,\n    );\n    for (const [k, v] of userHeaders) {\n      headers.set(k, v);\n    }\n\n    // Only set user agent header in non-browser-like environments since CORS\n    // policy disallows setting it in browsers e.g. Chrome throws an error.\n    if (!isBrowserLike) {\n      headers.set(conf.uaHeader ?? \"user-agent\", SDK_METADATA.userAgent);\n    }\n\n    const fetchOptions: Omit<RequestInit, \"method\" | \"body\"> = {\n      ...options?.fetchOptions,\n      ...options,\n    };\n    if (!fetchOptions?.signal && conf.timeoutMs && conf.timeoutMs > 0) {\n      const timeoutSignal = AbortSignal.timeout(conf.timeoutMs);\n      fetchOptions.signal = timeoutSignal;\n    }\n\n    if (conf.body instanceof ReadableStream) {\n      Object.assign(fetchOptions, { duplex: \"half\" });\n    }\n\n    let input;\n    try {\n      input = this.#hooks.beforeCreateRequest(context, {\n        url: reqURL,\n        options: {\n          ...fetchOptions,\n          body: conf.body ?? null,\n          headers,\n          method,\n        },\n      });\n    } catch (err: unknown) {\n      return ERR(\n        new UnexpectedClientError(\"Create request hook failed to execute\", {\n          cause: err,\n        }),\n      );\n    }\n\n    return OK(new Request(input.url, input.options));\n  }\n\n  public async _do(\n    request: Request,\n    options: {\n      context: HookContext;\n      errorCodes: number | string | (number | string)[];\n      retryConfig: RetryConfig;\n      retryCodes: string[];\n    },\n  ): Promise<\n    Result<\n      Response,\n      | RequestAbortedError\n      | RequestTimeoutError\n      | ConnectionError\n      | UnexpectedClientError\n    >\n  > {\n    const { context, errorCodes } = options;\n\n    return retry(\n      async () => {\n        const req = await this.#hooks.beforeRequest(context, request.clone());\n        await logRequest(this.#logger, req).catch((e) =>\n          this.#logger?.log(\"Failed to log request:\", e)\n        );\n\n        let response = await this.#httpClient.request(req);\n\n        try {\n          if (matchStatusCode(response, errorCodes)) {\n            const result = await this.#hooks.afterError(\n              context,\n              response,\n              null,\n            );\n            if (result.error) {\n              throw result.error;\n            }\n            response = result.response || response;\n          } else {\n            response = await this.#hooks.afterSuccess(context, response);\n          }\n        } finally {\n          await logResponse(this.#logger, response, req)\n            .catch(e => this.#logger?.log(\"Failed to log response:\", e));\n        }\n\n        return response;\n      },\n      { config: options.retryConfig, statusCodes: options.retryCodes },\n    ).then(\n      (r) => OK(r),\n      (err) => {\n        switch (true) {\n          case isAbortError(err):\n            return ERR(\n              new RequestAbortedError(\"Request aborted by client\", {\n                cause: err,\n              }),\n            );\n          case isTimeoutError(err):\n            return ERR(\n              new RequestTimeoutError(\"Request timed out\", { cause: err }),\n            );\n          case isConnectionError(err):\n            return ERR(\n              new ConnectionError(\"Unable to make request\", { cause: err }),\n            );\n          default:\n            return ERR(\n              new UnexpectedClientError(\"Unexpected HTTP client error\", {\n                cause: err,\n              }),\n            );\n        }\n      },\n    );\n  }\n}\n\nconst jsonLikeContentTypeRE = /(application|text)\\/.*?\\+*json.*/;\nconst jsonlLikeContentTypeRE =\n  /(application|text)\\/(.*?\\+*\\bjsonl\\b.*|.*?\\+*\\bx-ndjson\\b.*)/;\nasync function logRequest(logger: Logger | undefined, req: Request) {\n  if (!logger) {\n    return;\n  }\n\n  const contentType = req.headers.get(\"content-type\");\n  const ct = contentType?.split(\";\")[0] || \"\";\n\n  logger.group(`> Request: ${req.method} ${req.url}`);\n\n  logger.group(\"Headers:\");\n  for (const [k, v] of req.headers.entries()) {\n    logger.log(`${k}: ${v}`);\n  }\n  logger.groupEnd();\n\n  logger.group(\"Body:\");\n  switch (true) {\n    case jsonLikeContentTypeRE.test(ct):\n      logger.log(await req.clone().json());\n      break;\n    case ct.startsWith(\"text/\"):\n      logger.log(await req.clone().text());\n      break;\n    case ct === \"multipart/form-data\": {\n      const body = await req.clone().formData();\n      for (const [k, v] of body) {\n        const vlabel = v instanceof Blob ? \"<Blob>\" : v;\n        logger.log(`${k}: ${vlabel}`);\n      }\n      break;\n    }\n    default:\n      logger.log(`<${contentType}>`);\n      break;\n  }\n  logger.groupEnd();\n\n  logger.groupEnd();\n}\n\nasync function logResponse(\n  logger: Logger | undefined,\n  res: Response,\n  req: Request,\n) {\n  if (!logger) {\n    return;\n  }\n\n  const contentType = res.headers.get(\"content-type\");\n  const ct = contentType?.split(\";\")[0] || \"\";\n\n  logger.group(`< Response: ${req.method} ${req.url}`);\n  logger.log(\"Status Code:\", res.status, res.statusText);\n\n  logger.group(\"Headers:\");\n  for (const [k, v] of res.headers.entries()) {\n    logger.log(`${k}: ${v}`);\n  }\n  logger.groupEnd();\n\n  logger.group(\"Body:\");\n  switch (true) {\n    case matchContentType(res, \"application/json\")\n      || jsonLikeContentTypeRE.test(ct) && !jsonlLikeContentTypeRE.test(ct):\n      logger.log(await res.clone().json());\n      break;\n    case matchContentType(res, \"application/jsonl\")\n      || jsonlLikeContentTypeRE.test(ct):\n      logger.log(await res.clone().text());\n      break;\n    case matchContentType(res, \"text/event-stream\"):\n      logger.log(`<${contentType}>`);\n      break;\n    case matchContentType(res, \"text/*\"):\n      logger.log(await res.clone().text());\n      break;\n    case matchContentType(res, \"multipart/form-data\"): {\n      const body = await res.clone().formData();\n      for (const [k, v] of body) {\n        const vlabel = v instanceof Blob ? \"<Blob>\" : v;\n        logger.log(`${k}: ${vlabel}`);\n      }\n      break;\n    }\n    default:\n      logger.log(`<${contentType}>`);\n      break;\n  }\n  logger.groupEnd();\n\n  logger.groupEnd();\n}\n", "/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport { activateLicense } from \"../funcs/activateLicense.js\";\nimport { cancelSubscription } from \"../funcs/cancelSubscription.js\";\nimport { createCheckout } from \"../funcs/createCheckout.js\";\nimport { createDiscount } from \"../funcs/createDiscount.js\";\nimport { createProduct } from \"../funcs/createProduct.js\";\nimport { deactivateLicense } from \"../funcs/deactivateLicense.js\";\nimport { deleteDiscount } from \"../funcs/deleteDiscount.js\";\nimport { generateCustomerLinks } from \"../funcs/generateCustomerLinks.js\";\nimport { retrieveCheckout } from \"../funcs/retrieveCheckout.js\";\nimport { retrieveCustomer } from \"../funcs/retrieveCustomer.js\";\nimport { retrieveDiscount } from \"../funcs/retrieveDiscount.js\";\nimport { retrieveProduct } from \"../funcs/retrieveProduct.js\";\nimport { retrieveSubscription } from \"../funcs/retrieveSubscription.js\";\nimport { searchProducts } from \"../funcs/searchProducts.js\";\nimport { searchTransactions } from \"../funcs/searchTransactions.js\";\nimport { updateSubscription } from \"../funcs/updateSubscription.js\";\nimport { upgradeSubscription } from \"../funcs/upgradeSubscription.js\";\nimport { validateLicense } from \"../funcs/validateLicense.js\";\nimport { ClientSDK, RequestOptions } from \"../lib/sdks.js\";\nimport * as components from \"../models/components/index.js\";\nimport * as operations from \"../models/operations/index.js\";\nimport { unwrapAsync } from \"../types/fp.js\";\n\nexport class Creem extends ClientSDK {\n  /**\n   * Retrieve a product\n   */\n  async retrieveProduct(\n    request: operations.RetrieveProductRequest,\n    options?: RequestOptions,\n  ): Promise<components.ProductEntity> {\n    return unwrapAsync(retrieveProduct(\n      this,\n      request,\n      options,\n    ));\n  }\n\n  /**\n   * Creates a new product.\n   */\n  async createProduct(\n    request: operations.CreateProductRequest,\n    options?: RequestOptions,\n  ): Promise<components.ProductEntity> {\n    return unwrapAsync(createProduct(\n      this,\n      request,\n      options,\n    ));\n  }\n\n  /**\n   * List all products\n   */\n  async searchProducts(\n    request: operations.SearchProductsRequest,\n    options?: RequestOptions,\n  ): Promise<components.ProductListEntity> {\n    return unwrapAsync(searchProducts(\n      this,\n      request,\n      options,\n    ));\n  }\n\n  /**\n   * Retrieve a customer\n   */\n  async retrieveCustomer(\n    request: operations.RetrieveCustomerRequest,\n    options?: RequestOptions,\n  ): Promise<components.CustomerEntity> {\n    return unwrapAsync(retrieveCustomer(\n      this,\n      request,\n      options,\n    ));\n  }\n\n  /**\n   * Generate Customer Links\n   */\n  async generateCustomerLinks(\n    request: operations.GenerateCustomerLinksRequest,\n    options?: RequestOptions,\n  ): Promise<components.CustomerLinksEntity> {\n    return unwrapAsync(generateCustomerLinks(\n      this,\n      request,\n      options,\n    ));\n  }\n\n  /**\n   * Retrieve a subscription\n   */\n  async retrieveSubscription(\n    request: operations.RetrieveSubscriptionRequest,\n    options?: RequestOptions,\n  ): Promise<components.SubscriptionEntity> {\n    return unwrapAsync(retrieveSubscription(\n      this,\n      request,\n      options,\n    ));\n  }\n\n  /**\n   * Cancel a subscription.\n   */\n  async cancelSubscription(\n    request: operations.CancelSubscriptionRequest,\n    options?: RequestOptions,\n  ): Promise<components.SubscriptionEntity> {\n    return unwrapAsync(cancelSubscription(\n      this,\n      request,\n      options,\n    ));\n  }\n\n  /**\n   * Update a subscription.\n   */\n  async updateSubscription(\n    request: operations.UpdateSubscriptionRequest,\n    options?: RequestOptions,\n  ): Promise<components.SubscriptionEntity> {\n    return unwrapAsync(updateSubscription(\n      this,\n      request,\n      options,\n    ));\n  }\n\n  /**\n   * Upgrade a subscription to a different product\n   */\n  async upgradeSubscription(\n    request: operations.UpgradeSubscriptionRequest,\n    options?: RequestOptions,\n  ): Promise<components.SubscriptionEntity> {\n    return unwrapAsync(upgradeSubscription(\n      this,\n      request,\n      options,\n    ));\n  }\n\n  /**\n   * Retrieve a new checkout session.\n   */\n  async retrieveCheckout(\n    request: operations.RetrieveCheckoutRequest,\n    options?: RequestOptions,\n  ): Promise<components.CheckoutEntity> {\n    return unwrapAsync(retrieveCheckout(\n      this,\n      request,\n      options,\n    ));\n  }\n\n  /**\n   * Creates a new checkout session.\n   */\n  async createCheckout(\n    request: operations.CreateCheckoutRequest,\n    options?: RequestOptions,\n  ): Promise<components.CheckoutEntity> {\n    return unwrapAsync(createCheckout(\n      this,\n      request,\n      options,\n    ));\n  }\n\n  /**\n   * Activates a license key.\n   */\n  async activateLicense(\n    request: operations.ActivateLicenseRequest,\n    options?: RequestOptions,\n  ): Promise<components.LicenseEntity> {\n    return unwrapAsync(activateLicense(\n      this,\n      request,\n      options,\n    ));\n  }\n\n  /**\n   * Deactivate a license key instance.\n   */\n  async deactivateLicense(\n    request: operations.DeactivateLicenseRequest,\n    options?: RequestOptions,\n  ): Promise<components.LicenseEntity> {\n    return unwrapAsync(deactivateLicense(\n      this,\n      request,\n      options,\n    ));\n  }\n\n  /**\n   * Validates a license key or instance.\n   */\n  async validateLicense(\n    request: operations.ValidateLicenseRequest,\n    options?: RequestOptions,\n  ): Promise<components.LicenseEntity> {\n    return unwrapAsync(validateLicense(\n      this,\n      request,\n      options,\n    ));\n  }\n\n  /**\n   * Retrieve discount\n   */\n  async retrieveDiscount(\n    request: operations.RetrieveDiscountRequest,\n    options?: RequestOptions,\n  ): Promise<components.DiscountEntity> {\n    return unwrapAsync(retrieveDiscount(\n      this,\n      request,\n      options,\n    ));\n  }\n\n  /**\n   * Create a discount.\n   */\n  async createDiscount(\n    request: operations.CreateDiscountRequest,\n    options?: RequestOptions,\n  ): Promise<components.DiscountEntity> {\n    return unwrapAsync(createDiscount(\n      this,\n      request,\n      options,\n    ));\n  }\n\n  /**\n   * Delete a discount.\n   */\n  async deleteDiscount(\n    request: operations.DeleteDiscountRequest,\n    options?: RequestOptions,\n  ): Promise<components.DiscountEntity> {\n    return unwrapAsync(deleteDiscount(\n      this,\n      request,\n      options,\n    ));\n  }\n\n  /**\n   * List all transactions\n   */\n  async searchTransactions(\n    request: operations.SearchTransactionsRequest,\n    options?: RequestOptions,\n  ): Promise<components.TransactionListEntity> {\n    return unwrapAsync(searchTransactions(\n      this,\n      request,\n      options,\n    ));\n  }\n}\n"],
  "mappings": "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xB,WAAO,YAAY,mBACjB,MACA,SACA,OAAO,CACR;EACH;;;;EAKA,MAAM,oBACJ,SACA,SAAwB;AAExB,WAAO,YAAY,oBACjB,MACA,SACA,OAAO,CACR;EACH;;;;EAKA,MAAM,iBACJ,SACA,SAAwB;AAExB,WAAO,YAAY,iBACjB,MACA,SACA,OAAO,CACR;EACH;;;;EAKA,MAAM,eACJ,SACA,SAAwB;AAExB,WAAO,YAAY,eACjB,MACA,SACA,OAAO,CACR;EACH;;;;EAKA,MAAM,gBACJ,SACA,SAAwB;AAExB,WAAO,YAAY,gBACjB,MACA,SACA,OAAO,CACR;EACH;;;;EAKA,MAAM,kBACJ,SACA,SAAwB;AAExB,WAAO,YAAY,kBACjB,MACA,SACA,OAAO,CACR;EACH;;;;EAKA,MAAM,gBACJ,SACA,SAAwB;AAExB,WAAO,YAAY,gBACjB,MACA,SACA,OAAO,CACR;EACH;;;;EAKA,MAAM,iBACJ,SACA,SAAwB;AAExB,WAAO,YAAY,iBACjB,MACA,SACA,OAAO,CACR;EACH;;;;EAKA,MAAM,eACJ,SACA,SAAwB;AAExB,WAAO,YAAY,eACjB,MACA,SACA,OAAO,CACR;EACH;;;;EAKA,MAAM,eACJ,SACA,SAAwB;AAExB,WAAO,YAAY,eACjB,MACA,SACA,OAAO,CACR;EACH;;;;EAKA,MAAM,mBACJ,SACA,SAAwB;AAExB,WAAO,YAAY,mBACjB,MACA,SACA,OAAO,CACR;EACH;;",
  "names": ["_a", "_a", "_a", "len", "err", "match", "_a", "res", "ActivateLicenseRequestEntity$", "CustomerEntityMode$", "CustomerEntity$", "Text$", "CustomField$", "OrderEntityMode$", "OrderEntityStatus$", "OrderEntityType$", "OrderEntity$", "FeatureEntity$", "Mode$", "ProductEntity$", "LicenseEntityMode$", "LicenseEntityStatus$", "ActivationLimit$", "ExpiresAt$", "LicenseEntityInstanceMode$", "LicenseEntityInstanceStatus$", "Instance$", "LicenseEntity$", "ProductFeatureEntity$", "SubscriptionItemEntityMode$", "SubscriptionItemEntity$", "TransactionEntityMode$", "TransactionEntity$", "SubscriptionEntityMode$", "Product$", "Customer$", "Status$", "SubscriptionEntity$", "CheckoutEntityMode$", "CheckoutEntityProduct$", "Subscription$", "CheckoutEntityCustomer$", "CheckoutEntity$", "CustomerRequestEntity$", "Type$", "CustomFieldRequestEntity$", "CreateCheckoutRequest$", "CreateCustomerPortalLinkRequestEntity$", "CreateDiscountRequestEntityType$", "CreateDiscountRequestEntityDuration$", "CreateDiscountRequestEntity$", "CreateProductRequestEntity$", "CustomerLinksEntity$", "DeactivateLicenseRequestEntity$", "DiscountEntityMode$", "DiscountEntityStatus$", "DiscountEntityType$", "Duration$", "DiscountEntity$", "PaginationEntity$", "ProductListEntity$", "TransactionListEntity$", "UpsertSubscriptionItemEntity$", "UpdateBehavior$", "UpdateSubscriptionRequestEntity$", "UpgradeSubscriptionRequestEntityUpdateBehavior$", "UpgradeSubscriptionRequestEntity$", "ValidateLicenseRequestEntity$", "ActivateLicenseRequest$", "CancelSubscriptionRequest$", "CreateCheckoutRequest$inboundSchema", "CreateCheckoutRequest$outboundSchema", "CreateCheckoutRequest$", "CreateDiscountRequest$", "CreateProductRequest$", "DeactivateLicenseRequest$", "DeleteDiscountRequest$", "GenerateCustomerLinksRequest$", "RetrieveCheckoutRequest$", "RetrieveCustomerRequest$", "RetrieveDiscountRequest$", "RetrieveProductRequest$", "RetrieveSubscriptionRequest$", "SearchProductsRequest$", "SearchTransactionsRequest$", "UpdateSubscriptionRequest$", "UpgradeSubscriptionRequest$", "ValidateLicenseRequest$", "$do", "$do", "CreateCheckoutRequest$outboundSchema", "$do", "$do", "$do", "$do", "$do", "$do", "$do", "$do", "$do", "$do", "$do", "$do", "$do", "$do", "$do", "opts", "codeRangeRE", "delay", "__classPrivateFieldSet", "__classPrivateFieldGet", "_a"]
}
